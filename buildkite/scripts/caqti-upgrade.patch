diff --git a/opam.export b/opam.export
index 655b623d35..130eb77140 100644
--- a/opam.export
+++ b/opam.export
@@ -69,9 +69,9 @@ installed: [
   "camlp4.4.14+1"
   "camomile.1.0.2"
   "capnp.3.4.0"
-  "caqti.1.5.0"
-  "caqti-async.1.3.0"
-  "caqti-driver-postgresql.1.5.1"
+  "caqti.2.0.1"
+  "caqti-async.2.0.1"
+  "caqti-driver-postgresql.2.0.1"
   "charInfo_width.1.1.0"
   "check_opam_switch.~dev"
   "cmdliner.1.0.3"
@@ -138,6 +138,7 @@ installed: [
   "lmdb.1.0"
   "logs.0.7.0"
   "lwt.5.4.0"
+  "lwt-dllist.1.0.1"
   "lwt_log.1.1.1"
   "lwt_react.1.1.2"
   "macaddr.5.0.1"
@@ -155,6 +156,7 @@ installed: [
   "mirage-crypto-rng.0.11.0"
   "mirage-crypto-rng-async.0.11.0"
   "mmap.1.1.0"
+  "mtime.2.0.0"
   "num.1.1"
   "ocaml.4.14.0"
   "ocaml-base-compiler.4.14.0"
diff --git a/src/app/archive/lib/metrics.ml b/src/app/archive/lib/metrics.ml
index c69e1805d1..aac3552028 100644
--- a/src/app/archive/lib/metrics.ml
+++ b/src/app/archive/lib/metrics.ml
@@ -14,7 +14,7 @@ let default_missing_blocks_width = 2000
 
 module Max_block_height = struct
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       "SELECT GREATEST(0, MAX(height)) FROM blocks"
 
   let update (module Conn : Caqti_async.CONNECTION) metric_server =
@@ -30,7 +30,7 @@ end
 module Missing_blocks = struct
   (*A block is missing if there is no entry for a specific height. However, if there is an entry then it doesn't necessarily mean that it is part of the main chain. Unparented_blocks will show value > 1 in that case. Look for the last 2000 blocks*)
   let query missing_blocks_width =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       (Core_kernel.sprintf
          {sql| 
         SELECT COUNT( * )
@@ -55,7 +55,7 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       {sql|
            SELECT COUNT( * ) FROM blocks
            WHERE parent_id IS NULL
diff --git a/src/app/archive/lib/processor.ml b/src/app/archive/lib/processor.ml
index d4f0e9c585..a954162791 100644
--- a/src/app/archive/lib/processor.ml
+++ b/src/app/archive/lib/processor.ml
@@ -29,6 +29,7 @@ open Mina_block
 open Pipe_lib
 open Signature_lib
 open Pickles_types
+open Mina_caqti
 
 let applied_str = "applied"
 
@@ -42,20 +43,20 @@ module Public_key = struct
   let find (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
     let public_key = Public_key.Compressed.to_base58_check t in
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (Caqti_request.Infix.(Caqti_type.string ->! Caqti_type.int)
          "SELECT id FROM public_keys WHERE value = ?" )
       public_key
 
   let find_opt (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
     let public_key = Public_key.Compressed.to_base58_check t in
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+      (Caqti_request.Infix.(Caqti_type.string ->? Caqti_type.int)
          "SELECT id FROM public_keys WHERE value = ?" )
       public_key
 
   let find_by_id (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (Caqti_request.Infix.(Caqti_type.int ->! Caqti_type.string)
          "SELECT value FROM public_keys WHERE id = ?" )
       id
 
@@ -68,7 +69,7 @@ module Public_key = struct
     | None ->
         let public_key = Public_key.Compressed.to_base58_check t in
         Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
+          (Caqti_request.Infix.(Caqti_type.string ->! Caqti_type.int)
              "INSERT INTO public_keys (value) VALUES (?) RETURNING id" )
           public_key
 end
@@ -107,7 +108,7 @@ module Token = struct
 
   let find_by_id (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
@@ -117,15 +118,15 @@ module Token = struct
          (Mina_caqti.select_cols ~table_name ~select:"id" ~cols:[ "value" ] ()) )
       (Token_id.to_string token_id)
 
-  let find (module Conn : CONNECTION) = make_finder Conn.find Caqti_request.find
+  let find (module Conn : CONNECTION) = make_finder Conn.find find_req
 
   let find_opt (module Conn : CONNECTION) =
-    make_finder Conn.find_opt Caqti_request.find_opt
+    make_finder Conn.find_opt find_opt_req
 
   let find_no_owner_opt (module Conn : CONNECTION) token_id =
     let value = Token_id.to_string token_id in
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+      (find_opt_req Caqti_type.string Caqti_type.int
          {sql| SELECT id
                FROM tokens
                WHERE value = $1
@@ -137,8 +138,8 @@ module Token = struct
   let set_owner (module Conn : CONNECTION) ~id ~owner_public_key_id
       ~owner_token_id =
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          Caqti_type.int
          {sql| UPDATE tokens
                SET owner_public_key_id = $2, owner_token_id = $3
@@ -202,7 +203,7 @@ module Voting_for = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -223,7 +224,7 @@ module Token_symbols = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -269,8 +270,8 @@ module Account_identifiers = struct
             return None
         | Some tok_id ->
             Conn.find_opt
-              (Caqti_request.find_opt
-                 Caqti_type.(tup2 int int)
+              (find_opt_req
+                 Caqti_type.(t2 int int)
                  Caqti_type.int
                  (Mina_caqti.select_cols ~select:"id" ~table_name
                     ~cols:Fields.names () ) )
@@ -283,15 +284,15 @@ module Account_identifiers = struct
     let token = Account_id.token_id account_id in
     let%bind token_id = Token.find (module Conn) token in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup2 int int)
+      (find_req
+         Caqti_type.(t2 int int)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
       (public_key_id, token_id)
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -309,7 +310,7 @@ module Zkapp_field = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "field" ]) )
       id
 end
@@ -334,7 +335,7 @@ module Zkapp_field_array = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
+      (find_req Caqti_type.int Mina_caqti.array_int_typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
       id
 end
@@ -406,7 +407,7 @@ module Zkapp_states_nullable = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -467,7 +468,7 @@ module Zkapp_states = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -509,7 +510,7 @@ module Zkapp_action_states = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -531,7 +532,7 @@ module Zkapp_verification_key_hashes = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -566,7 +567,7 @@ module Zkapp_verification_keys = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -596,22 +597,22 @@ module Protocol_versions = struct
 
   let find (module Conn : CONNECTION) ~transaction ~network ~patch =
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
       (transaction, network, patch)
 
   let find_txn_version (module Conn : CONNECTION) ~transaction =
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int Caqti_type.int
+      (collect_req Caqti_type.int Caqti_type.int
          {sql| SELECT id FROM protocol_versions WHERE transaction = ?
         |sql} )
       transaction
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -710,7 +711,7 @@ module Zkapp_permissions = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -763,7 +764,7 @@ module Zkapp_timing_info = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -784,7 +785,7 @@ module Zkapp_uri = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -877,7 +878,7 @@ module Zkapp_updates = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -905,7 +906,7 @@ module Zkapp_balance_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -934,7 +935,7 @@ module Zkapp_nonce_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1018,7 +1019,7 @@ module Zkapp_account_precondition = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1046,7 +1047,7 @@ module Zkapp_token_id_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1078,7 +1079,7 @@ module Zkapp_timestamp_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1106,7 +1107,7 @@ module Zkapp_length_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1134,7 +1135,7 @@ module Zkapp_amount_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1169,7 +1170,7 @@ module Zkapp_global_slot_bounds = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1198,7 +1199,7 @@ module Timing_info = struct
       Account_identifiers.find (module Conn) account_id
     in
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          {sql| SELECT account_identifier_id, initial_minimum_balance,
                       cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -1210,7 +1211,7 @@ module Timing_info = struct
   let find_by_account_identifier_id_opt (module Conn : CONNECTION)
       account_identifier_id =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.int typ
+      (find_opt_req Caqti_type.int typ
          {sql| SELECT account_identifier_id, initial_minimum_balance,
                       cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -1253,7 +1254,7 @@ module Timing_info = struct
     in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt typ Caqti_type.int
+        (find_opt_req typ Caqti_type.int
            {sql| SELECT id FROM timing_info
                  WHERE account_identifier_id = ?
                  AND initial_minimum_balance = ?
@@ -1267,7 +1268,7 @@ module Timing_info = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO timing_info
                     (account_identifier_id,initial_minimum_balance,
                      cliff_time, cliff_amount, vesting_period, vesting_increment)
@@ -1278,13 +1279,13 @@ module Timing_info = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
   let load_opt (module Conn : CONNECTION) id =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.int typ
+      (find_opt_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1293,13 +1294,13 @@ module Snarked_ledger_hash = struct
   let find (module Conn : CONNECTION) (t : Frozen_ledger_hash.t) =
     let hash = Frozen_ledger_hash.to_base58_check t in
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (find_req Caqti_type.string Caqti_type.int
          "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
       hash
 
   let find_by_id (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
       id
 
@@ -1309,7 +1310,7 @@ module Snarked_ledger_hash = struct
     let hash = Frozen_ledger_hash.to_base58_check t in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (find_opt_req Caqti_type.string Caqti_type.int
            "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
         hash
     with
@@ -1317,13 +1318,13 @@ module Snarked_ledger_hash = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
+          (find_req Caqti_type.string Caqti_type.int
              "INSERT INTO snarked_ledger_hashes (value) VALUES (?) RETURNING id" )
           hash
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
       id
 end
@@ -1359,7 +1360,7 @@ module Zkapp_epoch_ledger = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1419,7 +1420,7 @@ module Zkapp_epoch_data = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1494,7 +1495,7 @@ module Zkapp_network_precondition = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1586,7 +1587,7 @@ module Zkapp_events = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
+      (find_req Caqti_type.int Mina_caqti.array_int_typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
       id
 end
@@ -1738,7 +1739,7 @@ module Zkapp_account_update_body = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1769,7 +1770,7 @@ module Zkapp_account_update = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1813,7 +1814,7 @@ module Zkapp_fee_payer_body = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1870,7 +1871,7 @@ module Epoch_data = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1911,13 +1912,13 @@ module User_command = struct
     let find (module Conn : CONNECTION) ~(transaction_hash : Transaction_hash.t)
         ~v1_transaction_hash =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (find_opt_req Caqti_type.string Caqti_type.int
            (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()) )
         (txn_hash_to_base58_check transaction_hash ~v1_transaction_hash)
 
     let load (module Conn : CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (find_req Caqti_type.int typ
            (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
         id
 
@@ -1961,7 +1962,7 @@ module User_command = struct
           in
           (* TODO: Converting these uint64s to int64 can overflow; see #5419 *)
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "command_type" -> Some "user_command_type" | _ -> None )
@@ -2008,7 +2009,7 @@ module User_command = struct
             Public_key.add_if_doesn't_exist (module Conn) user_cmd.receiver
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "command_type" -> Some "user_command_type" | _ -> None )
@@ -2049,14 +2050,14 @@ module User_command = struct
     let find_opt (module Conn : CONNECTION)
         ~(transaction_hash : Transaction_hash.t) =
       Conn.find_opt
-        ( Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        ( find_opt_req Caqti_type.string Caqti_type.int
         @@ Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()
         )
         (Transaction_hash.to_base58_check transaction_hash)
 
     let load (module Conn : CONNECTION) id =
       Conn.find
-        ( Caqti_request.find Caqti_type.int typ
+        ( find_req Caqti_type.int typ
         @@ Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names )
         id
 
@@ -2132,8 +2133,8 @@ module Internal_command = struct
   let find_opt (module Conn : CONNECTION) ~(v1_transaction_hash : bool)
       ~(transaction_hash : Transaction_hash.t) ~(command_type : string) =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 string string)
+      (find_opt_req
+         Caqti_type.(t2 string string)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name
             ~tannot:(function
@@ -2144,7 +2145,7 @@ module Internal_command = struct
 
   let load (module Conn : CONNECTION) ~(id : int) =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
@@ -2165,7 +2166,7 @@ module Internal_command = struct
           Public_key.add_if_doesn't_exist (module Conn) internal_cmd.receiver
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                 ~tannot:(function
                   | "command_type" -> Some "internal_command_type" | _ -> None
@@ -2210,7 +2211,7 @@ module Fee_transfer = struct
       in
       Ok { kind; receiver_id; fee; hash }
     in
-    let rep = Caqti_type.(tup4 string int int64 string) in
+    let rep = Caqti_type.(t4 string int int64 string) in
     Caqti_type.custom ~encode ~decode rep
 
   let add_if_doesn't_exist (module Conn : CONNECTION)
@@ -2232,7 +2233,7 @@ module Fee_transfer = struct
           Public_key.add_if_doesn't_exist (module Conn) pk
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (command_type, receiver_id, fee, hash)
                    VALUES (?::internal_command_type, ?, ?, ?)
@@ -2260,7 +2261,7 @@ module Coinbase = struct
     let decode (_, receiver_id, amount, hash) =
       Ok { receiver_id; amount; hash }
     in
-    let rep = Caqti_type.(tup4 string int int64 string) in
+    let rep = Caqti_type.(t4 string int int64 string) in
     Caqti_type.custom ~encode ~decode rep
 
   let add_if_doesn't_exist (module Conn : CONNECTION)
@@ -2281,7 +2282,7 @@ module Coinbase = struct
           Public_key.add_if_doesn't_exist (module Conn) pk
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (command_type, receiver_id, fee, hash)
                    VALUES (?::internal_command_type, ?, ?, ?)
@@ -2320,7 +2321,7 @@ module Block_and_internal_command = struct
       Option.map ~f:Transaction_status.Failure.to_string failure_reason
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (exec_req typ
          {sql| INSERT INTO blocks_internal_commands
                  (block_id,
                  internal_command_id,
@@ -2341,8 +2342,8 @@ module Block_and_internal_command = struct
   let find (module Conn : CONNECTION) ~block_id ~internal_command_id
       ~sequence_no ~secondary_sequence_no =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup4 int int int int)
+      (find_opt_req
+         Caqti_type.(t4 int int int int)
          Caqti_type.string
          {sql| SELECT 'exists' FROM blocks_internal_commands
                WHERE block_id = $1
@@ -2373,8 +2374,8 @@ module Block_and_internal_command = struct
       ~sequence_no ~secondary_sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup4 int int int int)
+      (find_req
+         Caqti_type.(t4 int int int int)
          typ
          (sprintf
             {sql| SELECT %s FROM blocks_internal_commands
@@ -2409,7 +2410,7 @@ module Block_and_signed_command = struct
       Option.map ~f:Transaction_status.Failure.to_string failure_reason
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (exec_req typ
          {sql| INSERT INTO blocks_user_commands
                  (block_id,
                  user_command_id,
@@ -2439,8 +2440,8 @@ module Block_and_signed_command = struct
     let open Deferred.Result.Let_syntax in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup3 int int int)
+        (find_opt_req
+           Caqti_type.(t3 int int int)
            Caqti_type.string
            {sql| SELECT 'exists' FROM blocks_user_commands
                  WHERE block_id = $1
@@ -2459,8 +2460,8 @@ module Block_and_signed_command = struct
   let load (module Conn : CONNECTION) ~block_id ~user_command_id ~sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          typ
          (sprintf
             {sql| SELECT %s FROM blocks_user_commands
@@ -2494,7 +2495,7 @@ module Zkapp_account_update_failures = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name
             ~cols:[ "index"; "failures" ] ) )
       id
@@ -2537,8 +2538,7 @@ module Block_and_zkapp_command = struct
     in
     Mina_caqti.select_insert_into_cols
       ~select:
-        ( "block_id, zkapp_command_id, sequence_no"
-        , Caqti_type.(tup3 int int int) )
+        ("block_id, zkapp_command_id, sequence_no", Caqti_type.(t3 int int int))
       ~table_name
       ~cols:
         ( [ "block_id"
@@ -2561,8 +2561,8 @@ module Block_and_zkapp_command = struct
   let load (module Conn : CONNECTION) ~block_id ~zkapp_command_id ~sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          typ
          (Mina_caqti.select_cols ~table_name ~select:comma_cols
             ~cols:[ "block_id"; "zkapp_command_id"; "sequence_no" ]
@@ -2572,7 +2572,7 @@ module Block_and_zkapp_command = struct
   let all_from_block (module Conn : CONNECTION) ~block_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          (Mina_caqti.select_cols ~table_name ~select:comma_cols
             ~cols:[ "block_id" ] () ) )
       block_id
@@ -2644,7 +2644,7 @@ module Zkapp_account = struct
 
   let load (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -2688,8 +2688,8 @@ module Accounts_accessed = struct
   let find_opt (module Conn : CONNECTION) ~block_id ~account_identifier_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 int int)
+      (find_opt_req
+         Caqti_type.(t2 int int)
          typ
          (sprintf
             {sql| SELECT %s
@@ -2760,7 +2760,7 @@ module Accounts_accessed = struct
           }
         in
         Mina_caqti.select_insert_into_cols
-          ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
+          ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
           ~table_name ~cols:(Fields.names, typ)
           (module Conn)
           account_accessed
@@ -2776,7 +2776,7 @@ module Accounts_accessed = struct
   let all_from_block (module Conn : CONNECTION) block_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          (Mina_caqti.select_cols ~select:comma_cols ~table_name
             ~cols:[ "block_id" ] () ) )
       block_id
@@ -2801,7 +2801,7 @@ module Accounts_created = struct
     in
     let creation_fee = Currency.Fee.to_string creation_fee in
     Mina_caqti.select_insert_into_cols
-      ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
+      ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
       ~table_name ~cols:(Fields.names, typ)
       (module Conn)
       { block_id; account_identifier_id; creation_fee }
@@ -2816,7 +2816,7 @@ module Accounts_created = struct
 
   let all_from_block (module Conn : CONNECTION) block_id =
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          {sql| SELECT block_id, account_identifier_id, creation_fee
                FROM accounts_created
                WHERE block_id = ?
@@ -2882,14 +2882,14 @@ module Block = struct
          "SELECT id FROM blocks WHERE state_hash = ?" )
       (State_hash.to_base58_check state_hash)
 
-  let find (module Conn : CONNECTION) = make_finder Conn.find Caqti_request.find
+  let find (module Conn : CONNECTION) = make_finder Conn.find find_req
 
   let find_opt (module Conn : CONNECTION) =
-    make_finder Conn.find_opt Caqti_request.find_opt
+    make_finder Conn.find_opt find_opt_req
 
   let load (module Conn : CONNECTION) ~id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name:"blocks" ~cols:Fields.names) )
       id
 
@@ -2994,7 +2994,7 @@ module Block = struct
         let blockchain_state = Protocol_state.blockchain_state protocol_state in
         let%bind block_id =
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "chain_status" ->
@@ -3376,9 +3376,7 @@ module Block = struct
     in
 
     (* we don't need to specify all types here, just the ones that sql may infer incorrectly *)
-    let field_name : type a. a Caqti_type.Field.t -> string option =
-      let open Caqti_type in
-      function
+    let field_name : type a. a Caqti_type.Field.t -> string option = function
       | Bool ->
           Some "BOOL"
       | Int ->
@@ -3391,39 +3389,36 @@ module Block = struct
           Some "BIGINT"
       | Float ->
           Some "FLOAT"
+      | String ->
+          Some "TEXT"
       | Enum name ->
           Some name
-      | _ ->
-          None
+      | Octets | Pdate | Ptime | Ptime_span ->
+          failwith "unsupported field type"
     in
 
     let rec type_field_names : type a. a Caqti_type.t -> string option list =
+      let open Caqti_type in
       function
-      | Unit ->
-          []
       | Field f ->
           [ field_name f ]
       | Option t ->
           type_field_names t
-      | Tup2 (at, bt) ->
-          List.concat [ type_field_names at; type_field_names bt ]
-      | Tup3 (at, bt, ct) ->
-          List.concat
-            [ type_field_names at; type_field_names bt; type_field_names ct ]
-      | Tup4 (at, bt, ct, dt) ->
-          List.concat
-            [ type_field_names at
-            ; type_field_names bt
-            ; type_field_names ct
-            ; type_field_names dt
-            ]
-      | Custom custom ->
-          type_field_names custom.rep
-    in
-
-    let rec render_field : type a. a Caqti_type.Field.t -> a -> string =
+      | Product (_, prod) ->
+          let rec loop : type a i. _ -> (a, i) product -> _ =
+           fun acc -> function
+            | Proj_end ->
+                List.concat (List.rev acc)
+            | Proj (t, _, prod) ->
+                loop (type_field_names t :: acc) prod
+          in
+          loop [] prod
+      | Annot (_, t) ->
+          type_field_names t
+    in
+
+    let render_field : type a. a Caqti_type.Field.t -> a -> string =
      fun typ value ->
-      let open Caqti_type in
       match typ with
       | Bool ->
           Bool.to_string value
@@ -3451,45 +3446,30 @@ module Block = struct
           (* we are ignoring the enum annotation in this context because it's not always valid to apply *)
           (* NOTE: we assume enum values do not contain special characters (eg "'") *)
           "'" ^ value ^ "'"
-      | _ -> (
-          match Caqti_type.Field.coding Conn.driver_info typ with
-          | None ->
-              failwithf "unable to render caqti field: %s"
-                (Caqti_type.Field.to_string typ)
-                ()
-          | Some (Coding coding) ->
-              render_field coding.rep
-                (Result.ok_or_failwith @@ coding.encode value) )
     in
     let rec render_type : type a. a Caqti_type.t -> a -> string list =
-     fun typ value ->
-      match typ with
-      | Unit ->
-          []
-      | Field f ->
-          [ render_field f value ]
-      | Option t -> (
-          match value with
-          | None ->
-              List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
-          | Some x ->
-              render_type t x )
-      | Tup2 (at, bt) ->
-          let a, b = value in
-          List.concat [ render_type at a; render_type bt b ]
-      | Tup3 (at, bt, ct) ->
-          let a, b, c = value in
-          List.concat [ render_type at a; render_type bt b; render_type ct c ]
-      | Tup4 (at, bt, ct, dt) ->
-          let a, b, c, d = value in
-          List.concat
-            [ render_type at a
-            ; render_type bt b
-            ; render_type ct c
-            ; render_type dt d
-            ]
-      | Custom custom ->
-          render_type custom.rep (Result.ok_or_failwith @@ custom.encode value)
+      let open Caqti_type in
+      fun typ value ->
+        match typ with
+        | Field f ->
+            [ render_field f value ]
+        | Option t -> (
+            match value with
+            | None ->
+                List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
+            | Some x ->
+                render_type t x )
+        | Product (_, prod) ->
+            let rec loop : type i. _ -> (a, i) product -> _ =
+             fun acc -> function
+              | Proj_end ->
+                  List.concat (List.rev acc)
+              | Proj (t, prj, prod) ->
+                  loop (render_type t (prj value) :: acc) prod
+            in
+            loop [] prod
+        | Annot (_, t) ->
+            render_type t value
     in
     let render_row (type a) (typ : a Caqti_type.t) (value : a) : string =
       "(" ^ String.concat ~sep:"," (render_type typ value) ^ ")"
@@ -3540,8 +3520,8 @@ module Block = struct
         in
         let%map entries =
           Conn.collect_list
-            (Caqti_request.collect Caqti_type.unit
-               Caqti_type.(tup2 typ int)
+            (Mina_caqti.collect_req Caqti_type.unit
+               Caqti_type.(t2 typ int)
                query )
             ()
         in
@@ -3559,7 +3539,7 @@ module Block = struct
           String.concat ~sep:"," @@ List.map ~f:(render_row typ) values
         in
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit Caqti_type.int
+          (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
              (sprintf "INSERT INTO %s (%s) VALUES %s RETURNING id" table
                 fields_sql values_sql ) )
           () )
@@ -3911,7 +3891,7 @@ module Block = struct
       let ids_sql = String.concat ~sep:"," ids in
       let parent_ids_sql = String.concat ~sep:"," parent_ids in
       Conn.exec
-        (Caqti_request.exec Caqti_type.unit
+        (Mina_caqti.exec_req Caqti_type.unit
            (sprintf
               "UPDATE %s AS b SET parent_id = data.parent_id FROM (SELECT \
                unnest(array[%s]) as id, unnest(array[%s]) as parent_id) AS \
@@ -4121,7 +4101,7 @@ module Block = struct
                 Some id )
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "sub_window_densities" ->
@@ -4282,8 +4262,8 @@ module Block = struct
   let set_parent_id_if_null (module Conn : CONNECTION) ~parent_hash
       ~(parent_id : int) =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 int string)
+      (exec_req
+         Caqti_type.(t2 int string)
          {sql| UPDATE blocks SET parent_id = ?
                WHERE parent_hash = ?
                AND parent_id IS NULL
@@ -4299,8 +4279,8 @@ module Block = struct
     in
     let columns = concat Fields.names in
     Conn.collect_list
-      (Caqti_request.collect
-         Caqti_type.(tup2 int int)
+      (collect_req
+         Caqti_type.(t2 int int)
          typ
          (sprintf
             {sql| WITH RECURSIVE chain AS (
@@ -4326,37 +4306,37 @@ module Block = struct
 
   let get_highest_canonical_block_opt (module Conn : CONNECTION) =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.unit
-         Caqti_type.(tup2 int int64)
+      (find_opt_req Caqti_type.unit
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' ORDER BY \
           height DESC LIMIT 1" )
 
   let get_nearest_canonical_block_above (module Conn : CONNECTION) height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height > ? ORDER BY height ASC LIMIT 1" )
       height
 
   let get_nearest_canonical_block_below (module Conn : CONNECTION) height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height < ? ORDER BY height DESC LIMIT 1" )
       height
 
   let mark_as_canonical (module Conn : CONNECTION) ~state_hash =
     Conn.exec
-      (Caqti_request.exec Caqti_type.string
+      (exec_req Caqti_type.string
          "UPDATE blocks SET chain_status='canonical' WHERE state_hash = ?" )
       state_hash
 
   let mark_as_orphaned (module Conn : CONNECTION) ~state_hash ~height =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 string int64)
+      (exec_req
+         Caqti_type.(t2 string int64)
          {sql| UPDATE blocks SET chain_status='orphaned'
                WHERE height = $2
                AND state_hash <> $1
@@ -4445,7 +4425,7 @@ module Block = struct
       | None, Some num_blocks -> (
           match%map
             Conn.find_opt
-              (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+              (find_opt_req Caqti_type.unit Caqti_type.int
                  "SELECT MAX(height) FROM blocks" )
               ()
           with
@@ -4461,8 +4441,8 @@ module Block = struct
       let%bind () =
         (* Delete user commands from old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM user_commands\n\
               WHERE id IN\n\
               (SELECT user_command_id FROM blocks_user_commands\n\
@@ -4473,8 +4453,8 @@ module Block = struct
       let%bind () =
         (* Delete old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM blocks WHERE blocks.height < ? OR blocks.timestamp < \
               ?" )
           (height, timestamp)
@@ -4482,7 +4462,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned internal commands. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM internal_commands\n\
               WHERE id NOT IN\n\
               (SELECT internal_commands.id FROM internal_commands\n\
@@ -4493,7 +4473,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned snarked ledger hashes. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM snarked_ledger_hashes\n\
               WHERE id NOT IN\n\
               (SELECT snarked_ledger_hash_id FROM blocks)" )
@@ -4502,7 +4482,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned public keys. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM public_keys\n\
               WHERE id NOT IN (SELECT fee_payer_id FROM user_commands)\n\
               AND id NOT IN (SELECT source_id FROM user_commands)\n\
@@ -4927,7 +4907,13 @@ let setup_server ~metrics_server_port ~constraint_constants ~logger
           Strict_pipe.Writer.write extensional_block_writer extensional_block )
     ]
   in
-  match Caqti_async.connect_pool ~max_size:30 postgres_address with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:30 ()))
+      postgres_address
+  with
   | Error e ->
       [%log error]
         "Failed to create a Caqti pool for Postgresql, see error: $error"
diff --git a/src/app/berkeley_account_tables/berkeley_account_tables.ml b/src/app/berkeley_account_tables/berkeley_account_tables.ml
index 670f44c8e1..a32ef59e4d 100644
--- a/src/app/berkeley_account_tables/berkeley_account_tables.ml
+++ b/src/app/berkeley_account_tables/berkeley_account_tables.ml
@@ -641,7 +641,13 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
              msg )
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:30 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/berkeley_migration/berkeley_migration.ml b/src/app/berkeley_migration/berkeley_migration.ml
index 0669b3d4b2..4e9f30da21 100644
--- a/src/app/berkeley_migration/berkeley_migration.ml
+++ b/src/app/berkeley_migration/berkeley_migration.ml
@@ -69,8 +69,8 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
   let%bind block_user_cmds =
     query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit
-             (Caqti_type.tup2 Sql.Mainnet.User_command.typ
+          (Mina_caqti.collect_req Caqti_type.unit
+             (Caqti_type.t2 Sql.Mainnet.User_command.typ
                 Sql.Mainnet.Block_user_command.typ )
              (sprintf
                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
@@ -87,8 +87,8 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
   let%bind block_internal_cmds =
     query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit
-             (Caqti_type.tup2 Sql.Mainnet.Internal_command.typ
+          (Mina_caqti.collect_req Caqti_type.unit
+             (Caqti_type.t2 Sql.Mainnet.Internal_command.typ
                 Sql.Mainnet.Block_internal_command.typ )
              (sprintf
                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
@@ -119,8 +119,8 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
     else
       query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
           Conn.collect_list
-            (Caqti_request.collect Caqti_type.unit
-               Caqti_type.(tup2 int Sql.Mainnet.Public_key.typ)
+            (Mina_caqti.collect_req Caqti_type.unit
+               Caqti_type.(t2 int Sql.Mainnet.Public_key.typ)
                (sprintf "SELECT id, value FROM %s WHERE id IN (%s)"
                   Sql.Mainnet.Public_key.table_name
                   ( String.concat ~sep:","
@@ -339,11 +339,15 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
   let logger = Logger.create () in
   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
+  let pool_config =
+    Caqti_pool_config.(
+      merge_left (default_from_env ()) (create ~max_size:128 ()))
+  in
   let mainnet_pool =
-    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
+    Caqti_async.connect_pool ~pool_config mainnet_archive_uri
   in
   let migrated_pool =
-    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
+    Caqti_async.connect_pool ~pool_config migrated_archive_uri
   in
   match (mainnet_pool, migrated_pool) with
   | Error e, _ | _, Error e ->
@@ -411,7 +415,7 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
         let%bind garbage_block_ids =
           query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
               Conn.collect_list
-                (Caqti_request.collect Caqti_type.unit Caqti_type.int
+                (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
                    (sprintf
                       "DELETE FROM %s WHERE parent_id IS NULL AND height > 1 \
                        RETURNING id"
@@ -427,7 +431,7 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
           let%bind () =
             query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
                 Conn.exec
-                  (Caqti_request.exec Caqti_type.unit
+                  (Mina_caqti.exec_req Caqti_type.unit
                      (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
                         Archive_lib.Processor.Block_and_signed_command
                         .table_name garbage_block_ids_sql ) )
@@ -435,7 +439,7 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
           in
           query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
               Conn.exec
-                (Caqti_request.exec Caqti_type.unit
+                (Mina_caqti.exec_req Caqti_type.unit
                    (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
                       Archive_lib.Processor.Block_and_internal_command
                       .table_name garbage_block_ids_sql ) )
@@ -533,7 +537,6 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
                      | Error (`Encode_failed _ as err)
                      | Error (`Encode_rejected _ as err)
                      | Error (`Request_failed _ as err)
-                     | Error (`Request_rejected _ as err)
                      | Error (`Response_failed _ as err)
                      | Error (`Response_rejected _ as err) ->
                          failwithf
diff --git a/src/app/berkeley_migration/sql.ml b/src/app/berkeley_migration/sql.ml
index 297081b7b3..0bdddcfdaa 100644
--- a/src/app/berkeley_migration/sql.ml
+++ b/src/app/berkeley_migration/sql.ml
@@ -19,7 +19,7 @@ module Mainnet = struct
 
     let find_by_id (module Conn : CONNECTION) id =
       Conn.find
-        (Caqti_request.find Caqti_type.int Caqti_type.string
+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
            "SELECT value FROM public_keys WHERE id = ?" )
         id
   end
@@ -27,7 +27,7 @@ module Mainnet = struct
   module Snarked_ledger_hash = struct
     let find_by_id (module Conn : CONNECTION) id =
       Conn.find
-        (Caqti_request.find Caqti_type.int Caqti_type.string
+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
            "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
         id
   end
@@ -79,7 +79,7 @@ module Mainnet = struct
 
     let id_from_state_hash (module Conn : CONNECTION) state_hash =
       Conn.find
-        (Caqti_request.find Caqti_type.string Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.string Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE state_hash = ?
@@ -88,7 +88,7 @@ module Mainnet = struct
 
     let load (module Conn : CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                         next_epoch_data_id, ledger_hash, height, global_slot,
@@ -98,7 +98,7 @@ module Mainnet = struct
 
     let canonical_blocks (module Conn : CONNECTION) =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.unit Caqti_type.int
+        (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE chain_status = 'canonical'
@@ -106,7 +106,7 @@ module Mainnet = struct
 
     let full_canonical_blocks (module Conn : CONNECTION) =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.unit typ
+        (Mina_caqti.collect_req Caqti_type.unit typ
            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                         next_epoch_data_id, ledger_hash, height, global_slot,
@@ -118,21 +118,21 @@ module Mainnet = struct
 
     let mark_as_canonical (module Conn : CONNECTION) id =
       Conn.exec
-        (Caqti_request.exec Caqti_type.int
+        (Mina_caqti.exec_req Caqti_type.int
            "UPDATE blocks SET chain_status='canonical' WHERE id = ?" )
         id
 
     let get_highest_canonical_block (module Conn : CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            "SELECT id FROM blocks WHERE chain_status='canonical' ORDER BY \
             height DESC LIMIT 1" )
 
     let get_subchain (module Conn : CONNECTION) ~start_block_id ~end_block_id =
       (* derive query from type `t` *)
       Conn.collect_list
-        (Caqti_request.collect
-           Caqti_type.(tup2 int int)
+        (Mina_caqti.collect_req
+           Caqti_type.(t2 int int)
            Caqti_type.int
            {sql| WITH RECURSIVE chain AS (
                     SELECT id, parent_id, height
@@ -196,7 +196,7 @@ module Mainnet = struct
 
     let load_block (module Conn : CONNECTION) ~block_id =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.int typ
+        (Mina_caqti.collect_req Caqti_type.int typ
            {sql| SELECT block_id, user_command_id,
                sequence_no,
                status,failure_reason,
@@ -235,7 +235,7 @@ module Mainnet = struct
 
     let load_block (module Conn : CONNECTION) ~block_id =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.int typ
+        (Mina_caqti.collect_req Caqti_type.int typ
            {sql| SELECT block_id, internal_command_id,
                  sequence_no, secondary_sequence_no,
                  receiver_account_creation_fee_paid,
@@ -266,12 +266,12 @@ module Mainnet = struct
       let decode ((typ, receiver_id, fee, token), hash) =
         Ok { typ; receiver_id; fee; token; hash }
       in
-      let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
+      let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
       Caqti_type.custom ~encode ~decode rep
 
     let load (module Conn : CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,receiver_id,fee,token,hash
                  FROM internal_commands
                  WHERE id = ?
@@ -338,7 +338,7 @@ module Mainnet = struct
 
     let load (module Conn : CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,fee_payer_id,source_id,receiver_id,
                  fee_token,token,
                  nonce,amount,fee,valid_until,memo,hash
@@ -352,14 +352,14 @@ module Berkeley = struct
   module Block = struct
     let count (module Conn : CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            {sql| SELECT count (*)
                  FROM blocks
            |sql} )
 
     let greatest_block_height (module Conn : CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int64
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
            {sql| SELECT height
                  FROM blocks
                  WHERE chain_status <> 'orphaned'
@@ -369,7 +369,7 @@ module Berkeley = struct
 
     let genesis_block_id (module Conn : CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE height = 1
@@ -388,7 +388,7 @@ module Berkeley = struct
 
     let load (module Conn : CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT pk.value, t.value
                  FROM account_identifiers ai
                  INNER JOIN tokens t ON ai.token_id = t.id
@@ -400,7 +400,7 @@ module Berkeley = struct
   module Accounts_accessed = struct
     let greatest_ledger_index (module Conn : CONNECTION) =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.int Caqti_type.int
+        (Mina_caqti.find_opt_req Caqti_type.int Caqti_type.int
            {sql| SELECT ledger_index
                  FROM accounts_accessed
                  WHERE block_id = $1
diff --git a/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml b/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
index 26e337e0bc..29c2059c57 100644
--- a/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
+++ b/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
@@ -273,10 +273,18 @@ let pre_fork_validations ~mainnet_archive_uri ~migrated_archive_uri () =
   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
   let mainnet_pool =
-    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      mainnet_archive_uri
   in
   let migrated_pool =
-    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      migrated_archive_uri
   in
 
   match (mainnet_pool, migrated_pool) with
@@ -364,11 +372,15 @@ let post_fork_validations ~mainnet_archive_uri ~migrated_archive_uri
 
   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
+  let pool_config =
+    Caqti_pool_config.(
+      merge_left (default_from_env ()) (create ~max_size:128 ()))
+  in
   let mainnet_pool =
-    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
+    Caqti_async.connect_pool ~pool_config mainnet_archive_uri
   in
   let migrated_pool =
-    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
+    Caqti_async.connect_pool ~pool_config migrated_archive_uri
   in
 
   match (mainnet_pool, migrated_pool) with
diff --git a/src/app/berkeley_migration_verifier/sql.ml b/src/app/berkeley_migration_verifier/sql.ml
index 40b6b3f114..918d9377d1 100644
--- a/src/app/berkeley_migration_verifier/sql.ml
+++ b/src/app/berkeley_migration_verifier/sql.ml
@@ -79,7 +79,7 @@ end
 
 module Mainnet = struct
   let dump_accounts_created_query =
-    Caqti_request.collect Caqti_type.unit Accounts_created.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_created.typ
       {sql|
       ( SELECT height, value AS public_key, state_hash, receiver_account_creation_fee_paid AS creation_fee
         FROM blocks_user_commands
@@ -105,13 +105,13 @@ module Mainnet = struct
 
   let dump_state_and_ledger_hashes_query =
     (* Workaround for replacing output file as caqti has an issue with using ? in place of FILE argument*)
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       "  SELECT state_hash, ledger_hash FROM blocks\n\
       \            WHERE chain_status = 'canonical'\n\
       \          "
 
   let dump_block_hashes_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       (Printf.sprintf
          "\n\
          \      SELECT state_hash, ledger_hash FROM blocks\n\
@@ -123,7 +123,7 @@ module Mainnet = struct
     Conn.collect_list (dump_block_hashes_till_height_query ~height) ()
 
   let dump_block_hashes_query =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       "\n\
       \      SELECT state_hash, ledger_hash FROM blocks\n\
       \            WHERE chain_status = 'canonical'\n\
@@ -134,7 +134,7 @@ module Mainnet = struct
     Conn.collect_list dump_block_hashes_query ()
 
   let dump_user_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       (Printf.sprintf
          "WITH user_command_ids AS\n\
          \      ( SELECT height, sequence_no, user_command_id FROM \
@@ -156,7 +156,7 @@ module Mainnet = struct
     Conn.collect_list (dump_user_commands_till_height_query ~height) ()
 
   let dump_internal_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       (Printf.sprintf
          "WITH internal_command_ids AS \n\
          \        ( SELECT internal_command_id, height, sequence_no, \
@@ -178,7 +178,7 @@ module Mainnet = struct
     Conn.collect_list (dump_internal_commands_till_height_query ~height) ()
 
   let dump_user_commands_query =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       "WITH user_command_ids AS\n\
       \      ( SELECT height, sequence_no, user_command_id FROM \
        blocks_user_commands\n\
@@ -198,7 +198,7 @@ module Mainnet = struct
     Conn.collect_list dump_user_commands_query ()
 
   let dump_internal_commands_query =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       (Printf.sprintf
          "WITH internal_command_ids AS \n\
          \        ( SELECT internal_command_id, height, sequence_no, \
@@ -219,7 +219,7 @@ module Mainnet = struct
     Conn.collect_list dump_internal_commands_query ()
 
   let mark_chain_till_fork_block_as_canonical_query =
-    Caqti_request.exec Caqti_type.string
+    Mina_caqti.exec_req Caqti_type.string
       {sql|
       UPDATE blocks
     Set chain_status = 'canonical'
@@ -248,7 +248,7 @@ end
 
 module Berkeley = struct
   let dump_accounts_created_query =
-    Caqti_request.collect Caqti_type.unit Accounts_created.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_created.typ
       {sql|
       SELECT height, value AS public_key, state_hash, creation_fee
       FROM accounts_created
@@ -261,7 +261,7 @@ module Berkeley = struct
     Conn.collect_list dump_accounts_created_query ()
 
   let height_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| 
             SELECT height from blocks order by height desc limit 1;
           |sql}
@@ -269,7 +269,7 @@ module Berkeley = struct
   let block_height (module Conn : CONNECTION) = Conn.find height_query ()
 
   let canonical_blocks_count_till_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql|
         WITH RECURSIVE chain AS 
         (  
@@ -287,7 +287,7 @@ module Berkeley = struct
     Conn.find canonical_blocks_count_till_height_query height
 
   let blocks_count_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql|
           SELECT count(*) FROM blocks ;
         |sql}
@@ -295,7 +295,7 @@ module Berkeley = struct
   let blocks_count (module Conn : CONNECTION) = Conn.find blocks_count_query ()
 
   let dump_user_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       (Printf.sprintf
          "WITH user_command_ids AS\n\
          \      ( SELECT height, sequence_no, user_command_id FROM \
@@ -317,7 +317,7 @@ module Berkeley = struct
     Conn.collect_list (dump_user_commands_till_height_query ~height) ()
 
   let dump_internal_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       (Printf.sprintf
          "WITH internal_command_ids AS \n\
          \        ( SELECT internal_command_id, height, sequence_no, \
@@ -339,7 +339,7 @@ module Berkeley = struct
     Conn.collect_list (dump_internal_commands_till_height_query ~height) ()
 
   let dump_user_commands_query =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       "WITH user_command_ids AS\n\
       \      ( SELECT height, sequence_no, user_command_id FROM \
        blocks_user_commands\n\
@@ -359,7 +359,7 @@ module Berkeley = struct
     Conn.collect_list dump_user_commands_query ()
 
   let dump_internal_commands_query =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       "WITH internal_command_ids AS \n\
       \        ( SELECT internal_command_id, height, sequence_no, \
        secondary_sequence_no FROM blocks_internal_commands \n\
@@ -379,7 +379,7 @@ module Berkeley = struct
     Conn.collect_list dump_internal_commands_query ()
 
   let dump_accounts_accessed_query =
-    Caqti_request.collect Caqti_type.unit Accounts_accessed.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_accessed.typ
       {sql| SELECT account_identifier_id AS id, block_id 
                  FROM accounts_accessed
                  JOIN blocks ON block_id = blocks.id
@@ -390,7 +390,7 @@ module Berkeley = struct
     Conn.collect_list dump_accounts_accessed_query ()
 
   let dump_block_hashes_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       (Printf.sprintf
          "SELECT state_hash, ledger_hash FROM blocks \n\
          \    WHERE chain_status = 'canonical'\n\
@@ -402,7 +402,7 @@ module Berkeley = struct
     Conn.collect_list (dump_block_hashes_till_height_query ~height) ()
 
   let dump_block_hashes_query =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       "\n\
       \      SELECT state_hash, ledger_hash FROM blocks\n\
       \      WHERE chain_status = 'canonical'\n\
@@ -413,7 +413,7 @@ module Berkeley = struct
     Conn.collect_list dump_block_hashes_query ()
 
   let dump_user_and_internal_command_info_query =
-    Caqti_request.collect Caqti_type.unit Accounts_accessed.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_accessed.typ
       {sql| 
       ( 
         WITH user_command_ids AS
@@ -443,14 +443,14 @@ module Berkeley = struct
     Conn.collect_list dump_user_and_internal_command_info_query ()
 
   let get_account_accessed_count_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT count(*) FROM accounts_accessed; |sql}
 
   let count_account_accessed (module Conn : CONNECTION) =
     Conn.find get_account_accessed_count_query ()
 
   let get_account_id_accessed_in_commands_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| 
         select count(distinct ids.account_identifier_id) FROM 
 
diff --git a/src/app/best_tip_merger/best_tip_merger.ml b/src/app/best_tip_merger/best_tip_merger.ml
index 5682f29ec5..90f418c153 100644
--- a/src/app/best_tip_merger/best_tip_merger.ml
+++ b/src/app/best_tip_merger/best_tip_merger.ml
@@ -205,7 +205,7 @@ module Compact_display = struct
         { current : State_hash.t
         ; parent : State_hash.t
         ; blockchain_length : Mina_numbers.Length.t
-        ; global_slot : Mina_numbers.Global_slot_since_genesis.t
+        ; global_slot : Mina_numbers.Global_slot_since_hard_fork.t
         }
   [@@deriving yojson]
 
@@ -243,7 +243,7 @@ module Graph_node = struct
     | Node of
         { current : State_hash.t
         ; length : Mina_numbers.Length.t
-        ; slot : Mina_numbers.Global_slot_since_genesis.t
+        ; slot : Mina_numbers.Global_slot_since_hard_fork.t
         }
   [@@deriving yojson, equal, hash]
 
@@ -267,7 +267,7 @@ module Graph_node = struct
           ("NA", "NA")
       | Node s ->
           ( Mina_numbers.Length.to_string s.length
-          , Mina_numbers.Global_slot_since_genesis.to_string s.slot )
+          , Mina_numbers.Global_slot_since_hard_fork.to_string s.slot )
     in
     { state; slot; length; peers = t.peers }
 
diff --git a/src/app/delegation_compliance/delegation_compliance.ml b/src/app/delegation_compliance/delegation_compliance.ml
index 8a0e92a6c5..0216fbd1e3 100644
--- a/src/app/delegation_compliance/delegation_compliance.ml
+++ b/src/app/delegation_compliance/delegation_compliance.ml
@@ -343,7 +343,13 @@ let main ~input_file ~csv_file ~preliminary_csv_file_opt ~archive_uri
         csv_datas
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/delegation_compliance/sql.ml b/src/app/delegation_compliance/sql.ml
index 3d214eb9c9..ea264fdeb6 100644
--- a/src/app/delegation_compliance/sql.ml
+++ b/src/app/delegation_compliance/sql.ml
@@ -16,7 +16,7 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect Caqti_type.string typ
+    Mina_caqti.collect_req Caqti_type.string typ
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id,global_slot,state_hash,ledger_hash FROM blocks b WHERE b.state_hash = ?
@@ -122,7 +122,7 @@ module User_command = struct
     Caqti_type.custom ~encode ~decode (to_rep spec)
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id,receiver_id,fee,fee_token,token,amount,valid_until,memo,nonce,
                    blocks.id,blocks.global_slot,parent.global_slot_since_genesis,
                    sequence_no,status,created_token,
@@ -148,8 +148,8 @@ module User_command = struct
     Conn.collect_list query user_cmd_id
 
   let query_payments_by_source_and_receiver =
-    Caqti_request.collect
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int int)
       typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
@@ -182,7 +182,7 @@ module User_command = struct
       (source_id, receiver_id)
 
   let query_payments_by_receiver =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
                parent.global_slot_since_genesis, sequence_no, status, created_token,
@@ -214,7 +214,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
@@ -223,7 +223,7 @@ module Public_key = struct
     Conn.find_opt query pk_id
 
   let query_for_id =
-    Caqti_request.find_opt Caqti_type.string Caqti_type.int
+    Mina_caqti.find_opt_req Caqti_type.string Caqti_type.int
       {sql| SELECT id FROM public_keys
             WHERE value = ?
       |sql}
@@ -234,7 +234,7 @@ end
 
 module Block = struct
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT MAX(global_slot) FROM blocks
       |sql}
 
@@ -242,7 +242,7 @@ module Block = struct
     Conn.find max_slot_query ()
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot = $1
       |sql}
 
@@ -250,8 +250,8 @@ module Block = struct
     Conn.collect_list state_hashes_by_slot_query slot
 
   let creator_slot_bounds_query =
-    Caqti_request.collect
-      Caqti_type.(tup3 int int64 int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t3 int int64 int64)
       Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE creator_id = $1
@@ -268,7 +268,7 @@ module Coinbase_receivers_for_block_creator = struct
      with given creator_id, where the receiver distinct from the creator_id
   *)
   let query =
-    Caqti_request.collect Caqti_type.int Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.int
       {sql| SELECT DISTINCT ic.receiver_id
 
             FROM blocks b
diff --git a/src/app/extract_blocks/extract_blocks.ml b/src/app/extract_blocks/extract_blocks.ml
index 3605538ae4..1bf72965c9 100644
--- a/src/app/extract_blocks/extract_blocks.ml
+++ b/src/app/extract_blocks/extract_blocks.ml
@@ -479,7 +479,13 @@ let main ~archive_uri ~start_state_hash_opt ~end_state_hash_opt ~all_blocks () =
   (* sanity-check input state hashes *)
   check_state_hash ~logger start_state_hash_opt ;
   check_state_hash ~logger end_state_hash_opt ;
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/extract_blocks/sql.ml b/src/app/extract_blocks/sql.ml
index 2c4b659973..0f614da7c7 100644
--- a/src/app/extract_blocks/sql.ml
+++ b/src/app/extract_blocks/sql.ml
@@ -31,12 +31,12 @@ module Subchain = struct
       fields b_fields join_condition fields
 
   let query_unparented =
-    Caqti_request.collect Caqti_type.string Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.string Archive_lib.Processor.Block.typ
       (make_sql ~join_condition:"b.id = chain.parent_id")
 
   let query_from_start =
-    Caqti_request.collect
-      Caqti_type.(tup2 string string)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string string)
       Archive_lib.Processor.Block.typ
       (make_sql
          ~join_condition:
@@ -56,7 +56,7 @@ module Subchain = struct
     let comma_fields =
       String.concat Archive_lib.Processor.Block.Fields.names ~sep:","
     in
-    Caqti_request.collect Caqti_type.unit Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.unit Archive_lib.Processor.Block.typ
       (sprintf "SELECT %s FROM blocks" comma_fields)
 
   let all_blocks (module Conn : Caqti_async.CONNECTION) =
@@ -67,8 +67,8 @@ end
 
 module Blocks_and_user_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT user_command_id, sequence_no
             FROM blocks_user_commands
             WHERE block_id = ?
@@ -91,7 +91,7 @@ module Block_user_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_user_commands buc
             INNER JOIN blocks
@@ -122,7 +122,7 @@ module Blocks_and_internal_commands = struct
       Caqti_type.[ int; int; int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT internal_command_id, sequence_no, secondary_sequence_no
             FROM (blocks_internal_commands
             INNER JOIN blocks
@@ -147,7 +147,7 @@ module Block_internal_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_internal_commands bic
             INNER JOIN blocks
@@ -167,8 +167,8 @@ end
 
 module Blocks_and_zkapp_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT zkapp_command_id, sequence_no
             FROM blocks_zkapp_commands
             WHERE block_id = ?
@@ -191,7 +191,7 @@ module Block_zkapp_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_zkapp_commands bzkc
             INNER JOIN blocks
diff --git a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
index 65b34d6b55..efe0668cc2 100644
--- a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
+++ b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
@@ -67,15 +67,11 @@ let amount_geq_min_balance ~amount ~initial_min_balance =
 let generate_delegate_account ~logger delegatee_pk =
   [%log info] "Generating account for delegatee $delegatee"
     ~metadata:[ ("delegatee", `String delegatee_pk) ] ;
-  let pk = Some delegatee_pk in
-  let balance = Currency.Balance.zero in
-  let timing = None in
-  let delegate = None in
   { Runtime_config.Json_layout.Accounts.Single.default with
-    pk
-  ; balance
-  ; timing
-  ; delegate
+    pk = delegatee_pk
+  ; balance = Currency.Balance.zero
+  ; timing = None
+  ; delegate = None
   }
 
 let generate_missing_delegate_accounts ~logger =
@@ -97,7 +93,6 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
     ~delegatee_pk =
   [%log info] "Processing record for $wallet_pk"
     ~metadata:[ ("wallet_pk", `String wallet_pk) ] ;
-  let pk = Some wallet_pk in
   let balance = Currency.Balance.of_mina_string_exn amount in
   let initial_minimum_balance =
     (* if omitted in the TSV, use balance *)
@@ -135,7 +130,9 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
           .initial_minimum_balance
         ; cliff_time
         ; cliff_amount
-        ; vesting_period
+        ; vesting_period =
+            Global_slot_since_genesis.(
+              diff vesting_period zero |> Option.value_exn)
         ; vesting_increment
         }
   in
@@ -144,7 +141,7 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
     if no_delegatee delegatee_pk then None else Some delegatee_pk
   in
   { Runtime_config.Json_layout.Accounts.Single.default with
-    pk
+    pk = wallet_pk
   ; balance
   ; timing
   ; delegate
diff --git a/src/app/ledger_export_bench/ledger_export_benchmark.ml b/src/app/ledger_export_bench/ledger_export_benchmark.ml
index cd5846345a..5125f8ba90 100644
--- a/src/app/ledger_export_bench/ledger_export_benchmark.ml
+++ b/src/app/ledger_export_bench/ledger_export_benchmark.ml
@@ -26,7 +26,7 @@ let () =
   let cfg = load_daemon_cfg runtime_config () in
   let accounts =
     match cfg.ledger with
-    | None | Some { base = Named _; _ } | Some { base = Hash _; _ } ->
+    | None | Some { base = Named _; _ } | Some { base = Hash; _ } ->
         []
     | Some { base = Accounts accs; _ } ->
         List.map ~f:Runtime_config.Accounts.Single.to_account accs
diff --git a/src/app/migrate-balances-table/dune b/src/app/migrate-balances-table/dune
index dbb463c78c..dbe6d09aad 100644
--- a/src/app/migrate-balances-table/dune
+++ b/src/app/migrate-balances-table/dune
@@ -18,6 +18,7 @@
    ;; local libraries
    logger
    bounded_types
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/migrate-balances-table/migrate_balances_table.ml b/src/app/migrate-balances-table/migrate_balances_table.ml
index 76d0549c2a..ea8f83f841 100644
--- a/src/app/migrate-balances-table/migrate_balances_table.ml
+++ b/src/app/migrate-balances-table/migrate_balances_table.ml
@@ -14,7 +14,13 @@ let query_db pool ~f ~item =
 let main ~archive_uri () =
   let logger = Logger.create () in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/migrate-balances-table/sql.ml b/src/app/migrate-balances-table/sql.ml
index 4c0a8c86dd..f0bc5f8c81 100644
--- a/src/app/migrate-balances-table/sql.ml
+++ b/src/app/migrate-balances-table/sql.ml
@@ -4,7 +4,7 @@ open Core_kernel
 
 let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        {sql| CREATE TABLE IF NOT EXISTS balances_temp
            ( id                           serial PRIMARY KEY
            , public_key_id                int    NOT NULL REFERENCES public_keys(id)
@@ -19,7 +19,7 @@ let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
 
 let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_temp AS (SELECT * FROM %s)
                 |sql}
@@ -27,7 +27,7 @@ let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
 
 let create_table_index (module Conn : Caqti_async.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
@@ -39,7 +39,7 @@ let create_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
 let create_table_named_index (module Conn : Caqti_async.CONNECTION) table col
     name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
@@ -51,7 +51,7 @@ let create_temp_table_named_index (module Conn : Caqti_async.CONNECTION) table
 
 let drop_table_index (module Conn : Caqti_async.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP INDEX IF EXISTS idx_%s_%s
           |sql} table col ) )
 
@@ -60,7 +60,7 @@ let drop_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
 
 let create_cursor (module Conn : Caqti_async.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_cursor
                       ( value int NOT NULL)
@@ -69,7 +69,7 @@ let create_cursor (module Conn : Caqti_async.CONNECTION) name =
 
 let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| INSERT INTO %s_cursor (value) VALUES (0)
                 |sql}
@@ -77,13 +77,13 @@ let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
 
 let current_cursor (module Conn : Caqti_async.CONNECTION) name =
   Conn.find_opt
-    (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+    (Mina_caqti.find_opt_req Caqti_type.unit Caqti_type.int
        (sprintf {sql| SELECT value FROM %s_cursor
                 |sql} name ) )
 
 let update_cursor (module Conn : Caqti_async.CONNECTION) name ndx =
   Conn.exec
-    (Caqti_request.exec Caqti_type.int
+    (Mina_caqti.exec_req Caqti_type.int
        (sprintf
           {sql| UPDATE %s_cursor SET value = $1
                 |sql}
@@ -99,7 +99,7 @@ let drop_foreign_key_constraint (module Conn : Caqti_async.CONNECTION) table
       |sql}
       table foreign_key
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
     table col foreign_key =
@@ -112,7 +112,7 @@ let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
     table col foreign_key =
@@ -125,14 +125,14 @@ let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let find_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find_opt
-    (Caqti_request.find_opt
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_opt_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| SELECT id
             FROM balances_temp
@@ -152,8 +152,8 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find
-    (Caqti_request.find
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| INSERT INTO balances_temp
             ( public_key_id
@@ -178,8 +178,8 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
 
 let get_internal_commands (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup4 int int64 (tup4 int int int int) int)
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t4 int int64 (t4 int int int int) int)
        {sql| SELECT bal.public_key_id,bal.balance,bic.block_id,blocks.height,bic.sequence_no,bic.secondary_sequence_no,
             internal_command_id
             FROM blocks_internal_commands bic
@@ -193,8 +193,8 @@ let update_internal_command_receiver_balance
     (module Conn : Caqti_async.CONNECTION) ~new_balance_id ~block_id
     ~internal_command_id ~block_sequence_no ~block_secondary_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup4 int int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t4 int int int int))
        {sql| UPDATE blocks_internal_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND internal_command_id = $3
@@ -209,8 +209,8 @@ let update_internal_command_receiver_balance
 
 let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_fee_payer.public_key_id,bal_fee_payer.balance
              FROM blocks_user_commands buc
@@ -222,8 +222,8 @@ let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
 
 let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_source.public_key_id,bal_source.balance
              FROM blocks_user_commands buc
@@ -236,8 +236,8 @@ let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
 
 let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_receiver.public_key_id,bal_receiver.balance
              FROM blocks_user_commands buc
@@ -251,8 +251,8 @@ let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
 let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET fee_payer_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -263,8 +263,8 @@ let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
 let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET source_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -276,8 +276,8 @@ let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
 let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -288,13 +288,13 @@ let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
 
 let drop_table (module Conn : Caqti_async.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP TABLE %s
                 |sql} table ) )
 
 let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| ALTER TABLE %s_temp
                 RENAME TO %s
@@ -303,7 +303,7 @@ let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
 
 let get_column_count (module Conn : Caqti_async.CONNECTION) table =
   Conn.find
-    (Caqti_request.find Caqti_type.string Caqti_type.int
+    (Mina_caqti.find_req Caqti_type.string Caqti_type.int
        {sql| SELECT COUNT(*) FROM information_schema.columns
              WHERE table_name=$1
        |sql} )
diff --git a/src/app/missing_blocks_auditor/dune b/src/app/missing_blocks_auditor/dune
index 623a5079ba..7ec1eae5af 100644
--- a/src/app/missing_blocks_auditor/dune
+++ b/src/app/missing_blocks_auditor/dune
@@ -18,6 +18,7 @@
    ;; local libraries
    logger
    bounded_types
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
index 5bce995ea2..d2b54f3615 100644
--- a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
+++ b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
@@ -22,7 +22,13 @@ let add_error, get_exit_code =
 let main ~archive_uri () =
   let logger = Logger.create () in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/missing_blocks_auditor/sql.ml b/src/app/missing_blocks_auditor/sql.ml
index 3e2bf01e93..d8a47b926d 100644
--- a/src/app/missing_blocks_auditor/sql.ml
+++ b/src/app/missing_blocks_auditor/sql.ml
@@ -4,8 +4,8 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.collect Caqti_type.unit
-      Caqti_type.(tup4 int string int string)
+    Mina_caqti.collect_req Caqti_type.unit
+      Caqti_type.(t4 int string int string)
       {sql|
            SELECT id, state_hash, height, parent_hash FROM blocks
            WHERE parent_id IS NULL
@@ -16,7 +16,7 @@ end
 
 module Missing_blocks_gap = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT $1 - MAX(height) - 1 FROM blocks
             WHERE height < $1
       |sql}
@@ -26,7 +26,7 @@ end
 
 module Chain_status = struct
   let query_highest_canonical =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT max(height) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
@@ -35,7 +35,7 @@ module Chain_status = struct
     Conn.find query_highest_canonical ()
 
   let query_count_pending_below =
-    Caqti_request.find Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT count(*) FROM blocks
             WHERE chain_status = 'pending'
             AND height <= ?
@@ -45,8 +45,8 @@ module Chain_status = struct
     Conn.find query_count_pending_below height
 
   let query_canonical_chain =
-    Caqti_request.collect Caqti_type.int64
-      Caqti_type.(tup3 int string string)
+    Mina_caqti.collect_req Caqti_type.int64
+      Caqti_type.(t3 int string string)
       {sql| WITH RECURSIVE chain AS (
 
                (SELECT id, state_hash, parent_id, chain_status
diff --git a/src/app/patch_archive_test/patch_archive_test.ml b/src/app/patch_archive_test/patch_archive_test.ml
index 1fbc9e3104..017b6574fc 100644
--- a/src/app/patch_archive_test/patch_archive_test.ml
+++ b/src/app/patch_archive_test/patch_archive_test.ml
@@ -124,7 +124,13 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
   let copy_uri = make_archive_copy_uri archive_uri in
   [%log info] "Connecting to original database" ;
   let%bind () =
-    match Caqti_async.connect_pool ~max_size:128 archive_uri with
+    match
+      Caqti_async.connect_pool
+        ~pool_config:
+          Caqti_pool_config.(
+            merge_left (default_from_env ()) (create ~max_size:128 ()))
+        archive_uri
+    with
     | Error e ->
         [%log fatal]
           ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -159,7 +165,13 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
         ()
   in
   [%log info] "Connecting to copied database" ;
-  match Caqti_async.connect_pool ~max_size:128 copy_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      copy_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/replayer/replayer.ml b/src/app/replayer/replayer.ml
index f9f22df42c..4498a21e9d 100644
--- a/src/app/replayer/replayer.ml
+++ b/src/app/replayer/replayer.ml
@@ -661,7 +661,13 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
              msg )
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/replayer/sql.ml b/src/app/replayer/sql.ml
index 40caaf5af1..54c32b7274 100644
--- a/src/app/replayer/sql.ml
+++ b/src/app/replayer/sql.ml
@@ -18,8 +18,8 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       typ
       {sql| WITH RECURSIVE chain AS (
               SELECT id,parent_id,global_slot_since_genesis,state_hash,ledger_hash, snarked_ledger_hash_id FROM blocks b                                                                                                                                                           WHERE b.state_hash = $1
@@ -71,7 +71,7 @@ let find_command_ids_query s =
 
 module Block = struct
   let state_hash_query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks
             WHERE id = ?
       |sql}
@@ -80,7 +80,7 @@ module Block = struct
     Conn.find state_hash_query id
 
   let parent_id_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT parent_id FROM blocks
             WHERE id = ?
       |sql}
@@ -89,7 +89,7 @@ module Block = struct
     Conn.find parent_id_query id
 
   let unparented_query =
-    Caqti_request.collect Caqti_type.unit Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE parent_id IS NULL
       |sql}
@@ -98,21 +98,21 @@ module Block = struct
     Conn.collect_list unparented_query ()
 
   let get_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int64
       {sql| SELECT height FROM blocks WHERE id = $1 |sql}
 
   let get_height (module Conn : Caqti_async.CONNECTION) ~block_id =
     Conn.find get_height_query block_id
 
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks |sql}
 
   let get_max_slot (module Conn : Caqti_async.CONNECTION) () =
     Conn.find max_slot_query ()
 
   let max_canonical_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
@@ -121,7 +121,7 @@ module Block = struct
     Conn.find max_canonical_slot_query ()
 
   let next_slot_query =
-    Caqti_request.find_opt Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_opt_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT global_slot_since_genesis FROM blocks
             WHERE global_slot_since_genesis >= $1
             AND chain_status <> 'orphaned'
@@ -133,7 +133,7 @@ module Block = struct
     Conn.find_opt next_slot_query slot
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int64 Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int64 Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot_since_genesis = $1 |sql}
 
   let get_state_hashes_by_slot (module Conn : Caqti_async.CONNECTION) slot =
@@ -141,7 +141,7 @@ module Block = struct
 
   (* find all blocks, working back from block with given state hash *)
   let chain_query =
-    Caqti_request.collect Caqti_type.string Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.string Caqti_type.string
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id FROM blocks b WHERE b.state_hash = ?
@@ -171,7 +171,7 @@ module Block = struct
       let pk, _ = Mina_state.Consensus_state_hooks.genesis_winner in
       Signature_lib.Public_key.Compressed.to_base58_check pk
     in
-    Caqti_request.find Caqti_type.int64 Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.string
       (sprintf
          {sql| SELECT snarked_ledger_hashes.value
                FROM blocks
@@ -192,8 +192,8 @@ end
 
 module User_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "user")
 
@@ -240,7 +240,7 @@ module User_command = struct
         ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT command_type,fee_payer_id, source_id,receiver_id,fee,amount,valid_until,memo,nonce,
                    blocks.id,blocks.height,blocks.global_slot_since_genesis,
                    sequence_no,status
@@ -265,8 +265,8 @@ end
 
 module Zkapp_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "zkapp")
 
@@ -292,7 +292,7 @@ module Zkapp_command = struct
         [ int; Mina_caqti.array_int_typ; string; int; int64; int; string ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT zkapp_fee_payer_body_id,zkapp_account_updates_ids,memo,
                    blocks.id,blocks.global_slot_since_genesis,
                    sequence_no,hash
@@ -317,8 +317,8 @@ end
 
 module Internal_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "internal")
 
@@ -347,8 +347,8 @@ module Internal_command = struct
      the call to Staged_ledger.apply in Block_producer
   *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 int64 int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int64 int)
       typ
       {sql| SELECT command_type,receiver_id,fee,
                    b.id,b.height,b.global_slot_since_genesis,
@@ -377,7 +377,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
@@ -388,7 +388,7 @@ end
 
 module Snarked_ledger_hashes = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM snarked_ledger_hashes
             WHERE id = ?
       |sql}
@@ -404,11 +404,11 @@ module Epoch_data = struct
     let decode (epoch_ledger_hash, epoch_data_seed) =
       Ok { epoch_ledger_hash; epoch_data_seed }
     in
-    let rep = Caqti_type.(tup2 string string) in
+    let rep = Caqti_type.(t2 string string) in
     Caqti_type.custom ~encode ~decode rep
 
   let query_epoch_data =
-    Caqti_request.find Caqti_type.int epoch_data_typ
+    Mina_caqti.find_req Caqti_type.int epoch_data_typ
       {sql| SELECT slh.value, ed.seed FROM snarked_ledger_hashes AS slh
 
        INNER JOIN
@@ -425,7 +425,7 @@ module Epoch_data = struct
     Conn.find query_epoch_data epoch_ledger_id
 
   let query_staking_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT staking_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
@@ -437,7 +437,7 @@ module Epoch_data = struct
     Conn.find query_staking_epoch_data_id state_hash
 
   let query_next_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT next_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
@@ -450,7 +450,7 @@ end
 module Parent_block = struct
   (* fork block is parent of block with the given state hash *)
   let query_parent_state_hash =
-    Caqti_request.find Caqti_type.string Caqti_type.string
+    Mina_caqti.find_req Caqti_type.string Caqti_type.string
       {sql| SELECT parent.state_hash FROM blocks AS parent
 
             INNER JOIN
diff --git a/src/app/rosetta/lib/account.ml b/src/app/rosetta/lib/account.ml
index acfd8bfcba..18b94265ed 100644
--- a/src/app/rosetta/lib/account.ml
+++ b/src/app/rosetta/lib/account.ml
@@ -36,9 +36,9 @@ module Sql = struct
           .transaction_capacity_log_2
 
     let query_pending =
-      Caqti_request.find_opt
-        Caqti_type.(tup3 string int64 string)
-        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t3 string int64 string)
+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
         {sql|
   WITH RECURSIVE pending_chain AS (
 
@@ -87,9 +87,9 @@ module Sql = struct
 |sql}
 
     let query_canonical =
-      Caqti_request.find_opt
-        Caqti_type.(tup3 string int64 string)
-        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t3 string int64 string)
+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
         {sql|
                 SELECT b.height,b.global_slot_since_genesis AS block_global_slot_since_genesis,balance,nonce,timing_id
 
diff --git a/src/app/rosetta/lib/block.ml b/src/app/rosetta/lib/block.ml
index 4c1a06ecaa..a83bde8cb0 100644
--- a/src/app/rosetta/lib/block.ml
+++ b/src/app/rosetta/lib/block.ml
@@ -390,10 +390,10 @@ module Sql = struct
 
       let winner (_, winner) = `Pk winner
 
-      let typ = Caqti_type.(tup2 string string)
+      let typ = Caqti_type.(t2 string string)
     end
 
-    let typ = Caqti_type.(tup3 int Archive_lib.Processor.Block.typ Extras.typ)
+    let typ = Caqti_type.(t3 int Archive_lib.Processor.Block.typ Extras.typ)
 
     let block_fields ?prefix () =
       let names = Archive_lib.Processor.Block.Fields.names in
@@ -404,7 +404,7 @@ module Sql = struct
       String.concat ~sep:"," fields
 
     let query_count_canonical_at_height =
-      Caqti_request.find Caqti_type.int64 Caqti_type.int64
+      Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
         {sql| SELECT COUNT(*) FROM blocks
               WHERE height = ?
               AND chain_status = 'canonical'
@@ -412,7 +412,7 @@ module Sql = struct
 
     let query_height_canonical =
       let c_fields = block_fields ~prefix:"c." () in
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_opt_req Caqti_type.int64 typ
         (* The archive database will only reconcile the canonical columns for
          * blocks older than k + epsilon
          *)
@@ -436,7 +436,7 @@ module Sql = struct
       let fields = block_fields () in
       let b_fields = block_fields ~prefix:"b." () in
       let c_fields = block_fields ~prefix:"c." () in
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_opt_req Caqti_type.int64 typ
         (* According to the clarification of the Rosetta spec here
          * https://community.rosetta-api.org/t/querying-block-by-just-its-index/84/3 ,
          * it is important to select only the block on the canonical chain for a
@@ -482,9 +482,9 @@ module Sql = struct
 
     let query_hash =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.string typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.string typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -500,8 +500,8 @@ module Sql = struct
 
     let query_both =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t2 string int64)
         typ
         (sprintf
            {|
@@ -521,9 +521,9 @@ module Sql = struct
 
     let query_by_id =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.int typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.int typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -539,9 +539,9 @@ module Sql = struct
 
     let query_best =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.unit typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.unit typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -578,7 +578,7 @@ module Sql = struct
           else
             let%bind max_height =
               Conn.find
-                (Caqti_request.find Caqti_type.unit Caqti_type.int64
+                (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
                    {sql| SELECT MAX(height) FROM blocks |sql} )
                 ()
             in
@@ -635,21 +635,16 @@ module Sql = struct
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.User_command.Signed_command.typ
+        t3 int Archive_lib.Processor.User_command.Signed_command.typ
           Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "u." ^ n)
-             Archive_lib.Processor.User_command.Signed_command.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup2 int string)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "u." ^ n)
+          Archive_lib.Processor.User_command.Signed_command.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
+      (sprintf
+        {|
          SELECT u.id,
                 %s,
                 pk_payer.value as fee_payer,
@@ -712,25 +707,20 @@ module Sql = struct
 
       let secondary_sequence_no (_, _, _, secondary_seq_no) = secondary_seq_no
 
-      let typ = Caqti_type.(tup4 (option int64) string int int)
+      let typ = Caqti_type.(t4 (option int64) string int int)
     end
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
+        t3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "i." ^ n)
-             Archive_lib.Processor.Internal_command.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup2 int string)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "i." ^ n)
+          Archive_lib.Processor.Internal_command.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
+      (sprintf
+        {|
          SELECT DISTINCT ON (i.hash,i.command_type,bic.sequence_no,bic.secondary_sequence_no)
            i.id,
            %s,
@@ -813,10 +803,10 @@ module Sql = struct
             ]
     end
 
-    let typ = Caqti_type.(tup2 int Extras.typ)
+    let typ = Caqti_type.(t2 int Extras.typ)
 
     let query =
-      Caqti_request.collect Caqti_type.int typ
+      Mina_caqti.collect_req Caqti_type.int typ
         {| 
          SELECT zc.id,
                 zc.memo,
@@ -857,20 +847,15 @@ module Sql = struct
 
     let typ =
       Caqti_type.(
-        tup2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
+        t2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "zaub." ^ n)
-             Archive_lib.Processor.Zkapp_account_update_body.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup3 int string int)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "zaub." ^ n)
+          Archive_lib.Processor.Zkapp_account_update_body.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t3 int string int) typ
+      (sprintf
+        {|
          SELECT %s,
                 pk.value as account,
                 bzc.status
diff --git a/src/app/rosetta/lib/construction.ml b/src/app/rosetta/lib/construction.ml
index 90297f8b17..af035097f8 100644
--- a/src/app/rosetta/lib/construction.ml
+++ b/src/app/rosetta/lib/construction.ml
@@ -866,7 +866,9 @@ module Submit = struct
         Caqti_type.custom ~encode ~decode (to_rep spec)
 
       let query =
-        Caqti_request.find_opt params_typ Caqti_type.string
+        Mina_caqti.find_opt_req
+          params_typ
+          Caqti_type.string
           {sql| SELECT uc.id FROM user_commands uc
                 INNER JOIN public_keys AS pks ON pks.id = uc.source_id
                 INNER JOIN public_keys AS pkr ON pkr.id = uc.receiver_id
diff --git a/src/app/rosetta/lib/network.ml b/src/app/rosetta/lib/network.ml
index 420d3569ac..01a963e7af 100644
--- a/src/app/rosetta/lib/network.ml
+++ b/src/app/rosetta/lib/network.ml
@@ -75,10 +75,9 @@ end
 
 module Sql = struct
   let oldest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup2 int64 string)
-      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, \
-       state_hash ASC LIMIT 1"
+    Mina_caqti.find_req Caqti_type.unit
+      Caqti_type.(t2 int64 string)
+      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, state_hash ASC LIMIT 1"
 
   let max_height_delta =
     match Sys.getenv "MINA_ROSETTA_MAX_HEIGHT_DELTA" with
@@ -88,10 +87,10 @@ module Sql = struct
         0L
 
   let latest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup3 int64 string int64)
-      (sprintf
-         {sql| SELECT height, state_hash, timestamp FROM blocks b
+    Mina_caqti.find_req
+      Caqti_type.unit
+      Caqti_type.(t3 int64 string int64)
+      (sprintf {sql| SELECT height, state_hash, timestamp FROM blocks b
                      WHERE height = (select MAX(height) - %Ld FROM blocks)
                      ORDER BY timestamp ASC, state_hash ASC
                      LIMIT 1
diff --git a/src/app/rosetta/lib/pg_data.ml b/src/app/rosetta/lib/pg_data.ml
index 15065b1fa3..699b661aa4 100644
--- a/src/app/rosetta/lib/pg_data.ml
+++ b/src/app/rosetta/lib/pg_data.ml
@@ -1,7 +1,7 @@
 (* pg_data.ml -- Postgres data *)
 
 let query_connection_count =
-  Caqti_request.find Caqti_type.unit Caqti_type.int64
+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
     {sql| SELECT count(*) FROM pg_stat_activity
               WHERE state = 'active'
         |sql}
@@ -10,7 +10,7 @@ let run_connection_count (module Conn : Caqti_async.CONNECTION) =
   Conn.find query_connection_count
 
 let query_lock_count =
-  Caqti_request.find Caqti_type.unit Caqti_type.int64
+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
     {sql| SELECT count(*) FROM pg_locks
               WHERE mode = 'SIReadLock'
         |sql}
diff --git a/src/app/rosetta/lib/rosetta.ml b/src/app/rosetta/lib/rosetta.ml
index c1e675b34a..965e68e2a7 100644
--- a/src/app/rosetta/lib/rosetta.ml
+++ b/src/app/rosetta/lib/rosetta.ml
@@ -187,7 +187,10 @@ let command =
               "MINA_ROSETTA_MAX_DB_POOL_SIZE not set or invalid. Please set \
                this to a number (try 64 or 128)"
         in
-        match Caqti_async.connect_pool ~max_size:max_pool_size archive_uri with
+        match Caqti_async.connect_pool       ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:max_pool_size ()))
+ archive_uri with
         | Error e ->
             [%log error]
               ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/swap_bad_balances/sql.ml b/src/app/swap_bad_balances/sql.ml
index 82ec136a10..d8d6172857 100644
--- a/src/app/swap_bad_balances/sql.ml
+++ b/src/app/swap_bad_balances/sql.ml
@@ -5,8 +5,8 @@ open Async
 module Receiver_balances = struct
   (* find receiver balances for combined fee transfer *)
   let query_ids_from_fee_transfer =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int)
       Caqti_type.(int)
       {sql| SELECT bic.receiver_balance
             FROM blocks_internal_commands bic
@@ -25,8 +25,8 @@ module Receiver_balances = struct
     (* if duplicates, any is acceptable *)
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup2 int int64)
+        (Mina_caqti.find_opt_req
+           Caqti_type.(t2 int int64)
            Caqti_type.int
            {sql| SELECT id
                           FROM balances
@@ -40,8 +40,8 @@ module Receiver_balances = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find
-             Caqti_type.(tup2 int int64)
+          (Mina_caqti.find_req
+             Caqti_type.(t2 int int64)
              Caqti_type.int
              "INSERT INTO balances (public_key_id,balance) VALUES ($1,$2) \
               RETURNING id" )
@@ -49,9 +49,9 @@ module Receiver_balances = struct
 
   let load (module Conn : Caqti_async.CONNECTION) id =
     Conn.find
-      (Caqti_request.find
+      (Mina_caqti.find_req
          Caqti_type.(int)
-         Caqti_type.(tup2 int int64)
+         Caqti_type.(t2 int int64)
          {sql| SELECT public_key_id,balance
             FROM balances
             WHERE id = $1
@@ -59,8 +59,8 @@ module Receiver_balances = struct
       id
 
   let query_swap_in_new_balance =
-    Caqti_request.exec
-      Caqti_type.(tup4 string int int int)
+    Mina_caqti.exec_req
+      Caqti_type.(t4 string int int int)
       {sql| UPDATE blocks_internal_commands bic SET receiver_balance = $4
             FROM blocks b
             WHERE b.id = bic.block_id
diff --git a/src/lib/mina_caqti/mina_caqti.ml b/src/lib/mina_caqti/mina_caqti.ml
index b1e49d9bcb..7dee307b08 100644
--- a/src/lib/mina_caqti/mina_caqti.ml
+++ b/src/lib/mina_caqti/mina_caqti.ml
@@ -5,15 +5,6 @@ open Core_kernel
 open Caqti_async
 open Mina_base
 
-type _ Caqti_type.field +=
-  | Array_nullable_int : int option array Caqti_type.field
-
-type _ Caqti_type.field +=
-  | Array_nullable_int64 : int64 option array Caqti_type.field
-
-type _ Caqti_type.field +=
-  | Array_nullable_string : string option array Caqti_type.field
-
 module Type_spec = struct
   type (_, _) t =
     | [] : (unit, unit) t
@@ -25,7 +16,7 @@ module Type_spec = struct
      | [] ->
          (Caqti_type.unit : tuple Caqti_type.t)
      | rep :: spec ->
-         Caqti_type.tup2 rep (to_rep spec)
+         Caqti_type.t2 rep (to_rep spec)
 
   let rec hlist_to_tuple :
             'hlist 'tuple.
@@ -93,59 +84,14 @@ let make_coding (type a) ~(elem_to_string : a -> string)
   in
   (encode, decode)
 
-(* register coding for nullable int arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
+(** this type may require type annotations in queries, eg.
+   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
+*)
+let array_nullable_int_typ =
   let encode, decode =
     make_coding ~elem_to_string:Int.to_string ~elem_of_string:Int.of_string
   in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_int ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_int { get_coding }
-
-(* register coding for nullable int64 arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
-  let encode, decode =
-    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
-  in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_int64 ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_int64 { get_coding }
-
-(* register coding for nullable string arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
-  let encode, decode =
-    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
-  in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_string ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_string { get_coding }
-
-(* this type may require type annotations in queries, eg.
-   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
-*)
-let array_nullable_int_typ : int option array Caqti_type.t =
-  Caqti_type.field Array_nullable_int
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_int_typ : int array Caqti_type.t =
   let open Result.Let_syntax in
@@ -158,11 +104,14 @@ let array_int_typ : int array Caqti_type.t =
   in
   Caqti_type.custom array_nullable_int_typ ~encode ~decode
 
-(* this type may require type annotations in queries, eg.
+(** this type may require type annotations in queries, eg.
    `SELECT id FROM zkapp_states WHERE element_ids = ?::bigint[]`
 *)
-let array_nullable_int64_typ : int64 option array Caqti_type.t =
-  Caqti_type.field Array_nullable_int64
+let array_nullable_int64_typ =
+  let encode, decode =
+    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
+  in
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_int64_typ : int64 array Caqti_type.t =
   let open Result.Let_syntax in
@@ -175,11 +124,14 @@ let array_int64_typ : int64 array Caqti_type.t =
   in
   Caqti_type.custom array_nullable_int64_typ ~encode ~decode
 
-(* this type may require type annotations in queries, e.g.
+(** this type may require type annotations in queries, e.g.
    `SELECT id FROM zkapp_states WHERE element_ids = ?::string[]`
 *)
-let array_nullable_string_typ : string option array Caqti_type.t =
-  Caqti_type.field Array_nullable_string
+let array_nullable_string_typ =
+  let encode, decode =
+    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
+  in
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_string_typ : string array Caqti_type.t =
   let open Result.Let_syntax in
@@ -283,7 +235,7 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
     (module Conn : CONNECTION) (value : 'cols) =
   let open Deferred.Result.Let_syntax in
   Conn.find_opt
-    ( Caqti_request.find_opt (snd cols) (snd select)
+    ( Caqti_request.Infix.(snd cols ->? snd select)
     @@ select_cols ~select:(fst select) ~table_name ?tannot ~cols:(fst cols) ()
     )
     value
@@ -292,7 +244,7 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
       return id
   | None ->
       Conn.find
-        ( Caqti_request.find (snd cols) (snd select)
+        ( Caqti_request.Infix.(snd cols ->! snd select)
         @@ insert_into_cols ~returning:(fst select) ~table_name ?tannot
              ~cols:(fst cols) () )
         value
@@ -314,7 +266,11 @@ let insert_multi_into_col ~(table_name : string)
       (sep_by_comma ~parenthesis:true values)
       (fst col)
   in
-  let%bind () = Conn.exec (Caqti_request.exec Caqti_type.unit insert) () in
+  let%bind () =
+    Conn.exec
+      (Caqti_request.Infix.(Caqti_type.unit ->. Caqti_type.unit) insert)
+      ()
+  in
   let search =
     sprintf
       {sql| SELECT %s, id FROM %s
@@ -322,9 +278,8 @@ let insert_multi_into_col ~(table_name : string)
       (fst col) table_name (fst col) (sep_by_comma values)
   in
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (snd col) int)
-       search )
+    Caqti_request.Infix.(
+      (Caqti_type.unit ->* Caqti_type.(t2 (snd col) int)) search)
     ()
 
 let query ~f pool =
@@ -361,3 +316,11 @@ let get_zkapp_or_ignore (item_opt : 'arg option)
 let get_opt_item (arg_opt : 'arg option)
     ~(f : 'arg -> ('res, _) Deferred.Result.t) : 'res option Deferred.t =
   make_get_opt ~of_option:Fn.id ~f arg_opt
+
+let find_req t u s = Caqti_request.Infix.(t ->! u) s
+
+let find_opt_req t u s = Caqti_request.Infix.(t ->? u) s
+
+let collect_req t u s = Caqti_request.Infix.(t ->* u) s
+
+let exec_req t s = Caqti_request.Infix.(t ->. Caqti_type.unit) s
