From 56b1cf5c25a0aec8bc2c409024a44f5e24e07f0e Mon Sep 17 00:00:00 2001
From: ember arlynx <ember.arlynx@o1labs.org>
Date: Mon, 12 Feb 2024 16:54:26 -0500
Subject: [PATCH] Caqti: upgrade to 2.0.1


diff --git a/buildkite/scripts/caqti-upgrade.patch b/buildkite/scripts/caqti-upgrade.patch
deleted file mode 100644
index 722be0749f..0000000000
--- a/buildkite/scripts/caqti-upgrade.patch
+++ /dev/null
@@ -1,3314 +0,0 @@
-diff --git a/flake.lock b/flake.lock
-index c1271a6825..dff4183b0e 100644
---- a/flake.lock
-+++ b/flake.lock
-@@ -324,11 +324,11 @@
-     "opam-repository": {
-       "flake": false,
-       "locked": {
--        "lastModified": 1708601497,
--        "narHash": "sha256-mDYINTjOiYLN4wT5fGlWTvHFQdWkzY46XUuZWKgmJxY=",
-+        "lastModified": 1706815373,
-+        "narHash": "sha256-CiwJOt27w7ecb27gMddbVO1ATwWz+KB9upiGZ3TRHqU=",
-         "owner": "ocaml",
-         "repo": "opam-repository",
--        "rev": "90d8c520a4f0b035ac51e267a8b33739c5a78b5a",
-+        "rev": "c2acc9437350903c72eab1fabf1e1b6f74134667",
-         "type": "github"
-       },
-       "original": {
-diff --git a/opam.export b/opam.export
-index 655b623d35..c994ad7370 100644
---- a/opam.export
-+++ b/opam.export
-@@ -8,7 +8,6 @@ roots: [
-   "bitstring.4.1.0"
-   "camlp4.4.14+1"
-   "capnp.3.4.0"
--  "check_opam_switch.~dev"
-   "cohttp-async.5.0.0"
-   "core_extended.v0.14.0"
-   "extlib.1.7.8"
-@@ -69,11 +68,10 @@ installed: [
-   "camlp4.4.14+1"
-   "camomile.1.0.2"
-   "capnp.3.4.0"
--  "caqti.1.5.0"
--  "caqti-async.1.3.0"
--  "caqti-driver-postgresql.1.5.1"
-+  "caqti.2.0.1"
-+  "caqti-async.2.0.1"
-+  "caqti-driver-postgresql.2.0.1"
-   "charInfo_width.1.1.0"
--  "check_opam_switch.~dev"
-   "cmdliner.1.0.3"
-   "cohttp.5.0.0"
-   "cohttp-async.5.0.0"
-@@ -138,6 +136,7 @@ installed: [
-   "lmdb.1.0"
-   "logs.0.7.0"
-   "lwt.5.4.0"
-+  "lwt-dllist.1.0.1"
-   "lwt_log.1.1.1"
-   "lwt_react.1.1.2"
-   "macaddr.5.0.1"
-@@ -155,6 +154,7 @@ installed: [
-   "mirage-crypto-rng.0.11.0"
-   "mirage-crypto-rng-async.0.11.0"
-   "mmap.1.1.0"
-+  "mtime.2.0.0"
-   "num.1.1"
-   "ocaml.4.14.0"
-   "ocaml-base-compiler.4.14.0"
-@@ -266,7 +266,6 @@ installed: [
- pinned: [
-   "async_kernel.v0.14.0"
-   "capnp.3.4.0"
--  "check_opam_switch.~dev"
-   "graphql_ppx.1.2.2"
-   "rpc_parallel.v0.14.0"
- ]
-@@ -350,42 +349,6 @@ Cap'n Proto is a multi-language code generation framework designed for
-       "sha256=03aac06742f3d4ec8a189f0db65d46393b7497e8637ece15c39ff4ec01117b8b"
-   }
- }
--package "check_opam_switch" {
--  opam-version: "2.0"
--  version: "~dev"
--  synopsis:
--    "A tool to check that the current opam environment is up to date with an opam.export file"
--  description:
--    "A tool to check that the current opam environment is up to date with an opam.export file"
--  maintainer: "yves.stan.lecornec@tweag.io"
--  depends: [
--    "dune" {>= "3.3"}
--    "opam-core" {>= "2.0.0"}
--    "opam-format" {>= "2.0.0"}
--    "minicli" {>= "5.0.0"}
--    "odoc" {with-doc}
--  ]
--  build: [
--    ["dune" "subst"] {dev}
--    [
--      "dune"
--      "build"
--      "-p"
--      name
--      "-j"
--      jobs
--      "@install"
--      "@runtest" {with-test}
--      "@doc" {with-doc}
--    ]
--  ]
--  url {
--    src:
--      "https://github.com/tweag/check_opam_switch/archive/d0aa49884e0f9fd4bbb2cd1a32b798a12f84b603.tar.gz"
--    checksum:
--      "sha256=24ab29ea4aff9da9d649f0b577c5d4e27ce2bef51058e139965cc9be25494a46"
--  }
--}
- package "graphql_ppx" {
-   opam-version: "2.0"
-   version: "1.2.2"
-diff --git a/scripts/pin-external-packages.sh b/scripts/pin-external-packages.sh
-index 84e615b527..f531d8e43d 100755
---- a/scripts/pin-external-packages.sh
-+++ b/scripts/pin-external-packages.sh
-@@ -10,3 +10,5 @@ for pkg in $PACKAGES; do
-     echo "Pinning package" $pkg
-     opam pin -y add src/external/$pkg
- done
-+
-+opam pin add -y https://github.com/tweag/check_opam_switch.git#d0aa49884e0f9fd4bbb2cd1a32b798a12
-\ No newline at end of file
-diff --git a/src/app/archive/lib/metrics.ml b/src/app/archive/lib/metrics.ml
-index c69e1805d1..aac3552028 100644
---- a/src/app/archive/lib/metrics.ml
-+++ b/src/app/archive/lib/metrics.ml
-@@ -14,7 +14,7 @@ let default_missing_blocks_width = 2000
- 
- module Max_block_height = struct
-   let query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
-       "SELECT GREATEST(0, MAX(height)) FROM blocks"
- 
-   let update (module Conn : Caqti_async.CONNECTION) metric_server =
-@@ -30,7 +30,7 @@ end
- module Missing_blocks = struct
-   (*A block is missing if there is no entry for a specific height. However, if there is an entry then it doesn't necessarily mean that it is part of the main chain. Unparented_blocks will show value > 1 in that case. Look for the last 2000 blocks*)
-   let query missing_blocks_width =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
-       (Core_kernel.sprintf
-          {sql| 
-         SELECT COUNT( * )
-@@ -55,7 +55,7 @@ module Unparented_blocks = struct
-   (* parent_hashes represent ends of chains leading to an orphan block *)
- 
-   let query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
-       {sql|
-            SELECT COUNT( * ) FROM blocks
-            WHERE parent_id IS NULL
-diff --git a/src/app/archive/lib/processor.ml b/src/app/archive/lib/processor.ml
-index 33063c8ad7..22769ced53 100644
---- a/src/app/archive/lib/processor.ml
-+++ b/src/app/archive/lib/processor.ml
-@@ -29,6 +29,7 @@ open Mina_block
- open Pipe_lib
- open Signature_lib
- open Pickles_types
-+open Mina_caqti
- 
- let applied_str = "applied"
- 
-@@ -42,20 +43,20 @@ module Public_key = struct
-   let find (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
-     let public_key = Public_key.Compressed.to_base58_check t in
-     Conn.find
--      (Caqti_request.find Caqti_type.string Caqti_type.int
-+      (Caqti_request.Infix.(Caqti_type.string ->! Caqti_type.int)
-          "SELECT id FROM public_keys WHERE value = ?" )
-       public_key
- 
-   let find_opt (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
-     let public_key = Public_key.Compressed.to_base58_check t in
-     Conn.find_opt
--      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
-+      (Caqti_request.Infix.(Caqti_type.string ->? Caqti_type.int)
-          "SELECT id FROM public_keys WHERE value = ?" )
-       public_key
- 
-   let find_by_id (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (Caqti_request.Infix.(Caqti_type.int ->! Caqti_type.string)
-          "SELECT value FROM public_keys WHERE id = ?" )
-       id
- 
-@@ -68,7 +69,7 @@ module Public_key = struct
-     | None ->
-         let public_key = Public_key.Compressed.to_base58_check t in
-         Conn.find
--          (Caqti_request.find Caqti_type.string Caqti_type.int
-+          (Caqti_request.Infix.(Caqti_type.string ->! Caqti_type.int)
-              "INSERT INTO public_keys (value) VALUES (?) RETURNING id" )
-           public_key
- end
-@@ -107,7 +108,7 @@ module Token = struct
- 
-   let find_by_id (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- 
-@@ -117,15 +118,15 @@ module Token = struct
-          (Mina_caqti.select_cols ~table_name ~select:"id" ~cols:[ "value" ] ()) )
-       (Token_id.to_string token_id)
- 
--  let find (module Conn : CONNECTION) = make_finder Conn.find Caqti_request.find
-+  let find (module Conn : CONNECTION) = make_finder Conn.find find_req
- 
-   let find_opt (module Conn : CONNECTION) =
--    make_finder Conn.find_opt Caqti_request.find_opt
-+    make_finder Conn.find_opt find_opt_req
- 
-   let find_no_owner_opt (module Conn : CONNECTION) token_id =
-     let value = Token_id.to_string token_id in
-     Conn.find_opt
--      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
-+      (find_opt_req Caqti_type.string Caqti_type.int
-          {sql| SELECT id
-                FROM tokens
-                WHERE value = $1
-@@ -137,8 +138,8 @@ module Token = struct
-   let set_owner (module Conn : CONNECTION) ~id ~owner_public_key_id
-       ~owner_token_id =
-     Conn.find
--      (Caqti_request.find
--         Caqti_type.(tup3 int int int)
-+      (find_req
-+         Caqti_type.(t3 int int int)
-          Caqti_type.int
-          {sql| UPDATE tokens
-                SET owner_public_key_id = $2, owner_token_id = $3
-@@ -202,7 +203,7 @@ module Voting_for = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
-       id
- end
-@@ -223,7 +224,7 @@ module Token_symbols = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
-       id
- end
-@@ -269,8 +270,8 @@ module Account_identifiers = struct
-             return None
-         | Some tok_id ->
-             Conn.find_opt
--              (Caqti_request.find_opt
--                 Caqti_type.(tup2 int int)
-+              (find_opt_req
-+                 Caqti_type.(t2 int int)
-                  Caqti_type.int
-                  (Mina_caqti.select_cols ~select:"id" ~table_name
-                     ~cols:Fields.names () ) )
-@@ -283,15 +284,15 @@ module Account_identifiers = struct
-     let token = Account_id.token_id account_id in
-     let%bind token_id = Token.find (module Conn) token in
-     Conn.find
--      (Caqti_request.find
--         Caqti_type.(tup2 int int)
-+      (find_req
-+         Caqti_type.(t2 int int)
-          Caqti_type.int
-          (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
-       (public_key_id, token_id)
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -309,7 +310,7 @@ module Zkapp_field = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "field" ]) )
-       id
- end
-@@ -334,7 +335,7 @@ module Zkapp_field_array = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
-+      (find_req Caqti_type.int Mina_caqti.array_int_typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
-       id
- end
-@@ -406,7 +407,7 @@ module Zkapp_states_nullable = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -467,7 +468,7 @@ module Zkapp_states = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -509,7 +510,7 @@ module Zkapp_action_states = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -531,7 +532,7 @@ module Zkapp_verification_key_hashes = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
-       id
- end
-@@ -566,7 +567,7 @@ module Zkapp_verification_keys = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -596,22 +597,22 @@ module Protocol_versions = struct
- 
-   let find (module Conn : CONNECTION) ~transaction ~network ~patch =
-     Conn.find
--      (Caqti_request.find
--         Caqti_type.(tup3 int int int)
-+      (find_req
-+         Caqti_type.(t3 int int int)
-          Caqti_type.int
-          (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
-       (transaction, network, patch)
- 
-   let find_txn_version (module Conn : CONNECTION) ~transaction =
-     Conn.collect_list
--      (Caqti_request.collect Caqti_type.int Caqti_type.int
-+      (collect_req Caqti_type.int Caqti_type.int
-          {sql| SELECT id FROM protocol_versions WHERE transaction = ?
-         |sql} )
-       transaction
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -728,7 +729,7 @@ module Zkapp_permissions = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -781,7 +782,7 @@ module Zkapp_timing_info = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -802,7 +803,7 @@ module Zkapp_uri = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
-       id
- end
-@@ -895,7 +896,7 @@ module Zkapp_updates = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -923,7 +924,7 @@ module Zkapp_balance_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -952,7 +953,7 @@ module Zkapp_nonce_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1036,7 +1037,7 @@ module Zkapp_account_precondition = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1064,7 +1065,7 @@ module Zkapp_token_id_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1096,7 +1097,7 @@ module Zkapp_timestamp_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1124,7 +1125,7 @@ module Zkapp_length_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1152,7 +1153,7 @@ module Zkapp_amount_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1187,7 +1188,7 @@ module Zkapp_global_slot_bounds = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1216,7 +1217,7 @@ module Timing_info = struct
-       Account_identifiers.find (module Conn) account_id
-     in
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          {sql| SELECT account_identifier_id, initial_minimum_balance,
-                       cliff_time, cliff_amount,
-                       vesting_period, vesting_increment
-@@ -1228,7 +1229,7 @@ module Timing_info = struct
-   let find_by_account_identifier_id_opt (module Conn : CONNECTION)
-       account_identifier_id =
-     Conn.find_opt
--      (Caqti_request.find_opt Caqti_type.int typ
-+      (find_opt_req Caqti_type.int typ
-          {sql| SELECT account_identifier_id, initial_minimum_balance,
-                       cliff_time, cliff_amount,
-                       vesting_period, vesting_increment
-@@ -1271,7 +1272,7 @@ module Timing_info = struct
-     in
-     match%bind
-       Conn.find_opt
--        (Caqti_request.find_opt typ Caqti_type.int
-+        (find_opt_req typ Caqti_type.int
-            {sql| SELECT id FROM timing_info
-                  WHERE account_identifier_id = ?
-                  AND initial_minimum_balance = ?
-@@ -1285,7 +1286,7 @@ module Timing_info = struct
-         return id
-     | None ->
-         Conn.find
--          (Caqti_request.find typ Caqti_type.int
-+          (find_req typ Caqti_type.int
-              {sql| INSERT INTO timing_info
-                     (account_identifier_id,initial_minimum_balance,
-                      cliff_time, cliff_amount, vesting_period, vesting_increment)
-@@ -1296,13 +1297,13 @@ module Timing_info = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- 
-   let load_opt (module Conn : CONNECTION) id =
-     Conn.find_opt
--      (Caqti_request.find_opt Caqti_type.int typ
-+      (find_opt_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1311,13 +1312,13 @@ module Snarked_ledger_hash = struct
-   let find (module Conn : CONNECTION) (t : Frozen_ledger_hash.t) =
-     let hash = Frozen_ledger_hash.to_base58_check t in
-     Conn.find
--      (Caqti_request.find Caqti_type.string Caqti_type.int
-+      (find_req Caqti_type.string Caqti_type.int
-          "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
-       hash
- 
-   let find_by_id (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
-       id
- 
-@@ -1327,7 +1328,7 @@ module Snarked_ledger_hash = struct
-     let hash = Frozen_ledger_hash.to_base58_check t in
-     match%bind
-       Conn.find_opt
--        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
-+        (find_opt_req Caqti_type.string Caqti_type.int
-            "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
-         hash
-     with
-@@ -1335,13 +1336,13 @@ module Snarked_ledger_hash = struct
-         return id
-     | None ->
-         Conn.find
--          (Caqti_request.find Caqti_type.string Caqti_type.int
-+          (find_req Caqti_type.string Caqti_type.int
-              "INSERT INTO snarked_ledger_hashes (value) VALUES (?) RETURNING id" )
-           hash
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Caqti_type.string
-+      (find_req Caqti_type.int Caqti_type.string
-          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
-       id
- end
-@@ -1377,7 +1378,7 @@ module Zkapp_epoch_ledger = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1437,7 +1438,7 @@ module Zkapp_epoch_data = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1512,7 +1513,7 @@ module Zkapp_network_precondition = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1604,7 +1605,7 @@ module Zkapp_events = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
-+      (find_req Caqti_type.int Mina_caqti.array_int_typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
-       id
- end
-@@ -1757,7 +1758,7 @@ module Zkapp_account_update_body = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1788,7 +1789,7 @@ module Zkapp_account_update = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1832,7 +1833,7 @@ module Zkapp_fee_payer_body = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1889,7 +1890,7 @@ module Epoch_data = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -1930,13 +1931,13 @@ module User_command = struct
-     let find (module Conn : CONNECTION) ~(transaction_hash : Transaction_hash.t)
-         ~v1_transaction_hash =
-       Conn.find_opt
--        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
-+        (find_opt_req Caqti_type.string Caqti_type.int
-            (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()) )
-         (txn_hash_to_base58_check transaction_hash ~v1_transaction_hash)
- 
-     let load (module Conn : CONNECTION) ~(id : int) =
-       Conn.find
--        (Caqti_request.find Caqti_type.int typ
-+        (find_req Caqti_type.int typ
-            (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-         id
- 
-@@ -1980,7 +1981,7 @@ module User_command = struct
-           in
-           (* TODO: Converting these uint64s to int64 can overflow; see #5419 *)
-           Conn.find
--            (Caqti_request.find typ Caqti_type.int
-+            (find_req typ Caqti_type.int
-                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
-                   ~tannot:(function
-                     | "command_type" -> Some "user_command_type" | _ -> None )
-@@ -2027,7 +2028,7 @@ module User_command = struct
-             Public_key.add_if_doesn't_exist (module Conn) user_cmd.receiver
-           in
-           Conn.find
--            (Caqti_request.find typ Caqti_type.int
-+            (find_req typ Caqti_type.int
-                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
-                   ~tannot:(function
-                     | "command_type" -> Some "user_command_type" | _ -> None )
-@@ -2068,14 +2069,14 @@ module User_command = struct
-     let find_opt (module Conn : CONNECTION)
-         ~(transaction_hash : Transaction_hash.t) =
-       Conn.find_opt
--        ( Caqti_request.find_opt Caqti_type.string Caqti_type.int
-+        ( find_opt_req Caqti_type.string Caqti_type.int
-         @@ Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()
-         )
-         (Transaction_hash.to_base58_check transaction_hash)
- 
-     let load (module Conn : CONNECTION) id =
-       Conn.find
--        ( Caqti_request.find Caqti_type.int typ
-+        ( find_req Caqti_type.int typ
-         @@ Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names )
-         id
- 
-@@ -2153,8 +2154,8 @@ module Internal_command = struct
-   let find_opt (module Conn : CONNECTION) ~(v1_transaction_hash : bool)
-       ~(transaction_hash : Transaction_hash.t) ~(command_type : string) =
-     Conn.find_opt
--      (Caqti_request.find_opt
--         Caqti_type.(tup2 string string)
-+      (find_opt_req
-+         Caqti_type.(t2 string string)
-          Caqti_type.int
-          (Mina_caqti.select_cols ~select:"id" ~table_name
-             ~tannot:(function
-@@ -2165,7 +2166,7 @@ module Internal_command = struct
- 
-   let load (module Conn : CONNECTION) ~(id : int) =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- 
-@@ -2186,7 +2187,7 @@ module Internal_command = struct
-           Public_key.add_if_doesn't_exist (module Conn) internal_cmd.receiver
-         in
-         Conn.find
--          (Caqti_request.find typ Caqti_type.int
-+          (find_req typ Caqti_type.int
-              (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
-                 ~tannot:(function
-                   | "command_type" -> Some "internal_command_type" | _ -> None
-@@ -2231,7 +2232,7 @@ module Fee_transfer = struct
-       in
-       Ok { kind; receiver_id; fee; hash }
-     in
--    let rep = Caqti_type.(tup4 string int int64 string) in
-+    let rep = Caqti_type.(t4 string int int64 string) in
-     Caqti_type.custom ~encode ~decode rep
- 
-   let add_if_doesn't_exist (module Conn : CONNECTION)
-@@ -2253,7 +2254,7 @@ module Fee_transfer = struct
-           Public_key.add_if_doesn't_exist (module Conn) pk
-         in
-         Conn.find
--          (Caqti_request.find typ Caqti_type.int
-+          (find_req typ Caqti_type.int
-              {sql| INSERT INTO internal_commands
-                     (command_type, receiver_id, fee, hash)
-                    VALUES (?::internal_command_type, ?, ?, ?)
-@@ -2281,7 +2282,7 @@ module Coinbase = struct
-     let decode (_, receiver_id, amount, hash) =
-       Ok { receiver_id; amount; hash }
-     in
--    let rep = Caqti_type.(tup4 string int int64 string) in
-+    let rep = Caqti_type.(t4 string int int64 string) in
-     Caqti_type.custom ~encode ~decode rep
- 
-   let add_if_doesn't_exist (module Conn : CONNECTION)
-@@ -2302,7 +2303,7 @@ module Coinbase = struct
-           Public_key.add_if_doesn't_exist (module Conn) pk
-         in
-         Conn.find
--          (Caqti_request.find typ Caqti_type.int
-+          (find_req typ Caqti_type.int
-              {sql| INSERT INTO internal_commands
-                     (command_type, receiver_id, fee, hash)
-                    VALUES (?::internal_command_type, ?, ?, ?)
-@@ -2341,7 +2342,7 @@ module Block_and_internal_command = struct
-       Option.map ~f:Transaction_status.Failure.to_string failure_reason
-     in
-     Conn.exec
--      (Caqti_request.exec typ
-+      (exec_req typ
-          {sql| INSERT INTO blocks_internal_commands
-                  (block_id,
-                  internal_command_id,
-@@ -2362,8 +2363,8 @@ module Block_and_internal_command = struct
-   let find (module Conn : CONNECTION) ~block_id ~internal_command_id
-       ~sequence_no ~secondary_sequence_no =
-     Conn.find_opt
--      (Caqti_request.find_opt
--         Caqti_type.(tup4 int int int int)
-+      (find_opt_req
-+         Caqti_type.(t4 int int int int)
-          Caqti_type.string
-          {sql| SELECT 'exists' FROM blocks_internal_commands
-                WHERE block_id = $1
-@@ -2394,8 +2395,8 @@ module Block_and_internal_command = struct
-       ~sequence_no ~secondary_sequence_no =
-     let comma_cols = String.concat Fields.names ~sep:"," in
-     Conn.find
--      (Caqti_request.find
--         Caqti_type.(tup4 int int int int)
-+      (find_req
-+         Caqti_type.(t4 int int int int)
-          typ
-          (sprintf
-             {sql| SELECT %s FROM blocks_internal_commands
-@@ -2430,7 +2431,7 @@ module Block_and_signed_command = struct
-       Option.map ~f:Transaction_status.Failure.to_string failure_reason
-     in
-     Conn.exec
--      (Caqti_request.exec typ
-+      (exec_req typ
-          {sql| INSERT INTO blocks_user_commands
-                  (block_id,
-                  user_command_id,
-@@ -2460,8 +2461,8 @@ module Block_and_signed_command = struct
-     let open Deferred.Result.Let_syntax in
-     match%bind
-       Conn.find_opt
--        (Caqti_request.find_opt
--           Caqti_type.(tup3 int int int)
-+        (find_opt_req
-+           Caqti_type.(t3 int int int)
-            Caqti_type.string
-            {sql| SELECT 'exists' FROM blocks_user_commands
-                  WHERE block_id = $1
-@@ -2480,8 +2481,8 @@ module Block_and_signed_command = struct
-   let load (module Conn : CONNECTION) ~block_id ~user_command_id ~sequence_no =
-     let comma_cols = String.concat Fields.names ~sep:"," in
-     Conn.find
--      (Caqti_request.find
--         Caqti_type.(tup3 int int int)
-+      (find_req
-+         Caqti_type.(t3 int int int)
-          typ
-          (sprintf
-             {sql| SELECT %s FROM blocks_user_commands
-@@ -2515,7 +2516,7 @@ module Zkapp_account_update_failures = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name
-             ~cols:[ "index"; "failures" ] ) )
-       id
-@@ -2558,8 +2559,7 @@ module Block_and_zkapp_command = struct
-     in
-     Mina_caqti.select_insert_into_cols
-       ~select:
--        ( "block_id, zkapp_command_id, sequence_no"
--        , Caqti_type.(tup3 int int int) )
-+        ("block_id, zkapp_command_id, sequence_no", Caqti_type.(t3 int int int))
-       ~table_name
-       ~cols:
-         ( [ "block_id"
-@@ -2582,8 +2582,8 @@ module Block_and_zkapp_command = struct
-   let load (module Conn : CONNECTION) ~block_id ~zkapp_command_id ~sequence_no =
-     let comma_cols = String.concat Fields.names ~sep:"," in
-     Conn.find
--      (Caqti_request.find
--         Caqti_type.(tup3 int int int)
-+      (find_req
-+         Caqti_type.(t3 int int int)
-          typ
-          (Mina_caqti.select_cols ~table_name ~select:comma_cols
-             ~cols:[ "block_id"; "zkapp_command_id"; "sequence_no" ]
-@@ -2593,7 +2593,7 @@ module Block_and_zkapp_command = struct
-   let all_from_block (module Conn : CONNECTION) ~block_id =
-     let comma_cols = String.concat Fields.names ~sep:"," in
-     Conn.collect_list
--      (Caqti_request.collect Caqti_type.int typ
-+      (collect_req Caqti_type.int typ
-          (Mina_caqti.select_cols ~table_name ~select:comma_cols
-             ~cols:[ "block_id" ] () ) )
-       block_id
-@@ -2665,7 +2665,7 @@ module Zkapp_account = struct
- 
-   let load (module Conn : CONNECTION) id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-       id
- end
-@@ -2709,8 +2709,8 @@ module Accounts_accessed = struct
-   let find_opt (module Conn : CONNECTION) ~block_id ~account_identifier_id =
-     let comma_cols = String.concat Fields.names ~sep:"," in
-     Conn.find_opt
--      (Caqti_request.find_opt
--         Caqti_type.(tup2 int int)
-+      (find_opt_req
-+         Caqti_type.(t2 int int)
-          typ
-          (sprintf
-             {sql| SELECT %s
-@@ -2781,7 +2781,7 @@ module Accounts_accessed = struct
-           }
-         in
-         Mina_caqti.select_insert_into_cols
--          ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
-+          ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
-           ~table_name ~cols:(Fields.names, typ)
-           (module Conn)
-           account_accessed
-@@ -2797,7 +2797,7 @@ module Accounts_accessed = struct
-   let all_from_block (module Conn : CONNECTION) block_id =
-     let comma_cols = String.concat Fields.names ~sep:"," in
-     Conn.collect_list
--      (Caqti_request.collect Caqti_type.int typ
-+      (collect_req Caqti_type.int typ
-          (Mina_caqti.select_cols ~select:comma_cols ~table_name
-             ~cols:[ "block_id" ] () ) )
-       block_id
-@@ -2822,7 +2822,7 @@ module Accounts_created = struct
-     in
-     let creation_fee = Currency.Fee.to_string creation_fee in
-     Mina_caqti.select_insert_into_cols
--      ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
-+      ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
-       ~table_name ~cols:(Fields.names, typ)
-       (module Conn)
-       { block_id; account_identifier_id; creation_fee }
-@@ -2837,7 +2837,7 @@ module Accounts_created = struct
- 
-   let all_from_block (module Conn : CONNECTION) block_id =
-     Conn.collect_list
--      (Caqti_request.collect Caqti_type.int typ
-+      (collect_req Caqti_type.int typ
-          {sql| SELECT block_id, account_identifier_id, creation_fee
-                FROM accounts_created
-                WHERE block_id = ?
-@@ -2903,14 +2903,14 @@ module Block = struct
-          "SELECT id FROM blocks WHERE state_hash = ?" )
-       (State_hash.to_base58_check state_hash)
- 
--  let find (module Conn : CONNECTION) = make_finder Conn.find Caqti_request.find
-+  let find (module Conn : CONNECTION) = make_finder Conn.find find_req
- 
-   let find_opt (module Conn : CONNECTION) =
--    make_finder Conn.find_opt Caqti_request.find_opt
-+    make_finder Conn.find_opt find_opt_req
- 
-   let load (module Conn : CONNECTION) ~id =
-     Conn.find
--      (Caqti_request.find Caqti_type.int typ
-+      (find_req Caqti_type.int typ
-          (Mina_caqti.select_cols_from_id ~table_name:"blocks" ~cols:Fields.names) )
-       id
- 
-@@ -3015,7 +3015,7 @@ module Block = struct
-         let blockchain_state = Protocol_state.blockchain_state protocol_state in
-         let%bind block_id =
-           Conn.find
--            (Caqti_request.find typ Caqti_type.int
-+            (find_req typ Caqti_type.int
-                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
-                   ~tannot:(function
-                     | "chain_status" ->
-@@ -3397,9 +3397,7 @@ module Block = struct
-     in
- 
-     (* we don't need to specify all types here, just the ones that sql may infer incorrectly *)
--    let field_name : type a. a Caqti_type.Field.t -> string option =
--      let open Caqti_type in
--      function
-+    let field_name : type a. a Caqti_type.Field.t -> string option = function
-       | Bool ->
-           Some "BOOL"
-       | Int ->
-@@ -3412,39 +3410,36 @@ module Block = struct
-           Some "BIGINT"
-       | Float ->
-           Some "FLOAT"
-+      | String ->
-+          Some "TEXT"
-       | Enum name ->
-           Some name
--      | _ ->
--          None
-+      | Octets | Pdate | Ptime | Ptime_span ->
-+          failwith "unsupported field type"
-     in
- 
-     let rec type_field_names : type a. a Caqti_type.t -> string option list =
-+      let open Caqti_type in
-       function
--      | Unit ->
--          []
-       | Field f ->
-           [ field_name f ]
-       | Option t ->
-           type_field_names t
--      | Tup2 (at, bt) ->
--          List.concat [ type_field_names at; type_field_names bt ]
--      | Tup3 (at, bt, ct) ->
--          List.concat
--            [ type_field_names at; type_field_names bt; type_field_names ct ]
--      | Tup4 (at, bt, ct, dt) ->
--          List.concat
--            [ type_field_names at
--            ; type_field_names bt
--            ; type_field_names ct
--            ; type_field_names dt
--            ]
--      | Custom custom ->
--          type_field_names custom.rep
--    in
--
--    let rec render_field : type a. a Caqti_type.Field.t -> a -> string =
-+      | Product (_, prod) ->
-+          let rec loop : type a i. _ -> (a, i) product -> _ =
-+           fun acc -> function
-+            | Proj_end ->
-+                List.concat (List.rev acc)
-+            | Proj (t, _, prod) ->
-+                loop (type_field_names t :: acc) prod
-+          in
-+          loop [] prod
-+      | Annot (_, t) ->
-+          type_field_names t
-+    in
-+
-+    let render_field : type a. a Caqti_type.Field.t -> a -> string =
-      fun typ value ->
--      let open Caqti_type in
-       match typ with
-       | Bool ->
-           Bool.to_string value
-@@ -3472,45 +3467,30 @@ module Block = struct
-           (* we are ignoring the enum annotation in this context because it's not always valid to apply *)
-           (* NOTE: we assume enum values do not contain special characters (eg "'") *)
-           "'" ^ value ^ "'"
--      | _ -> (
--          match Caqti_type.Field.coding Conn.driver_info typ with
--          | None ->
--              failwithf "unable to render caqti field: %s"
--                (Caqti_type.Field.to_string typ)
--                ()
--          | Some (Coding coding) ->
--              render_field coding.rep
--                (Result.ok_or_failwith @@ coding.encode value) )
-     in
-     let rec render_type : type a. a Caqti_type.t -> a -> string list =
--     fun typ value ->
--      match typ with
--      | Unit ->
--          []
--      | Field f ->
--          [ render_field f value ]
--      | Option t -> (
--          match value with
--          | None ->
--              List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
--          | Some x ->
--              render_type t x )
--      | Tup2 (at, bt) ->
--          let a, b = value in
--          List.concat [ render_type at a; render_type bt b ]
--      | Tup3 (at, bt, ct) ->
--          let a, b, c = value in
--          List.concat [ render_type at a; render_type bt b; render_type ct c ]
--      | Tup4 (at, bt, ct, dt) ->
--          let a, b, c, d = value in
--          List.concat
--            [ render_type at a
--            ; render_type bt b
--            ; render_type ct c
--            ; render_type dt d
--            ]
--      | Custom custom ->
--          render_type custom.rep (Result.ok_or_failwith @@ custom.encode value)
-+      let open Caqti_type in
-+      fun typ value ->
-+        match typ with
-+        | Field f ->
-+            [ render_field f value ]
-+        | Option t -> (
-+            match value with
-+            | None ->
-+                List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
-+            | Some x ->
-+                render_type t x )
-+        | Product (_, prod) ->
-+            let rec loop : type i. _ -> (a, i) product -> _ =
-+             fun acc -> function
-+              | Proj_end ->
-+                  List.concat (List.rev acc)
-+              | Proj (t, prj, prod) ->
-+                  loop (render_type t (prj value) :: acc) prod
-+            in
-+            loop [] prod
-+        | Annot (_, t) ->
-+            render_type t value
-     in
-     let render_row (type a) (typ : a Caqti_type.t) (value : a) : string =
-       "(" ^ String.concat ~sep:"," (render_type typ value) ^ ")"
-@@ -3561,8 +3541,8 @@ module Block = struct
-         in
-         let%map entries =
-           Conn.collect_list
--            (Caqti_request.collect Caqti_type.unit
--               Caqti_type.(tup2 typ int)
-+            (Mina_caqti.collect_req Caqti_type.unit
-+               Caqti_type.(t2 typ int)
-                query )
-             ()
-         in
-@@ -3580,7 +3560,7 @@ module Block = struct
-           String.concat ~sep:"," @@ List.map ~f:(render_row typ) values
-         in
-         Conn.collect_list
--          (Caqti_request.collect Caqti_type.unit Caqti_type.int
-+          (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
-              (sprintf "INSERT INTO %s (%s) VALUES %s RETURNING id" table
-                 fields_sql values_sql ) )
-           () )
-@@ -3932,7 +3912,7 @@ module Block = struct
-       let ids_sql = String.concat ~sep:"," ids in
-       let parent_ids_sql = String.concat ~sep:"," parent_ids in
-       Conn.exec
--        (Caqti_request.exec Caqti_type.unit
-+        (Mina_caqti.exec_req Caqti_type.unit
-            (sprintf
-               "UPDATE %s AS b SET parent_id = data.parent_id FROM (SELECT \
-                unnest(array[%s]) as id, unnest(array[%s]) as parent_id) AS \
-@@ -4142,7 +4122,7 @@ module Block = struct
-                 Some id )
-           in
-           Conn.find
--            (Caqti_request.find typ Caqti_type.int
-+            (find_req typ Caqti_type.int
-                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
-                   ~tannot:(function
-                     | "sub_window_densities" ->
-@@ -4304,8 +4284,8 @@ module Block = struct
-   let set_parent_id_if_null (module Conn : CONNECTION) ~parent_hash
-       ~(parent_id : int) =
-     Conn.exec
--      (Caqti_request.exec
--         Caqti_type.(tup2 int string)
-+      (exec_req
-+         Caqti_type.(t2 int string)
-          {sql| UPDATE blocks SET parent_id = ?
-                WHERE parent_hash = ?
-                AND parent_id IS NULL
-@@ -4321,8 +4301,8 @@ module Block = struct
-     in
-     let columns = concat Fields.names in
-     Conn.collect_list
--      (Caqti_request.collect
--         Caqti_type.(tup2 int int)
-+      (collect_req
-+         Caqti_type.(t2 int int)
-          typ
-          (sprintf
-             {sql| WITH RECURSIVE chain AS (
-@@ -4348,37 +4328,37 @@ module Block = struct
- 
-   let get_highest_canonical_block_opt (module Conn : CONNECTION) =
-     Conn.find_opt
--      (Caqti_request.find_opt Caqti_type.unit
--         Caqti_type.(tup2 int int64)
-+      (find_opt_req Caqti_type.unit
-+         Caqti_type.(t2 int int64)
-          "SELECT id,height FROM blocks WHERE chain_status='canonical' ORDER BY \
-           height DESC LIMIT 1" )
- 
-   let get_nearest_canonical_block_above (module Conn : CONNECTION) height =
-     Conn.find
--      (Caqti_request.find Caqti_type.int64
--         Caqti_type.(tup2 int int64)
-+      (find_req Caqti_type.int64
-+         Caqti_type.(t2 int int64)
-          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
-           height > ? ORDER BY height ASC LIMIT 1" )
-       height
- 
-   let get_nearest_canonical_block_below (module Conn : CONNECTION) height =
-     Conn.find
--      (Caqti_request.find Caqti_type.int64
--         Caqti_type.(tup2 int int64)
-+      (find_req Caqti_type.int64
-+         Caqti_type.(t2 int int64)
-          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
-           height < ? ORDER BY height DESC LIMIT 1" )
-       height
- 
-   let mark_as_canonical (module Conn : CONNECTION) ~state_hash =
-     Conn.exec
--      (Caqti_request.exec Caqti_type.string
-+      (exec_req Caqti_type.string
-          "UPDATE blocks SET chain_status='canonical' WHERE state_hash = ?" )
-       state_hash
- 
-   let mark_as_orphaned (module Conn : CONNECTION) ~state_hash ~height =
-     Conn.exec
--      (Caqti_request.exec
--         Caqti_type.(tup2 string int64)
-+      (exec_req
-+         Caqti_type.(t2 string int64)
-          {sql| UPDATE blocks SET chain_status='orphaned'
-                WHERE height = $2
-                AND state_hash <> $1
-@@ -4467,7 +4447,7 @@ module Block = struct
-       | None, Some num_blocks -> (
-           match%map
-             Conn.find_opt
--              (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
-+              (find_opt_req Caqti_type.unit Caqti_type.int
-                  "SELECT MAX(height) FROM blocks" )
-               ()
-           with
-@@ -4483,8 +4463,8 @@ module Block = struct
-       let%bind () =
-         (* Delete user commands from old blocks. *)
-         Conn.exec
--          (Caqti_request.exec
--             Caqti_type.(tup2 int int64)
-+          (exec_req
-+             Caqti_type.(t2 int int64)
-              "DELETE FROM user_commands\n\
-               WHERE id IN\n\
-               (SELECT user_command_id FROM blocks_user_commands\n\
-@@ -4495,8 +4475,8 @@ module Block = struct
-       let%bind () =
-         (* Delete old blocks. *)
-         Conn.exec
--          (Caqti_request.exec
--             Caqti_type.(tup2 int int64)
-+          (exec_req
-+             Caqti_type.(t2 int int64)
-              "DELETE FROM blocks WHERE blocks.height < ? OR blocks.timestamp < \
-               ?" )
-           (height, timestamp)
-@@ -4504,7 +4484,7 @@ module Block = struct
-       let%bind () =
-         (* Delete orphaned internal commands. *)
-         Conn.exec
--          (Caqti_request.exec Caqti_type.unit
-+          (exec_req Caqti_type.unit
-              "DELETE FROM internal_commands\n\
-               WHERE id NOT IN\n\
-               (SELECT internal_commands.id FROM internal_commands\n\
-@@ -4515,7 +4495,7 @@ module Block = struct
-       let%bind () =
-         (* Delete orphaned snarked ledger hashes. *)
-         Conn.exec
--          (Caqti_request.exec Caqti_type.unit
-+          (exec_req Caqti_type.unit
-              "DELETE FROM snarked_ledger_hashes\n\
-               WHERE id NOT IN\n\
-               (SELECT snarked_ledger_hash_id FROM blocks)" )
-@@ -4524,7 +4504,7 @@ module Block = struct
-       let%bind () =
-         (* Delete orphaned public keys. *)
-         Conn.exec
--          (Caqti_request.exec Caqti_type.unit
-+          (exec_req Caqti_type.unit
-              "DELETE FROM public_keys\n\
-               WHERE id NOT IN (SELECT fee_payer_id FROM user_commands)\n\
-               AND id NOT IN (SELECT source_id FROM user_commands)\n\
-@@ -4950,7 +4930,13 @@ let setup_server ~metrics_server_port ~constraint_constants ~logger
-           Strict_pipe.Writer.write extensional_block_writer extensional_block )
-     ]
-   in
--  match Caqti_async.connect_pool ~max_size:30 postgres_address with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:30 ()))
-+      postgres_address
-+  with
-   | Error e ->
-       [%log error]
-         "Failed to create a Caqti pool for Postgresql, see error: $error"
-diff --git a/src/app/berkeley_account_tables/berkeley_account_tables.ml b/src/app/berkeley_account_tables/berkeley_account_tables.ml
-index 95e0a9df56..082d1c4021 100644
---- a/src/app/berkeley_account_tables/berkeley_account_tables.ml
-+++ b/src/app/berkeley_account_tables/berkeley_account_tables.ml
-@@ -641,7 +641,13 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
-              msg )
-   in
-   let archive_uri = Uri.of_string archive_uri in
--  match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:30 ()))
-+      archive_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/berkeley_migration/berkeley_migration.ml b/src/app/berkeley_migration/berkeley_migration.ml
-index 6c1873978a..f5eb0de329 100644
---- a/src/app/berkeley_migration/berkeley_migration.ml
-+++ b/src/app/berkeley_migration/berkeley_migration.ml
-@@ -69,8 +69,8 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
-   let%bind block_user_cmds =
-     query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
-         Conn.collect_list
--          (Caqti_request.collect Caqti_type.unit
--             (Caqti_type.tup2 Sql.Mainnet.User_command.typ
-+          (Mina_caqti.collect_req Caqti_type.unit
-+             (Caqti_type.t2 Sql.Mainnet.User_command.typ
-                 Sql.Mainnet.Block_user_command.typ )
-              (sprintf
-                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
-@@ -87,8 +87,8 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
-   let%bind block_internal_cmds =
-     query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
-         Conn.collect_list
--          (Caqti_request.collect Caqti_type.unit
--             (Caqti_type.tup2 Sql.Mainnet.Internal_command.typ
-+          (Mina_caqti.collect_req Caqti_type.unit
-+             (Caqti_type.t2 Sql.Mainnet.Internal_command.typ
-                 Sql.Mainnet.Block_internal_command.typ )
-              (sprintf
-                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
-@@ -119,8 +119,8 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
-     else
-       query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
-           Conn.collect_list
--            (Caqti_request.collect Caqti_type.unit
--               Caqti_type.(tup2 int Sql.Mainnet.Public_key.typ)
-+            (Mina_caqti.collect_req Caqti_type.unit
-+               Caqti_type.(t2 int Sql.Mainnet.Public_key.typ)
-                (sprintf "SELECT id, value FROM %s WHERE id IN (%s)"
-                   Sql.Mainnet.Public_key.table_name
-                   ( String.concat ~sep:","
-@@ -329,11 +329,15 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
-   let logger = Logger.create () in
-   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
-   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
-+  let pool_config =
-+    Caqti_pool_config.(
-+      merge_left (default_from_env ()) (create ~max_size:128 ()))
-+  in
-   let mainnet_pool =
--    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
-+    Caqti_async.connect_pool ~pool_config mainnet_archive_uri
-   in
-   let migrated_pool =
--    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
-+    Caqti_async.connect_pool ~pool_config migrated_archive_uri
-   in
-   match (mainnet_pool, migrated_pool) with
-   | Error e, _ | _, Error e ->
-@@ -400,7 +404,7 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
-         let%bind garbage_block_ids =
-           query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
-               Conn.collect_list
--                (Caqti_request.collect Caqti_type.unit Caqti_type.int
-+                (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
-                    (sprintf
-                       "DELETE FROM %s WHERE parent_id IS NULL AND height > 1 \
-                        RETURNING id"
-@@ -416,7 +420,7 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
-           let%bind () =
-             query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
-                 Conn.exec
--                  (Caqti_request.exec Caqti_type.unit
-+                  (Mina_caqti.exec_req Caqti_type.unit
-                      (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
-                         Archive_lib.Processor.Block_and_signed_command
-                         .table_name garbage_block_ids_sql ) )
-@@ -424,7 +428,7 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
-           in
-           query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
-               Conn.exec
--                (Caqti_request.exec Caqti_type.unit
-+                (Mina_caqti.exec_req Caqti_type.unit
-                    (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
-                       Archive_lib.Processor.Block_and_internal_command
-                       .table_name garbage_block_ids_sql ) )
-@@ -522,7 +526,6 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
-                      | Error (`Encode_failed _ as err)
-                      | Error (`Encode_rejected _ as err)
-                      | Error (`Request_failed _ as err)
--                     | Error (`Request_rejected _ as err)
-                      | Error (`Response_failed _ as err)
-                      | Error (`Response_rejected _ as err) ->
-                          failwithf
-diff --git a/src/app/berkeley_migration/sql.ml b/src/app/berkeley_migration/sql.ml
-index 297081b7b3..0bdddcfdaa 100644
---- a/src/app/berkeley_migration/sql.ml
-+++ b/src/app/berkeley_migration/sql.ml
-@@ -19,7 +19,7 @@ module Mainnet = struct
- 
-     let find_by_id (module Conn : CONNECTION) id =
-       Conn.find
--        (Caqti_request.find Caqti_type.int Caqti_type.string
-+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
-            "SELECT value FROM public_keys WHERE id = ?" )
-         id
-   end
-@@ -27,7 +27,7 @@ module Mainnet = struct
-   module Snarked_ledger_hash = struct
-     let find_by_id (module Conn : CONNECTION) id =
-       Conn.find
--        (Caqti_request.find Caqti_type.int Caqti_type.string
-+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
-            "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
-         id
-   end
-@@ -79,7 +79,7 @@ module Mainnet = struct
- 
-     let id_from_state_hash (module Conn : CONNECTION) state_hash =
-       Conn.find
--        (Caqti_request.find Caqti_type.string Caqti_type.int
-+        (Mina_caqti.find_req Caqti_type.string Caqti_type.int
-            {sql| SELECT id
-                  FROM blocks
-                  WHERE state_hash = ?
-@@ -88,7 +88,7 @@ module Mainnet = struct
- 
-     let load (module Conn : CONNECTION) ~(id : int) =
-       Conn.find
--        (Caqti_request.find Caqti_type.int typ
-+        (Mina_caqti.find_req Caqti_type.int typ
-            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
-                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
-                         next_epoch_data_id, ledger_hash, height, global_slot,
-@@ -98,7 +98,7 @@ module Mainnet = struct
- 
-     let canonical_blocks (module Conn : CONNECTION) =
-       Conn.collect_list
--        (Caqti_request.collect Caqti_type.unit Caqti_type.int
-+        (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
-            {sql| SELECT id
-                  FROM blocks
-                  WHERE chain_status = 'canonical'
-@@ -106,7 +106,7 @@ module Mainnet = struct
- 
-     let full_canonical_blocks (module Conn : CONNECTION) =
-       Conn.collect_list
--        (Caqti_request.collect Caqti_type.unit typ
-+        (Mina_caqti.collect_req Caqti_type.unit typ
-            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
-                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
-                         next_epoch_data_id, ledger_hash, height, global_slot,
-@@ -118,21 +118,21 @@ module Mainnet = struct
- 
-     let mark_as_canonical (module Conn : CONNECTION) id =
-       Conn.exec
--        (Caqti_request.exec Caqti_type.int
-+        (Mina_caqti.exec_req Caqti_type.int
-            "UPDATE blocks SET chain_status='canonical' WHERE id = ?" )
-         id
- 
-     let get_highest_canonical_block (module Conn : CONNECTION) =
-       Conn.find
--        (Caqti_request.find Caqti_type.unit Caqti_type.int
-+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-            "SELECT id FROM blocks WHERE chain_status='canonical' ORDER BY \
-             height DESC LIMIT 1" )
- 
-     let get_subchain (module Conn : CONNECTION) ~start_block_id ~end_block_id =
-       (* derive query from type `t` *)
-       Conn.collect_list
--        (Caqti_request.collect
--           Caqti_type.(tup2 int int)
-+        (Mina_caqti.collect_req
-+           Caqti_type.(t2 int int)
-            Caqti_type.int
-            {sql| WITH RECURSIVE chain AS (
-                     SELECT id, parent_id, height
-@@ -196,7 +196,7 @@ module Mainnet = struct
- 
-     let load_block (module Conn : CONNECTION) ~block_id =
-       Conn.collect_list
--        (Caqti_request.collect Caqti_type.int typ
-+        (Mina_caqti.collect_req Caqti_type.int typ
-            {sql| SELECT block_id, user_command_id,
-                sequence_no,
-                status,failure_reason,
-@@ -235,7 +235,7 @@ module Mainnet = struct
- 
-     let load_block (module Conn : CONNECTION) ~block_id =
-       Conn.collect_list
--        (Caqti_request.collect Caqti_type.int typ
-+        (Mina_caqti.collect_req Caqti_type.int typ
-            {sql| SELECT block_id, internal_command_id,
-                  sequence_no, secondary_sequence_no,
-                  receiver_account_creation_fee_paid,
-@@ -266,12 +266,12 @@ module Mainnet = struct
-       let decode ((typ, receiver_id, fee, token), hash) =
-         Ok { typ; receiver_id; fee; token; hash }
-       in
--      let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
-+      let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
-       Caqti_type.custom ~encode ~decode rep
- 
-     let load (module Conn : CONNECTION) ~(id : int) =
-       Conn.find
--        (Caqti_request.find Caqti_type.int typ
-+        (Mina_caqti.find_req Caqti_type.int typ
-            {sql| SELECT type,receiver_id,fee,token,hash
-                  FROM internal_commands
-                  WHERE id = ?
-@@ -338,7 +338,7 @@ module Mainnet = struct
- 
-     let load (module Conn : CONNECTION) ~(id : int) =
-       Conn.find
--        (Caqti_request.find Caqti_type.int typ
-+        (Mina_caqti.find_req Caqti_type.int typ
-            {sql| SELECT type,fee_payer_id,source_id,receiver_id,
-                  fee_token,token,
-                  nonce,amount,fee,valid_until,memo,hash
-@@ -352,14 +352,14 @@ module Berkeley = struct
-   module Block = struct
-     let count (module Conn : CONNECTION) =
-       Conn.find
--        (Caqti_request.find Caqti_type.unit Caqti_type.int
-+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-            {sql| SELECT count (*)
-                  FROM blocks
-            |sql} )
- 
-     let greatest_block_height (module Conn : CONNECTION) =
-       Conn.find
--        (Caqti_request.find Caqti_type.unit Caqti_type.int64
-+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-            {sql| SELECT height
-                  FROM blocks
-                  WHERE chain_status <> 'orphaned'
-@@ -369,7 +369,7 @@ module Berkeley = struct
- 
-     let genesis_block_id (module Conn : CONNECTION) =
-       Conn.find
--        (Caqti_request.find Caqti_type.unit Caqti_type.int
-+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-            {sql| SELECT id
-                  FROM blocks
-                  WHERE height = 1
-@@ -388,7 +388,7 @@ module Berkeley = struct
- 
-     let load (module Conn : CONNECTION) =
-       Conn.find
--        (Caqti_request.find Caqti_type.int typ
-+        (Mina_caqti.find_req Caqti_type.int typ
-            {sql| SELECT pk.value, t.value
-                  FROM account_identifiers ai
-                  INNER JOIN tokens t ON ai.token_id = t.id
-@@ -400,7 +400,7 @@ module Berkeley = struct
-   module Accounts_accessed = struct
-     let greatest_ledger_index (module Conn : CONNECTION) =
-       Conn.find_opt
--        (Caqti_request.find_opt Caqti_type.int Caqti_type.int
-+        (Mina_caqti.find_opt_req Caqti_type.int Caqti_type.int
-            {sql| SELECT ledger_index
-                  FROM accounts_accessed
-                  WHERE block_id = $1
-diff --git a/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml b/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
-index 9f8ce3f40d..2e877c0cd7 100644
---- a/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
-+++ b/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
-@@ -342,11 +342,15 @@ let pre_fork_validations ~mainnet_archive_uri ~migrated_archive_uri () =
- 
-   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
-   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
-+  let pool_config =
-+    Caqti_pool_config.(
-+      merge_left (default_from_env ()) (create ~max_size:128 ()))
-+  in
-   let mainnet_pool =
--    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
-+    Caqti_async.connect_pool ~pool_config mainnet_archive_uri
-   in
-   let migrated_pool =
--    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
-+    Caqti_async.connect_pool ~pool_config migrated_archive_uri
-   in
- 
-   match (mainnet_pool, migrated_pool) with
-@@ -434,10 +438,18 @@ let post_fork_validations ~mainnet_archive_uri ~migrated_archive_uri
-   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
-   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
-   let mainnet_pool =
--    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      mainnet_archive_uri
-   in
-   let migrated_pool =
--    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      migrated_archive_uri
-   in
- 
-   match (mainnet_pool, migrated_pool) with
-diff --git a/src/app/berkeley_migration_verifier/sql.ml b/src/app/berkeley_migration_verifier/sql.ml
-index ff6c92ec9b..36b4e32401 100644
---- a/src/app/berkeley_migration_verifier/sql.ml
-+++ b/src/app/berkeley_migration_verifier/sql.ml
-@@ -26,7 +26,7 @@ module Mainnet = struct
-         WHERE receiver_account_creation_fee_paid IS NOT NULL
-       ) 
-       ORDER BY height, public_key |sql}
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_accounts_created_to_csv (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_accounts_created_to_csv_query ~output_file) ()
-@@ -38,7 +38,7 @@ module Mainnet = struct
-         "  SELECT state_hash, ledger_hash FROM blocks\n\
-         \            WHERE chain_status = 'canonical'\n\
-         \          "
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_block_hashes_till_height_query ~output_file ~height =
-     dump_sql_to_csv output_file
-@@ -49,7 +49,7 @@ module Mainnet = struct
-            \            WHERE chain_status = 'canonical'\n\
-            \            AND height <= %d ORDER BY height\n\
-            \      " height )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_block_hashes_till_height (module Conn : CONNECTION) output_file
-       height =
-@@ -63,7 +63,7 @@ module Mainnet = struct
-         \            WHERE chain_status = 'canonical'\n\
-         \            ORDER BY height\n\
-         \      "
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_block_hashes (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_block_hashes_query ~output_file) ()
-@@ -87,7 +87,7 @@ module Mainnet = struct
-            \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
-             fee_payer_keys.id ORDER BY height, sequence_no\n\
-            \      " height )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_user_commands_till_height (module Conn : CONNECTION) output_file
-       height =
-@@ -112,7 +112,7 @@ module Mainnet = struct
-            \        ORDER BY height, sequence_no, secondary_sequence_no, type \n\
-            \   \n\
-            \          " height )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_internal_commands_till_height (module Conn : CONNECTION) output_file
-       height =
-@@ -135,7 +135,7 @@ module Mainnet = struct
-         \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
-          fee_payer_keys.id ORDER BY height, sequence_no\n\
-         \      "
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_user_commands (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_user_commands_query ~output_file) ()
-@@ -158,13 +158,13 @@ module Mainnet = struct
-            \        ORDER BY height, sequence_no, secondary_sequence_no, type \n\
-            \   \n\
-            \          " )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_internal_commands (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_internal_commands_query ~output_file) ()
- 
-   let mark_chain_till_fork_block_as_canonical_query =
--    Caqti_request.exec Caqti_type.string
-+    Mina_caqti.exec_req Caqti_type.string
-       {sql|
-       UPDATE blocks
-     Set chain_status = 'canonical'
-@@ -202,13 +202,13 @@ module Berkeley = struct
-       JOIN account_identifiers ON account_identifier_id = account_identifiers.id 
-       JOIN public_keys         ON public_key_id         = public_keys.id
-       ORDER BY height, public_key |sql}
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_accounts_created_to_csv (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_accounts_created_to_csv_query ~output_file) ()
- 
-   let height_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-       {sql| 
-             SELECT height from blocks order by height desc limit 1;
-           |sql}
-@@ -216,7 +216,7 @@ module Berkeley = struct
-   let block_height (module Conn : CONNECTION) = Conn.find height_query ()
- 
-   let canonical_blocks_count_till_height_query =
--    Caqti_request.find Caqti_type.int Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
-       {sql|
-         WITH RECURSIVE chain AS 
-         (  
-@@ -234,7 +234,7 @@ module Berkeley = struct
-     Conn.find canonical_blocks_count_till_height_query height
- 
-   let blocks_count_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-       {sql|
-           SELECT count(*) FROM blocks ;
-         |sql}
-@@ -260,7 +260,7 @@ module Berkeley = struct
-            \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
-             fee_payer_keys.id ORDER BY height, sequence_no\n\
-            \     " height )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_user_commands_till_height (module Conn : CONNECTION) output_file
-       height =
-@@ -285,7 +285,7 @@ module Berkeley = struct
-            \        ORDER BY height, sequence_no, secondary_sequence_no, \
-             command_type \n\
-            \      " height )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_internal_commands_till_height (module Conn : CONNECTION) output_file
-       height =
-@@ -308,7 +308,7 @@ module Berkeley = struct
-         \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
-          fee_payer_keys.id ORDER BY height, sequence_no\n\
-         \     "
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_user_commands (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_user_commands_query ~output_file) ()
-@@ -330,7 +330,7 @@ module Berkeley = struct
-         \        ORDER BY height, sequence_no, secondary_sequence_no, \
-          command_type \n\
-         \      "
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_internal_commands (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_internal_commands_query ~output_file) ()
-@@ -343,7 +343,7 @@ module Berkeley = struct
-                  JOIN blocks ON block_id = blocks.id
-                  WHERE height <> 1
-                  ORDER BY block_id, id |sql}
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_accounts_accessed_to_csv (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_account_accessed_to_csv_query ~output_file) ()
-@@ -357,7 +357,7 @@ module Berkeley = struct
-            \    AND height <= %d ORDER BY height\n\
-            \ \n\
-            \     " height )
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_block_hashes_till_height (module Conn : CONNECTION) output_file
-       height =
-@@ -371,7 +371,7 @@ module Berkeley = struct
-         \      WHERE chain_status = 'canonical'\n\
-         \      ORDER BY height\n\
-         \      "
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_block_hashes (module Conn : CONNECTION) output_file =
-     Conn.exec (dump_block_hashes_query ~output_file) ()
-@@ -403,21 +403,21 @@ module Berkeley = struct
-         INNER JOIN internal_commands ON id = internal_command_id
-         INNER JOIN account_identifiers ON public_key_id = receiver_id
-       ) ORDER BY block_id, id |sql}
--    |> Caqti_request.exec Caqti_type.unit
-+    |> Mina_caqti.exec_req Caqti_type.unit
- 
-   let dump_user_and_internal_command_info_to_csv (module Conn : CONNECTION)
-       output_file =
-     Conn.exec (dump_user_and_internal_command_info_to_csv_query ~output_file) ()
- 
-   let get_account_accessed_count_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-       {sql| SELECT count(*) FROM accounts_accessed; |sql}
- 
-   let count_account_accessed (module Conn : CONNECTION) =
-     Conn.find get_account_accessed_count_query ()
- 
-   let get_account_id_accessed_in_commands_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-       {sql| 
-         select count(distinct ids.account_identifier_id) FROM 
- 
-diff --git a/src/app/best_tip_merger/best_tip_merger.ml b/src/app/best_tip_merger/best_tip_merger.ml
-index 5682f29ec5..90f418c153 100644
---- a/src/app/best_tip_merger/best_tip_merger.ml
-+++ b/src/app/best_tip_merger/best_tip_merger.ml
-@@ -205,7 +205,7 @@ module Compact_display = struct
-         { current : State_hash.t
-         ; parent : State_hash.t
-         ; blockchain_length : Mina_numbers.Length.t
--        ; global_slot : Mina_numbers.Global_slot_since_genesis.t
-+        ; global_slot : Mina_numbers.Global_slot_since_hard_fork.t
-         }
-   [@@deriving yojson]
- 
-@@ -243,7 +243,7 @@ module Graph_node = struct
-     | Node of
-         { current : State_hash.t
-         ; length : Mina_numbers.Length.t
--        ; slot : Mina_numbers.Global_slot_since_genesis.t
-+        ; slot : Mina_numbers.Global_slot_since_hard_fork.t
-         }
-   [@@deriving yojson, equal, hash]
- 
-@@ -267,7 +267,7 @@ module Graph_node = struct
-           ("NA", "NA")
-       | Node s ->
-           ( Mina_numbers.Length.to_string s.length
--          , Mina_numbers.Global_slot_since_genesis.to_string s.slot )
-+          , Mina_numbers.Global_slot_since_hard_fork.to_string s.slot )
-     in
-     { state; slot; length; peers = t.peers }
- 
-diff --git a/src/app/delegation_compliance/delegation_compliance.ml b/src/app/delegation_compliance/delegation_compliance.ml
-index 8a0e92a6c5..0216fbd1e3 100644
---- a/src/app/delegation_compliance/delegation_compliance.ml
-+++ b/src/app/delegation_compliance/delegation_compliance.ml
-@@ -343,7 +343,13 @@ let main ~input_file ~csv_file ~preliminary_csv_file_opt ~archive_uri
-         csv_datas
-   in
-   let archive_uri = Uri.of_string archive_uri in
--  match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      archive_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/delegation_compliance/sql.ml b/src/app/delegation_compliance/sql.ml
-index 3d214eb9c9..ea264fdeb6 100644
---- a/src/app/delegation_compliance/sql.ml
-+++ b/src/app/delegation_compliance/sql.ml
-@@ -16,7 +16,7 @@ module Block_info = struct
- 
-   (* find all blocks, working back from block with given state hash *)
-   let query =
--    Caqti_request.collect Caqti_type.string typ
-+    Mina_caqti.collect_req Caqti_type.string typ
-       {sql| WITH RECURSIVE chain AS (
- 
-               SELECT id,parent_id,global_slot,state_hash,ledger_hash FROM blocks b WHERE b.state_hash = ?
-@@ -122,7 +122,7 @@ module User_command = struct
-     Caqti_type.custom ~encode ~decode (to_rep spec)
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT type,fee_payer_id, source_id,receiver_id,fee,fee_token,token,amount,valid_until,memo,nonce,
-                    blocks.id,blocks.global_slot,parent.global_slot_since_genesis,
-                    sequence_no,status,created_token,
-@@ -148,8 +148,8 @@ module User_command = struct
-     Conn.collect_list query user_cmd_id
- 
-   let query_payments_by_source_and_receiver =
--    Caqti_request.collect
--      Caqti_type.(tup2 int int)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 int int)
-       typ
-       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
-                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
-@@ -182,7 +182,7 @@ module User_command = struct
-       (source_id, receiver_id)
- 
-   let query_payments_by_receiver =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
-                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
-                parent.global_slot_since_genesis, sequence_no, status, created_token,
-@@ -214,7 +214,7 @@ end
- 
- module Public_key = struct
-   let query =
--    Caqti_request.find_opt Caqti_type.int Caqti_type.string
-+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
-       {sql| SELECT value FROM public_keys
-             WHERE id = ?
-       |sql}
-@@ -223,7 +223,7 @@ module Public_key = struct
-     Conn.find_opt query pk_id
- 
-   let query_for_id =
--    Caqti_request.find_opt Caqti_type.string Caqti_type.int
-+    Mina_caqti.find_opt_req Caqti_type.string Caqti_type.int
-       {sql| SELECT id FROM public_keys
-             WHERE value = ?
-       |sql}
-@@ -234,7 +234,7 @@ end
- 
- module Block = struct
-   let max_slot_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
-       {sql| SELECT MAX(global_slot) FROM blocks
-       |sql}
- 
-@@ -242,7 +242,7 @@ module Block = struct
-     Conn.find max_slot_query ()
- 
-   let state_hashes_by_slot_query =
--    Caqti_request.collect Caqti_type.int Caqti_type.string
-+    Mina_caqti.collect_req Caqti_type.int Caqti_type.string
-       {sql| SELECT state_hash FROM blocks WHERE global_slot = $1
-       |sql}
- 
-@@ -250,8 +250,8 @@ module Block = struct
-     Conn.collect_list state_hashes_by_slot_query slot
- 
-   let creator_slot_bounds_query =
--    Caqti_request.collect
--      Caqti_type.(tup3 int int64 int64)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t3 int int64 int64)
-       Caqti_type.int
-       {sql| SELECT id FROM blocks
-             WHERE creator_id = $1
-@@ -268,7 +268,7 @@ module Coinbase_receivers_for_block_creator = struct
-      with given creator_id, where the receiver distinct from the creator_id
-   *)
-   let query =
--    Caqti_request.collect Caqti_type.int Caqti_type.int
-+    Mina_caqti.collect_req Caqti_type.int Caqti_type.int
-       {sql| SELECT DISTINCT ic.receiver_id
- 
-             FROM blocks b
-diff --git a/src/app/extract_blocks/extract_blocks.ml b/src/app/extract_blocks/extract_blocks.ml
-index 3605538ae4..1bf72965c9 100644
---- a/src/app/extract_blocks/extract_blocks.ml
-+++ b/src/app/extract_blocks/extract_blocks.ml
-@@ -479,7 +479,13 @@ let main ~archive_uri ~start_state_hash_opt ~end_state_hash_opt ~all_blocks () =
-   (* sanity-check input state hashes *)
-   check_state_hash ~logger start_state_hash_opt ;
-   check_state_hash ~logger end_state_hash_opt ;
--  match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      archive_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/extract_blocks/sql.ml b/src/app/extract_blocks/sql.ml
-index 2c4b659973..0f614da7c7 100644
---- a/src/app/extract_blocks/sql.ml
-+++ b/src/app/extract_blocks/sql.ml
-@@ -31,12 +31,12 @@ module Subchain = struct
-       fields b_fields join_condition fields
- 
-   let query_unparented =
--    Caqti_request.collect Caqti_type.string Archive_lib.Processor.Block.typ
-+    Mina_caqti.collect_req Caqti_type.string Archive_lib.Processor.Block.typ
-       (make_sql ~join_condition:"b.id = chain.parent_id")
- 
-   let query_from_start =
--    Caqti_request.collect
--      Caqti_type.(tup2 string string)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 string string)
-       Archive_lib.Processor.Block.typ
-       (make_sql
-          ~join_condition:
-@@ -56,7 +56,7 @@ module Subchain = struct
-     let comma_fields =
-       String.concat Archive_lib.Processor.Block.Fields.names ~sep:","
-     in
--    Caqti_request.collect Caqti_type.unit Archive_lib.Processor.Block.typ
-+    Mina_caqti.collect_req Caqti_type.unit Archive_lib.Processor.Block.typ
-       (sprintf "SELECT %s FROM blocks" comma_fields)
- 
-   let all_blocks (module Conn : Caqti_async.CONNECTION) =
-@@ -67,8 +67,8 @@ end
- 
- module Blocks_and_user_commands = struct
-   let query =
--    Caqti_request.collect Caqti_type.int
--      Caqti_type.(tup2 int int)
-+    Mina_caqti.collect_req Caqti_type.int
-+      Caqti_type.(t2 int int)
-       {sql| SELECT user_command_id, sequence_no
-             FROM blocks_user_commands
-             WHERE block_id = ?
-@@ -91,7 +91,7 @@ module Block_user_command_tokens = struct
-       Caqti_type.[ string; option int; option int ]
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
-             FROM (blocks_user_commands buc
-             INNER JOIN blocks
-@@ -122,7 +122,7 @@ module Blocks_and_internal_commands = struct
-       Caqti_type.[ int; int; int ]
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT internal_command_id, sequence_no, secondary_sequence_no
-             FROM (blocks_internal_commands
-             INNER JOIN blocks
-@@ -147,7 +147,7 @@ module Block_internal_command_tokens = struct
-       Caqti_type.[ string; option int; option int ]
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
-             FROM (blocks_internal_commands bic
-             INNER JOIN blocks
-@@ -167,8 +167,8 @@ end
- 
- module Blocks_and_zkapp_commands = struct
-   let query =
--    Caqti_request.collect Caqti_type.int
--      Caqti_type.(tup2 int int)
-+    Mina_caqti.collect_req Caqti_type.int
-+      Caqti_type.(t2 int int)
-       {sql| SELECT zkapp_command_id, sequence_no
-             FROM blocks_zkapp_commands
-             WHERE block_id = ?
-@@ -191,7 +191,7 @@ module Block_zkapp_command_tokens = struct
-       Caqti_type.[ string; option int; option int ]
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
-             FROM (blocks_zkapp_commands bzkc
-             INNER JOIN blocks
-diff --git a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
-index 65b34d6b55..efe0668cc2 100644
---- a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
-+++ b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
-@@ -67,15 +67,11 @@ let amount_geq_min_balance ~amount ~initial_min_balance =
- let generate_delegate_account ~logger delegatee_pk =
-   [%log info] "Generating account for delegatee $delegatee"
-     ~metadata:[ ("delegatee", `String delegatee_pk) ] ;
--  let pk = Some delegatee_pk in
--  let balance = Currency.Balance.zero in
--  let timing = None in
--  let delegate = None in
-   { Runtime_config.Json_layout.Accounts.Single.default with
--    pk
--  ; balance
--  ; timing
--  ; delegate
-+    pk = delegatee_pk
-+  ; balance = Currency.Balance.zero
-+  ; timing = None
-+  ; delegate = None
-   }
- 
- let generate_missing_delegate_accounts ~logger =
-@@ -97,7 +93,6 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
-     ~delegatee_pk =
-   [%log info] "Processing record for $wallet_pk"
-     ~metadata:[ ("wallet_pk", `String wallet_pk) ] ;
--  let pk = Some wallet_pk in
-   let balance = Currency.Balance.of_mina_string_exn amount in
-   let initial_minimum_balance =
-     (* if omitted in the TSV, use balance *)
-@@ -135,7 +130,9 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
-           .initial_minimum_balance
-         ; cliff_time
-         ; cliff_amount
--        ; vesting_period
-+        ; vesting_period =
-+            Global_slot_since_genesis.(
-+              diff vesting_period zero |> Option.value_exn)
-         ; vesting_increment
-         }
-   in
-@@ -144,7 +141,7 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
-     if no_delegatee delegatee_pk then None else Some delegatee_pk
-   in
-   { Runtime_config.Json_layout.Accounts.Single.default with
--    pk
-+    pk = wallet_pk
-   ; balance
-   ; timing
-   ; delegate
-diff --git a/src/app/ledger_export_bench/ledger_export_benchmark.ml b/src/app/ledger_export_bench/ledger_export_benchmark.ml
-index cd5846345a..5125f8ba90 100644
---- a/src/app/ledger_export_bench/ledger_export_benchmark.ml
-+++ b/src/app/ledger_export_bench/ledger_export_benchmark.ml
-@@ -26,7 +26,7 @@ let () =
-   let cfg = load_daemon_cfg runtime_config () in
-   let accounts =
-     match cfg.ledger with
--    | None | Some { base = Named _; _ } | Some { base = Hash _; _ } ->
-+    | None | Some { base = Named _; _ } | Some { base = Hash; _ } ->
-         []
-     | Some { base = Accounts accs; _ } ->
-         List.map ~f:Runtime_config.Accounts.Single.to_account accs
-diff --git a/src/app/migrate-balances-table/dune b/src/app/migrate-balances-table/dune
-index dbb463c78c..dbe6d09aad 100644
---- a/src/app/migrate-balances-table/dune
-+++ b/src/app/migrate-balances-table/dune
-@@ -18,6 +18,7 @@
-    ;; local libraries
-    logger
-    bounded_types
-+   mina_caqti
-  )
-  (preprocessor_deps ../../config.mlh)
-  (instrumentation (backend bisect_ppx))
-diff --git a/src/app/migrate-balances-table/migrate_balances_table.ml b/src/app/migrate-balances-table/migrate_balances_table.ml
-index 76d0549c2a..ea8f83f841 100644
---- a/src/app/migrate-balances-table/migrate_balances_table.ml
-+++ b/src/app/migrate-balances-table/migrate_balances_table.ml
-@@ -14,7 +14,13 @@ let query_db pool ~f ~item =
- let main ~archive_uri () =
-   let logger = Logger.create () in
-   let archive_uri = Uri.of_string archive_uri in
--  match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      archive_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/migrate-balances-table/sql.ml b/src/app/migrate-balances-table/sql.ml
-index 4c0a8c86dd..f0bc5f8c81 100644
---- a/src/app/migrate-balances-table/sql.ml
-+++ b/src/app/migrate-balances-table/sql.ml
-@@ -4,7 +4,7 @@ open Core_kernel
- 
- let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        {sql| CREATE TABLE IF NOT EXISTS balances_temp
-            ( id                           serial PRIMARY KEY
-            , public_key_id                int    NOT NULL REFERENCES public_keys(id)
-@@ -19,7 +19,7 @@ let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
- 
- let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf
-           {sql| CREATE TABLE IF NOT EXISTS %s_temp AS (SELECT * FROM %s)
-                 |sql}
-@@ -27,7 +27,7 @@ let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
- 
- let create_table_index (module Conn : Caqti_async.CONNECTION) table col =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf
-           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
-                 |sql}
-@@ -39,7 +39,7 @@ let create_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
- let create_table_named_index (module Conn : Caqti_async.CONNECTION) table col
-     name =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf
-           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
-                 |sql}
-@@ -51,7 +51,7 @@ let create_temp_table_named_index (module Conn : Caqti_async.CONNECTION) table
- 
- let drop_table_index (module Conn : Caqti_async.CONNECTION) table col =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf {sql| DROP INDEX IF EXISTS idx_%s_%s
-           |sql} table col ) )
- 
-@@ -60,7 +60,7 @@ let drop_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
- 
- let create_cursor (module Conn : Caqti_async.CONNECTION) name =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf
-           {sql| CREATE TABLE IF NOT EXISTS %s_cursor
-                       ( value int NOT NULL)
-@@ -69,7 +69,7 @@ let create_cursor (module Conn : Caqti_async.CONNECTION) name =
- 
- let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf
-           {sql| INSERT INTO %s_cursor (value) VALUES (0)
-                 |sql}
-@@ -77,13 +77,13 @@ let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
- 
- let current_cursor (module Conn : Caqti_async.CONNECTION) name =
-   Conn.find_opt
--    (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
-+    (Mina_caqti.find_opt_req Caqti_type.unit Caqti_type.int
-        (sprintf {sql| SELECT value FROM %s_cursor
-                 |sql} name ) )
- 
- let update_cursor (module Conn : Caqti_async.CONNECTION) name ndx =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.int
-+    (Mina_caqti.exec_req Caqti_type.int
-        (sprintf
-           {sql| UPDATE %s_cursor SET value = $1
-                 |sql}
-@@ -99,7 +99,7 @@ let drop_foreign_key_constraint (module Conn : Caqti_async.CONNECTION) table
-       |sql}
-       table foreign_key
-   in
--  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
-+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
- 
- let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
-     table col foreign_key =
-@@ -112,7 +112,7 @@ let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
-       |sql}
-       table foreign_key col
-   in
--  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
-+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
- 
- let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
-     table col foreign_key =
-@@ -125,14 +125,14 @@ let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
-       |sql}
-       table foreign_key col
-   in
--  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
-+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
- 
- let find_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
-     ~balance ~block_id ~block_height ~block_sequence_no
-     ~block_secondary_sequence_no =
-   Conn.find_opt
--    (Caqti_request.find_opt
--       Caqti_type.(tup3 int int64 (tup4 int int int int))
-+    (Mina_caqti.find_opt_req
-+       Caqti_type.(t3 int int64 (t4 int int int int))
-        Caqti_type.int
-        {sql| SELECT id
-             FROM balances_temp
-@@ -152,8 +152,8 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
-     ~balance ~block_id ~block_height ~block_sequence_no
-     ~block_secondary_sequence_no =
-   Conn.find
--    (Caqti_request.find
--       Caqti_type.(tup3 int int64 (tup4 int int int int))
-+    (Mina_caqti.find_req
-+       Caqti_type.(t3 int int64 (t4 int int int int))
-        Caqti_type.int
-        {sql| INSERT INTO balances_temp
-             ( public_key_id
-@@ -178,8 +178,8 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
- 
- let get_internal_commands (module Conn : Caqti_async.CONNECTION) =
-   Conn.collect_list
--    (Caqti_request.collect Caqti_type.unit
--       Caqti_type.(tup4 int int64 (tup4 int int int int) int)
-+    (Mina_caqti.collect_req Caqti_type.unit
-+       Caqti_type.(t4 int int64 (t4 int int int int) int)
-        {sql| SELECT bal.public_key_id,bal.balance,bic.block_id,blocks.height,bic.sequence_no,bic.secondary_sequence_no,
-             internal_command_id
-             FROM blocks_internal_commands bic
-@@ -193,8 +193,8 @@ let update_internal_command_receiver_balance
-     (module Conn : Caqti_async.CONNECTION) ~new_balance_id ~block_id
-     ~internal_command_id ~block_sequence_no ~block_secondary_sequence_no =
-   Conn.exec
--    (Caqti_request.exec
--       Caqti_type.(tup2 int (tup4 int int int int))
-+    (Mina_caqti.exec_req
-+       Caqti_type.(t2 int (t4 int int int int))
-        {sql| UPDATE blocks_internal_commands_temp SET receiver_balance = $1
-           WHERE block_id = $2
-           AND internal_command_id = $3
-@@ -209,8 +209,8 @@ let update_internal_command_receiver_balance
- 
- let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
-   Conn.collect_list
--    (Caqti_request.collect Caqti_type.unit
--       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
-+    (Mina_caqti.collect_req Caqti_type.unit
-+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
-        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
-                     bal_fee_payer.public_key_id,bal_fee_payer.balance
-              FROM blocks_user_commands buc
-@@ -222,8 +222,8 @@ let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
- 
- let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
-   Conn.collect_list
--    (Caqti_request.collect Caqti_type.unit
--       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
-+    (Mina_caqti.collect_req Caqti_type.unit
-+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
-        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
-                     bal_source.public_key_id,bal_source.balance
-              FROM blocks_user_commands buc
-@@ -236,8 +236,8 @@ let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
- 
- let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
-   Conn.collect_list
--    (Caqti_request.collect Caqti_type.unit
--       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
-+    (Mina_caqti.collect_req Caqti_type.unit
-+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
-        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
-                     bal_receiver.public_key_id,bal_receiver.balance
-              FROM blocks_user_commands buc
-@@ -251,8 +251,8 @@ let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
- let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
-     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
-   Conn.exec
--    (Caqti_request.exec
--       Caqti_type.(tup2 int (tup3 int int int))
-+    (Mina_caqti.exec_req
-+       Caqti_type.(t2 int (t3 int int int))
-        {sql| UPDATE blocks_user_commands_temp SET fee_payer_balance = $1
-           WHERE block_id = $2
-           AND user_command_id = $3
-@@ -263,8 +263,8 @@ let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
- let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
-     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
-   Conn.exec
--    (Caqti_request.exec
--       Caqti_type.(tup2 int (tup3 int int int))
-+    (Mina_caqti.exec_req
-+       Caqti_type.(t2 int (t3 int int int))
-        {sql| UPDATE blocks_user_commands_temp SET source_balance = $1
-           WHERE block_id = $2
-           AND user_command_id = $3
-@@ -276,8 +276,8 @@ let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
- let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
-     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
-   Conn.exec
--    (Caqti_request.exec
--       Caqti_type.(tup2 int (tup3 int int int))
-+    (Mina_caqti.exec_req
-+       Caqti_type.(t2 int (t3 int int int))
-        {sql| UPDATE blocks_user_commands_temp SET receiver_balance = $1
-           WHERE block_id = $2
-           AND user_command_id = $3
-@@ -288,13 +288,13 @@ let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
- 
- let drop_table (module Conn : Caqti_async.CONNECTION) table =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf {sql| DROP TABLE %s
-                 |sql} table ) )
- 
- let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
-   Conn.exec
--    (Caqti_request.exec Caqti_type.unit
-+    (Mina_caqti.exec_req Caqti_type.unit
-        (sprintf
-           {sql| ALTER TABLE %s_temp
-                 RENAME TO %s
-@@ -303,7 +303,7 @@ let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
- 
- let get_column_count (module Conn : Caqti_async.CONNECTION) table =
-   Conn.find
--    (Caqti_request.find Caqti_type.string Caqti_type.int
-+    (Mina_caqti.find_req Caqti_type.string Caqti_type.int
-        {sql| SELECT COUNT(*) FROM information_schema.columns
-              WHERE table_name=$1
-        |sql} )
-diff --git a/src/app/missing_blocks_auditor/dune b/src/app/missing_blocks_auditor/dune
-index 623a5079ba..7ec1eae5af 100644
---- a/src/app/missing_blocks_auditor/dune
-+++ b/src/app/missing_blocks_auditor/dune
-@@ -18,6 +18,7 @@
-    ;; local libraries
-    logger
-    bounded_types
-+   mina_caqti
-  )
-  (preprocessor_deps ../../config.mlh)
-  (instrumentation (backend bisect_ppx))
-diff --git a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
-index 5bce995ea2..d2b54f3615 100644
---- a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
-+++ b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
-@@ -22,7 +22,13 @@ let add_error, get_exit_code =
- let main ~archive_uri () =
-   let logger = Logger.create () in
-   let archive_uri = Uri.of_string archive_uri in
--  match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      archive_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/missing_blocks_auditor/sql.ml b/src/app/missing_blocks_auditor/sql.ml
-index 3e2bf01e93..d8a47b926d 100644
---- a/src/app/missing_blocks_auditor/sql.ml
-+++ b/src/app/missing_blocks_auditor/sql.ml
-@@ -4,8 +4,8 @@ module Unparented_blocks = struct
-   (* parent_hashes represent ends of chains leading to an orphan block *)
- 
-   let query =
--    Caqti_request.collect Caqti_type.unit
--      Caqti_type.(tup4 int string int string)
-+    Mina_caqti.collect_req Caqti_type.unit
-+      Caqti_type.(t4 int string int string)
-       {sql|
-            SELECT id, state_hash, height, parent_hash FROM blocks
-            WHERE parent_id IS NULL
-@@ -16,7 +16,7 @@ end
- 
- module Missing_blocks_gap = struct
-   let query =
--    Caqti_request.find Caqti_type.int Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
-       {sql| SELECT $1 - MAX(height) - 1 FROM blocks
-             WHERE height < $1
-       |sql}
-@@ -26,7 +26,7 @@ end
- 
- module Chain_status = struct
-   let query_highest_canonical =
--    Caqti_request.find Caqti_type.unit Caqti_type.int64
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-       {sql| SELECT max(height) FROM blocks
-             WHERE chain_status = 'canonical'
-       |sql}
-@@ -35,7 +35,7 @@ module Chain_status = struct
-     Conn.find query_highest_canonical ()
- 
-   let query_count_pending_below =
--    Caqti_request.find Caqti_type.int64 Caqti_type.int64
-+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
-       {sql| SELECT count(*) FROM blocks
-             WHERE chain_status = 'pending'
-             AND height <= ?
-@@ -45,8 +45,8 @@ module Chain_status = struct
-     Conn.find query_count_pending_below height
- 
-   let query_canonical_chain =
--    Caqti_request.collect Caqti_type.int64
--      Caqti_type.(tup3 int string string)
-+    Mina_caqti.collect_req Caqti_type.int64
-+      Caqti_type.(t3 int string string)
-       {sql| WITH RECURSIVE chain AS (
- 
-                (SELECT id, state_hash, parent_id, chain_status
-diff --git a/src/app/patch_archive_test/patch_archive_test.ml b/src/app/patch_archive_test/patch_archive_test.ml
-index 1fbc9e3104..017b6574fc 100644
---- a/src/app/patch_archive_test/patch_archive_test.ml
-+++ b/src/app/patch_archive_test/patch_archive_test.ml
-@@ -124,7 +124,13 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
-   let copy_uri = make_archive_copy_uri archive_uri in
-   [%log info] "Connecting to original database" ;
-   let%bind () =
--    match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+    match
-+      Caqti_async.connect_pool
-+        ~pool_config:
-+          Caqti_pool_config.(
-+            merge_left (default_from_env ()) (create ~max_size:128 ()))
-+        archive_uri
-+    with
-     | Error e ->
-         [%log fatal]
-           ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-@@ -159,7 +165,13 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
-         ()
-   in
-   [%log info] "Connecting to copied database" ;
--  match Caqti_async.connect_pool ~max_size:128 copy_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      copy_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/replayer/replayer.ml b/src/app/replayer/replayer.ml
-index b42081085c..8c4d49ea41 100644
---- a/src/app/replayer/replayer.ml
-+++ b/src/app/replayer/replayer.ml
-@@ -653,7 +653,13 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
-              msg )
-   in
-   let archive_uri = Uri.of_string archive_uri in
--  match Caqti_async.connect_pool ~max_size:128 archive_uri with
-+  match
-+    Caqti_async.connect_pool
-+      ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:128 ()))
-+      archive_uri
-+  with
-   | Error e ->
-       [%log fatal]
-         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/replayer/sql.ml b/src/app/replayer/sql.ml
-index 40caaf5af1..54c32b7274 100644
---- a/src/app/replayer/sql.ml
-+++ b/src/app/replayer/sql.ml
-@@ -18,8 +18,8 @@ module Block_info = struct
- 
-   (* find all blocks, working back from block with given state hash *)
-   let query =
--    Caqti_request.collect
--      Caqti_type.(tup2 string int64)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 string int64)
-       typ
-       {sql| WITH RECURSIVE chain AS (
-               SELECT id,parent_id,global_slot_since_genesis,state_hash,ledger_hash, snarked_ledger_hash_id FROM blocks b                                                                                                                                                           WHERE b.state_hash = $1
-@@ -71,7 +71,7 @@ let find_command_ids_query s =
- 
- module Block = struct
-   let state_hash_query =
--    Caqti_request.find Caqti_type.int Caqti_type.string
-+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
-       {sql| SELECT state_hash FROM blocks
-             WHERE id = ?
-       |sql}
-@@ -80,7 +80,7 @@ module Block = struct
-     Conn.find state_hash_query id
- 
-   let parent_id_query =
--    Caqti_request.find Caqti_type.int Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
-       {sql| SELECT parent_id FROM blocks
-             WHERE id = ?
-       |sql}
-@@ -89,7 +89,7 @@ module Block = struct
-     Conn.find parent_id_query id
- 
-   let unparented_query =
--    Caqti_request.collect Caqti_type.unit Caqti_type.int
-+    Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
-       {sql| SELECT id FROM blocks
-             WHERE parent_id IS NULL
-       |sql}
-@@ -98,21 +98,21 @@ module Block = struct
-     Conn.collect_list unparented_query ()
- 
-   let get_height_query =
--    Caqti_request.find Caqti_type.int Caqti_type.int64
-+    Mina_caqti.find_req Caqti_type.int Caqti_type.int64
-       {sql| SELECT height FROM blocks WHERE id = $1 |sql}
- 
-   let get_height (module Conn : Caqti_async.CONNECTION) ~block_id =
-     Conn.find get_height_query block_id
- 
-   let max_slot_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int64
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks |sql}
- 
-   let get_max_slot (module Conn : Caqti_async.CONNECTION) () =
-     Conn.find max_slot_query ()
- 
-   let max_canonical_slot_query =
--    Caqti_request.find Caqti_type.unit Caqti_type.int64
-+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks
-             WHERE chain_status = 'canonical'
-       |sql}
-@@ -121,7 +121,7 @@ module Block = struct
-     Conn.find max_canonical_slot_query ()
- 
-   let next_slot_query =
--    Caqti_request.find_opt Caqti_type.int64 Caqti_type.int64
-+    Mina_caqti.find_opt_req Caqti_type.int64 Caqti_type.int64
-       {sql| SELECT global_slot_since_genesis FROM blocks
-             WHERE global_slot_since_genesis >= $1
-             AND chain_status <> 'orphaned'
-@@ -133,7 +133,7 @@ module Block = struct
-     Conn.find_opt next_slot_query slot
- 
-   let state_hashes_by_slot_query =
--    Caqti_request.collect Caqti_type.int64 Caqti_type.string
-+    Mina_caqti.collect_req Caqti_type.int64 Caqti_type.string
-       {sql| SELECT state_hash FROM blocks WHERE global_slot_since_genesis = $1 |sql}
- 
-   let get_state_hashes_by_slot (module Conn : Caqti_async.CONNECTION) slot =
-@@ -141,7 +141,7 @@ module Block = struct
- 
-   (* find all blocks, working back from block with given state hash *)
-   let chain_query =
--    Caqti_request.collect Caqti_type.string Caqti_type.string
-+    Mina_caqti.collect_req Caqti_type.string Caqti_type.string
-       {sql| WITH RECURSIVE chain AS (
- 
-               SELECT id,parent_id FROM blocks b WHERE b.state_hash = ?
-@@ -171,7 +171,7 @@ module Block = struct
-       let pk, _ = Mina_state.Consensus_state_hooks.genesis_winner in
-       Signature_lib.Public_key.Compressed.to_base58_check pk
-     in
--    Caqti_request.find Caqti_type.int64 Caqti_type.string
-+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.string
-       (sprintf
-          {sql| SELECT snarked_ledger_hashes.value
-                FROM blocks
-@@ -192,8 +192,8 @@ end
- 
- module User_command_ids = struct
-   let query =
--    Caqti_request.collect
--      Caqti_type.(tup2 string int64)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 string int64)
-       Caqti_type.int
-       (find_command_ids_query "user")
- 
-@@ -240,7 +240,7 @@ module User_command = struct
-         ]
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT command_type,fee_payer_id, source_id,receiver_id,fee,amount,valid_until,memo,nonce,
-                    blocks.id,blocks.height,blocks.global_slot_since_genesis,
-                    sequence_no,status
-@@ -265,8 +265,8 @@ end
- 
- module Zkapp_command_ids = struct
-   let query =
--    Caqti_request.collect
--      Caqti_type.(tup2 string int64)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 string int64)
-       Caqti_type.int
-       (find_command_ids_query "zkapp")
- 
-@@ -292,7 +292,7 @@ module Zkapp_command = struct
-         [ int; Mina_caqti.array_int_typ; string; int; int64; int; string ]
- 
-   let query =
--    Caqti_request.collect Caqti_type.int typ
-+    Mina_caqti.collect_req Caqti_type.int typ
-       {sql| SELECT zkapp_fee_payer_body_id,zkapp_account_updates_ids,memo,
-                    blocks.id,blocks.global_slot_since_genesis,
-                    sequence_no,hash
-@@ -317,8 +317,8 @@ end
- 
- module Internal_command_ids = struct
-   let query =
--    Caqti_request.collect
--      Caqti_type.(tup2 string int64)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 string int64)
-       Caqti_type.int
-       (find_command_ids_query "internal")
- 
-@@ -347,8 +347,8 @@ module Internal_command = struct
-      the call to Staged_ledger.apply in Block_producer
-   *)
-   let query =
--    Caqti_request.collect
--      Caqti_type.(tup2 int64 int)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 int64 int)
-       typ
-       {sql| SELECT command_type,receiver_id,fee,
-                    b.id,b.height,b.global_slot_since_genesis,
-@@ -377,7 +377,7 @@ end
- 
- module Public_key = struct
-   let query =
--    Caqti_request.find_opt Caqti_type.int Caqti_type.string
-+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
-       {sql| SELECT value FROM public_keys
-             WHERE id = ?
-       |sql}
-@@ -388,7 +388,7 @@ end
- 
- module Snarked_ledger_hashes = struct
-   let query =
--    Caqti_request.find Caqti_type.int Caqti_type.string
-+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
-       {sql| SELECT value FROM snarked_ledger_hashes
-             WHERE id = ?
-       |sql}
-@@ -404,11 +404,11 @@ module Epoch_data = struct
-     let decode (epoch_ledger_hash, epoch_data_seed) =
-       Ok { epoch_ledger_hash; epoch_data_seed }
-     in
--    let rep = Caqti_type.(tup2 string string) in
-+    let rep = Caqti_type.(t2 string string) in
-     Caqti_type.custom ~encode ~decode rep
- 
-   let query_epoch_data =
--    Caqti_request.find Caqti_type.int epoch_data_typ
-+    Mina_caqti.find_req Caqti_type.int epoch_data_typ
-       {sql| SELECT slh.value, ed.seed FROM snarked_ledger_hashes AS slh
- 
-        INNER JOIN
-@@ -425,7 +425,7 @@ module Epoch_data = struct
-     Conn.find query_epoch_data epoch_ledger_id
- 
-   let query_staking_epoch_data_id =
--    Caqti_request.find Caqti_type.string Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
-       {sql| SELECT staking_epoch_data_id FROM blocks
- 
-             WHERE state_hash = ?
-@@ -437,7 +437,7 @@ module Epoch_data = struct
-     Conn.find query_staking_epoch_data_id state_hash
- 
-   let query_next_epoch_data_id =
--    Caqti_request.find Caqti_type.string Caqti_type.int
-+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
-       {sql| SELECT next_epoch_data_id FROM blocks
- 
-             WHERE state_hash = ?
-@@ -450,7 +450,7 @@ end
- module Parent_block = struct
-   (* fork block is parent of block with the given state hash *)
-   let query_parent_state_hash =
--    Caqti_request.find Caqti_type.string Caqti_type.string
-+    Mina_caqti.find_req Caqti_type.string Caqti_type.string
-       {sql| SELECT parent.state_hash FROM blocks AS parent
- 
-             INNER JOIN
-diff --git a/src/app/rosetta/lib/account.ml b/src/app/rosetta/lib/account.ml
-index acfd8bfcba..18b94265ed 100644
---- a/src/app/rosetta/lib/account.ml
-+++ b/src/app/rosetta/lib/account.ml
-@@ -36,9 +36,9 @@ module Sql = struct
-           .transaction_capacity_log_2
- 
-     let query_pending =
--      Caqti_request.find_opt
--        Caqti_type.(tup3 string int64 string)
--        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
-+      Mina_caqti.find_opt_req
-+        Caqti_type.(t3 string int64 string)
-+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
-         {sql|
-   WITH RECURSIVE pending_chain AS (
- 
-@@ -87,9 +87,9 @@ module Sql = struct
- |sql}
- 
-     let query_canonical =
--      Caqti_request.find_opt
--        Caqti_type.(tup3 string int64 string)
--        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
-+      Mina_caqti.find_opt_req
-+        Caqti_type.(t3 string int64 string)
-+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
-         {sql|
-                 SELECT b.height,b.global_slot_since_genesis AS block_global_slot_since_genesis,balance,nonce,timing_id
- 
-diff --git a/src/app/rosetta/lib/block.ml b/src/app/rosetta/lib/block.ml
-index 70d4c77ec2..984e18a92e 100644
---- a/src/app/rosetta/lib/block.ml
-+++ b/src/app/rosetta/lib/block.ml
-@@ -390,10 +390,10 @@ module Sql = struct
- 
-       let winner (_, winner) = `Pk winner
- 
--      let typ = Caqti_type.(tup2 string string)
-+      let typ = Caqti_type.(t2 string string)
-     end
- 
--    let typ = Caqti_type.(tup3 int Archive_lib.Processor.Block.typ Extras.typ)
-+    let typ = Caqti_type.(t3 int Archive_lib.Processor.Block.typ Extras.typ)
- 
-     let block_fields ?prefix () =
-       let names = Archive_lib.Processor.Block.Fields.names in
-@@ -404,7 +404,7 @@ module Sql = struct
-       String.concat ~sep:"," fields
- 
-     let query_count_canonical_at_height =
--      Caqti_request.find Caqti_type.int64 Caqti_type.int64
-+      Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
-         {sql| SELECT COUNT(*) FROM blocks
-               WHERE height = ?
-               AND chain_status = 'canonical'
-@@ -412,7 +412,7 @@ module Sql = struct
- 
-     let query_height_canonical =
-       let c_fields = block_fields ~prefix:"c." () in
--      Caqti_request.find_opt Caqti_type.int64 typ
-+      Mina_caqti.find_opt_req Caqti_type.int64 typ
-         (* The archive database will only reconcile the canonical columns for
-          * blocks older than k + epsilon
-          *)
-@@ -436,7 +436,7 @@ module Sql = struct
-       let fields = block_fields () in
-       let b_fields = block_fields ~prefix:"b." () in
-       let c_fields = block_fields ~prefix:"c." () in
--      Caqti_request.find_opt Caqti_type.int64 typ
-+      Mina_caqti.find_opt_req Caqti_type.int64 typ
-         (* According to the clarification of the Rosetta spec here
-          * https://community.rosetta-api.org/t/querying-block-by-just-its-index/84/3 ,
-          * it is important to select only the block on the canonical chain for a
-@@ -482,9 +482,9 @@ module Sql = struct
- 
-     let query_hash =
-       let b_fields = block_fields ~prefix:"b." () in
--      Caqti_request.find_opt Caqti_type.string typ
--        (sprintf
--           {|
-+      Mina_caqti.find_opt_req Caqti_type.string typ
-+      (sprintf
-+        {|
-          SELECT b.id,
-                 %s,
-                 pk.value as creator,
-@@ -500,8 +500,8 @@ module Sql = struct
- 
-     let query_both =
-       let b_fields = block_fields ~prefix:"b." () in
--      Caqti_request.find_opt
--        Caqti_type.(tup2 string int64)
-+      Mina_caqti.find_opt_req
-+        Caqti_type.(t2 string int64)
-         typ
-         (sprintf
-            {|
-@@ -521,9 +521,9 @@ module Sql = struct
- 
-     let query_by_id =
-       let b_fields = block_fields ~prefix:"b." () in
--      Caqti_request.find_opt Caqti_type.int typ
--        (sprintf
--           {|
-+      Mina_caqti.find_opt_req Caqti_type.int typ
-+      (sprintf
-+        {|
-          SELECT b.id,
-                 %s,
-                 pk.value as creator,
-@@ -539,9 +539,9 @@ module Sql = struct
- 
-     let query_best =
-       let b_fields = block_fields ~prefix:"b." () in
--      Caqti_request.find_opt Caqti_type.unit typ
--        (sprintf
--           {|
-+      Mina_caqti.find_opt_req Caqti_type.unit typ
-+      (sprintf
-+        {|
-          SELECT b.id,
-                 %s,
-                 pk.value as creator,
-@@ -578,7 +578,7 @@ module Sql = struct
-           else
-             let%bind max_height =
-               Conn.find
--                (Caqti_request.find Caqti_type.unit Caqti_type.int64
-+                (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-                    {sql| SELECT MAX(height) FROM blocks |sql} )
-                 ()
-             in
-@@ -635,21 +635,16 @@ module Sql = struct
- 
-     let typ =
-       Caqti_type.(
--        tup3 int Archive_lib.Processor.User_command.Signed_command.typ
-+        t3 int Archive_lib.Processor.User_command.Signed_command.typ
-           Extras.typ)
- 
-     let query =
-       let fields =
--        String.concat ~sep:","
--        @@ List.map
--             ~f:(fun n -> "u." ^ n)
--             Archive_lib.Processor.User_command.Signed_command.Fields.names
--      in
--      Caqti_request.collect
--        Caqti_type.(tup2 int string)
--        typ
--        (sprintf
--           {|
-+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "u." ^ n)
-+          Archive_lib.Processor.User_command.Signed_command.Fields.names in
-+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
-+      (sprintf
-+        {|
-          SELECT u.id,
-                 %s,
-                 pk_payer.value as fee_payer,
-@@ -712,25 +707,20 @@ module Sql = struct
- 
-       let secondary_sequence_no (_, _, _, secondary_seq_no) = secondary_seq_no
- 
--      let typ = Caqti_type.(tup4 (option int64) string int int)
-+      let typ = Caqti_type.(t4 (option int64) string int int)
-     end
- 
-     let typ =
-       Caqti_type.(
--        tup3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
-+        t3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
- 
-     let query =
-       let fields =
--        String.concat ~sep:","
--        @@ List.map
--             ~f:(fun n -> "i." ^ n)
--             Archive_lib.Processor.Internal_command.Fields.names
--      in
--      Caqti_request.collect
--        Caqti_type.(tup2 int string)
--        typ
--        (sprintf
--           {|
-+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "i." ^ n)
-+          Archive_lib.Processor.Internal_command.Fields.names in
-+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
-+      (sprintf
-+        {|
-          SELECT DISTINCT ON (i.hash,i.command_type,bic.sequence_no,bic.secondary_sequence_no)
-            i.id,
-            %s,
-@@ -813,10 +803,10 @@ module Sql = struct
-             ]
-     end
- 
--    let typ = Caqti_type.(tup2 int Extras.typ)
-+    let typ = Caqti_type.(t2 int Extras.typ)
- 
-     let query =
--      Caqti_request.collect Caqti_type.int typ
-+      Mina_caqti.collect_req Caqti_type.int typ
-         {| 
-          SELECT zc.id,
-                 zc.memo,
-@@ -857,20 +847,15 @@ module Sql = struct
- 
-     let typ =
-       Caqti_type.(
--        tup2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
-+        t2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
- 
-     let query =
-       let fields =
--        String.concat ~sep:","
--        @@ List.map
--             ~f:(fun n -> "zaub." ^ n)
--             Archive_lib.Processor.Zkapp_account_update_body.Fields.names
--      in
--      Caqti_request.collect
--        Caqti_type.(tup3 int string int)
--        typ
--        (sprintf
--           {|
-+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "zaub." ^ n)
-+          Archive_lib.Processor.Zkapp_account_update_body.Fields.names in
-+      Mina_caqti.collect_req Caqti_type.(t3 int string int) typ
-+      (sprintf
-+        {|
-          SELECT %s,
-                 pk.value as account,
-                 bzc.status
-diff --git a/src/app/rosetta/lib/construction.ml b/src/app/rosetta/lib/construction.ml
-index 90297f8b17..af035097f8 100644
---- a/src/app/rosetta/lib/construction.ml
-+++ b/src/app/rosetta/lib/construction.ml
-@@ -866,7 +866,9 @@ module Submit = struct
-         Caqti_type.custom ~encode ~decode (to_rep spec)
- 
-       let query =
--        Caqti_request.find_opt params_typ Caqti_type.string
-+        Mina_caqti.find_opt_req
-+          params_typ
-+          Caqti_type.string
-           {sql| SELECT uc.id FROM user_commands uc
-                 INNER JOIN public_keys AS pks ON pks.id = uc.source_id
-                 INNER JOIN public_keys AS pkr ON pkr.id = uc.receiver_id
-diff --git a/src/app/rosetta/lib/network.ml b/src/app/rosetta/lib/network.ml
-index 420d3569ac..01a963e7af 100644
---- a/src/app/rosetta/lib/network.ml
-+++ b/src/app/rosetta/lib/network.ml
-@@ -75,10 +75,9 @@ end
- 
- module Sql = struct
-   let oldest_block_query =
--    Caqti_request.find Caqti_type.unit
--      Caqti_type.(tup2 int64 string)
--      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, \
--       state_hash ASC LIMIT 1"
-+    Mina_caqti.find_req Caqti_type.unit
-+      Caqti_type.(t2 int64 string)
-+      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, state_hash ASC LIMIT 1"
- 
-   let max_height_delta =
-     match Sys.getenv "MINA_ROSETTA_MAX_HEIGHT_DELTA" with
-@@ -88,10 +87,10 @@ module Sql = struct
-         0L
- 
-   let latest_block_query =
--    Caqti_request.find Caqti_type.unit
--      Caqti_type.(tup3 int64 string int64)
--      (sprintf
--         {sql| SELECT height, state_hash, timestamp FROM blocks b
-+    Mina_caqti.find_req
-+      Caqti_type.unit
-+      Caqti_type.(t3 int64 string int64)
-+      (sprintf {sql| SELECT height, state_hash, timestamp FROM blocks b
-                      WHERE height = (select MAX(height) - %Ld FROM blocks)
-                      ORDER BY timestamp ASC, state_hash ASC
-                      LIMIT 1
-diff --git a/src/app/rosetta/lib/pg_data.ml b/src/app/rosetta/lib/pg_data.ml
-index 15065b1fa3..699b661aa4 100644
---- a/src/app/rosetta/lib/pg_data.ml
-+++ b/src/app/rosetta/lib/pg_data.ml
-@@ -1,7 +1,7 @@
- (* pg_data.ml -- Postgres data *)
- 
- let query_connection_count =
--  Caqti_request.find Caqti_type.unit Caqti_type.int64
-+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-     {sql| SELECT count(*) FROM pg_stat_activity
-               WHERE state = 'active'
-         |sql}
-@@ -10,7 +10,7 @@ let run_connection_count (module Conn : Caqti_async.CONNECTION) =
-   Conn.find query_connection_count
- 
- let query_lock_count =
--  Caqti_request.find Caqti_type.unit Caqti_type.int64
-+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
-     {sql| SELECT count(*) FROM pg_locks
-               WHERE mode = 'SIReadLock'
-         |sql}
-diff --git a/src/app/rosetta/lib/rosetta.ml b/src/app/rosetta/lib/rosetta.ml
-index c1e675b34a..965e68e2a7 100644
---- a/src/app/rosetta/lib/rosetta.ml
-+++ b/src/app/rosetta/lib/rosetta.ml
-@@ -187,7 +187,10 @@ let command =
-               "MINA_ROSETTA_MAX_DB_POOL_SIZE not set or invalid. Please set \
-                this to a number (try 64 or 128)"
-         in
--        match Caqti_async.connect_pool ~max_size:max_pool_size archive_uri with
-+        match Caqti_async.connect_pool       ~pool_config:
-+        Caqti_pool_config.(
-+          merge_left (default_from_env ()) (create ~max_size:max_pool_size ()))
-+ archive_uri with
-         | Error e ->
-             [%log error]
-               ~metadata:[ ("error", `String (Caqti_error.show e)) ]
-diff --git a/src/app/swap_bad_balances/sql.ml b/src/app/swap_bad_balances/sql.ml
-index 82ec136a10..d8d6172857 100644
---- a/src/app/swap_bad_balances/sql.ml
-+++ b/src/app/swap_bad_balances/sql.ml
-@@ -5,8 +5,8 @@ open Async
- module Receiver_balances = struct
-   (* find receiver balances for combined fee transfer *)
-   let query_ids_from_fee_transfer =
--    Caqti_request.collect
--      Caqti_type.(tup2 string int)
-+    Mina_caqti.collect_req
-+      Caqti_type.(t2 string int)
-       Caqti_type.(int)
-       {sql| SELECT bic.receiver_balance
-             FROM blocks_internal_commands bic
-@@ -25,8 +25,8 @@ module Receiver_balances = struct
-     (* if duplicates, any is acceptable *)
-     match%bind
-       Conn.find_opt
--        (Caqti_request.find_opt
--           Caqti_type.(tup2 int int64)
-+        (Mina_caqti.find_opt_req
-+           Caqti_type.(t2 int int64)
-            Caqti_type.int
-            {sql| SELECT id
-                           FROM balances
-@@ -40,8 +40,8 @@ module Receiver_balances = struct
-         return id
-     | None ->
-         Conn.find
--          (Caqti_request.find
--             Caqti_type.(tup2 int int64)
-+          (Mina_caqti.find_req
-+             Caqti_type.(t2 int int64)
-              Caqti_type.int
-              "INSERT INTO balances (public_key_id,balance) VALUES ($1,$2) \
-               RETURNING id" )
-@@ -49,9 +49,9 @@ module Receiver_balances = struct
- 
-   let load (module Conn : Caqti_async.CONNECTION) id =
-     Conn.find
--      (Caqti_request.find
-+      (Mina_caqti.find_req
-          Caqti_type.(int)
--         Caqti_type.(tup2 int int64)
-+         Caqti_type.(t2 int int64)
-          {sql| SELECT public_key_id,balance
-             FROM balances
-             WHERE id = $1
-@@ -59,8 +59,8 @@ module Receiver_balances = struct
-       id
- 
-   let query_swap_in_new_balance =
--    Caqti_request.exec
--      Caqti_type.(tup4 string int int int)
-+    Mina_caqti.exec_req
-+      Caqti_type.(t4 string int int int)
-       {sql| UPDATE blocks_internal_commands bic SET receiver_balance = $4
-             FROM blocks b
-             WHERE b.id = bic.block_id
-diff --git a/src/lib/mina_caqti/mina_caqti.ml b/src/lib/mina_caqti/mina_caqti.ml
-index b1e49d9bcb..7dee307b08 100644
---- a/src/lib/mina_caqti/mina_caqti.ml
-+++ b/src/lib/mina_caqti/mina_caqti.ml
-@@ -5,15 +5,6 @@ open Core_kernel
- open Caqti_async
- open Mina_base
- 
--type _ Caqti_type.field +=
--  | Array_nullable_int : int option array Caqti_type.field
--
--type _ Caqti_type.field +=
--  | Array_nullable_int64 : int64 option array Caqti_type.field
--
--type _ Caqti_type.field +=
--  | Array_nullable_string : string option array Caqti_type.field
--
- module Type_spec = struct
-   type (_, _) t =
-     | [] : (unit, unit) t
-@@ -25,7 +16,7 @@ module Type_spec = struct
-      | [] ->
-          (Caqti_type.unit : tuple Caqti_type.t)
-      | rep :: spec ->
--         Caqti_type.tup2 rep (to_rep spec)
-+         Caqti_type.t2 rep (to_rep spec)
- 
-   let rec hlist_to_tuple :
-             'hlist 'tuple.
-@@ -93,59 +84,14 @@ let make_coding (type a) ~(elem_to_string : a -> string)
-   in
-   (encode, decode)
- 
--(* register coding for nullable int arrays *)
--let () =
--  let open Caqti_type.Field in
--  let rep = Caqti_type.String in
-+(** this type may require type annotations in queries, eg.
-+   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
-+*)
-+let array_nullable_int_typ =
-   let encode, decode =
-     make_coding ~elem_to_string:Int.to_string ~elem_of_string:Int.of_string
-   in
--  let get_coding : type a. _ -> a t -> a coding =
--   fun _ -> function
--    | Array_nullable_int ->
--        Coding { rep; encode; decode }
--    | _ ->
--        assert false
--  in
--  define_coding Array_nullable_int { get_coding }
--
--(* register coding for nullable int64 arrays *)
--let () =
--  let open Caqti_type.Field in
--  let rep = Caqti_type.String in
--  let encode, decode =
--    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
--  in
--  let get_coding : type a. _ -> a t -> a coding =
--   fun _ -> function
--    | Array_nullable_int64 ->
--        Coding { rep; encode; decode }
--    | _ ->
--        assert false
--  in
--  define_coding Array_nullable_int64 { get_coding }
--
--(* register coding for nullable string arrays *)
--let () =
--  let open Caqti_type.Field in
--  let rep = Caqti_type.String in
--  let encode, decode =
--    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
--  in
--  let get_coding : type a. _ -> a t -> a coding =
--   fun _ -> function
--    | Array_nullable_string ->
--        Coding { rep; encode; decode }
--    | _ ->
--        assert false
--  in
--  define_coding Array_nullable_string { get_coding }
--
--(* this type may require type annotations in queries, eg.
--   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
--*)
--let array_nullable_int_typ : int option array Caqti_type.t =
--  Caqti_type.field Array_nullable_int
-+  Caqti_type.custom ~encode ~decode Caqti_type.string
- 
- let array_int_typ : int array Caqti_type.t =
-   let open Result.Let_syntax in
-@@ -158,11 +104,14 @@ let array_int_typ : int array Caqti_type.t =
-   in
-   Caqti_type.custom array_nullable_int_typ ~encode ~decode
- 
--(* this type may require type annotations in queries, eg.
-+(** this type may require type annotations in queries, eg.
-    `SELECT id FROM zkapp_states WHERE element_ids = ?::bigint[]`
- *)
--let array_nullable_int64_typ : int64 option array Caqti_type.t =
--  Caqti_type.field Array_nullable_int64
-+let array_nullable_int64_typ =
-+  let encode, decode =
-+    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
-+  in
-+  Caqti_type.custom ~encode ~decode Caqti_type.string
- 
- let array_int64_typ : int64 array Caqti_type.t =
-   let open Result.Let_syntax in
-@@ -175,11 +124,14 @@ let array_int64_typ : int64 array Caqti_type.t =
-   in
-   Caqti_type.custom array_nullable_int64_typ ~encode ~decode
- 
--(* this type may require type annotations in queries, e.g.
-+(** this type may require type annotations in queries, e.g.
-    `SELECT id FROM zkapp_states WHERE element_ids = ?::string[]`
- *)
--let array_nullable_string_typ : string option array Caqti_type.t =
--  Caqti_type.field Array_nullable_string
-+let array_nullable_string_typ =
-+  let encode, decode =
-+    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
-+  in
-+  Caqti_type.custom ~encode ~decode Caqti_type.string
- 
- let array_string_typ : string array Caqti_type.t =
-   let open Result.Let_syntax in
-@@ -283,7 +235,7 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
-     (module Conn : CONNECTION) (value : 'cols) =
-   let open Deferred.Result.Let_syntax in
-   Conn.find_opt
--    ( Caqti_request.find_opt (snd cols) (snd select)
-+    ( Caqti_request.Infix.(snd cols ->? snd select)
-     @@ select_cols ~select:(fst select) ~table_name ?tannot ~cols:(fst cols) ()
-     )
-     value
-@@ -292,7 +244,7 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
-       return id
-   | None ->
-       Conn.find
--        ( Caqti_request.find (snd cols) (snd select)
-+        ( Caqti_request.Infix.(snd cols ->! snd select)
-         @@ insert_into_cols ~returning:(fst select) ~table_name ?tannot
-              ~cols:(fst cols) () )
-         value
-@@ -314,7 +266,11 @@ let insert_multi_into_col ~(table_name : string)
-       (sep_by_comma ~parenthesis:true values)
-       (fst col)
-   in
--  let%bind () = Conn.exec (Caqti_request.exec Caqti_type.unit insert) () in
-+  let%bind () =
-+    Conn.exec
-+      (Caqti_request.Infix.(Caqti_type.unit ->. Caqti_type.unit) insert)
-+      ()
-+  in
-   let search =
-     sprintf
-       {sql| SELECT %s, id FROM %s
-@@ -322,9 +278,8 @@ let insert_multi_into_col ~(table_name : string)
-       (fst col) table_name (fst col) (sep_by_comma values)
-   in
-   Conn.collect_list
--    (Caqti_request.collect Caqti_type.unit
--       Caqti_type.(tup2 (snd col) int)
--       search )
-+    Caqti_request.Infix.(
-+      (Caqti_type.unit ->* Caqti_type.(t2 (snd col) int)) search)
-     ()
- 
- let query ~f pool =
-@@ -361,3 +316,11 @@ let get_zkapp_or_ignore (item_opt : 'arg option)
- let get_opt_item (arg_opt : 'arg option)
-     ~(f : 'arg -> ('res, _) Deferred.Result.t) : 'res option Deferred.t =
-   make_get_opt ~of_option:Fn.id ~f arg_opt
-+
-+let find_req t u s = Caqti_request.Infix.(t ->! u) s
-+
-+let find_opt_req t u s = Caqti_request.Infix.(t ->? u) s
-+
-+let collect_req t u s = Caqti_request.Infix.(t ->* u) s
-+
-+let exec_req t s = Caqti_request.Infix.(t ->. Caqti_type.unit) s
diff --git a/flake.lock b/flake.lock
index c1271a6825..dff4183b0e 100644
--- a/flake.lock
+++ b/flake.lock
@@ -324,11 +324,11 @@
     "opam-repository": {
       "flake": false,
       "locked": {
-        "lastModified": 1708601497,
-        "narHash": "sha256-mDYINTjOiYLN4wT5fGlWTvHFQdWkzY46XUuZWKgmJxY=",
+        "lastModified": 1706815373,
+        "narHash": "sha256-CiwJOt27w7ecb27gMddbVO1ATwWz+KB9upiGZ3TRHqU=",
         "owner": "ocaml",
         "repo": "opam-repository",
-        "rev": "90d8c520a4f0b035ac51e267a8b33739c5a78b5a",
+        "rev": "c2acc9437350903c72eab1fabf1e1b6f74134667",
         "type": "github"
       },
       "original": {
diff --git a/opam.export b/opam.export
index 130eb77140..c994ad7370 100644
--- a/opam.export
+++ b/opam.export
@@ -8,7 +8,6 @@ roots: [
   "bitstring.4.1.0"
   "camlp4.4.14+1"
   "capnp.3.4.0"
-  "check_opam_switch.~dev"
   "cohttp-async.5.0.0"
   "core_extended.v0.14.0"
   "extlib.1.7.8"
@@ -73,7 +72,6 @@ installed: [
   "caqti-async.2.0.1"
   "caqti-driver-postgresql.2.0.1"
   "charInfo_width.1.1.0"
-  "check_opam_switch.~dev"
   "cmdliner.1.0.3"
   "cohttp.5.0.0"
   "cohttp-async.5.0.0"
@@ -268,7 +266,6 @@ installed: [
 pinned: [
   "async_kernel.v0.14.0"
   "capnp.3.4.0"
-  "check_opam_switch.~dev"
   "graphql_ppx.1.2.2"
   "rpc_parallel.v0.14.0"
 ]
@@ -352,42 +349,6 @@ Cap'n Proto is a multi-language code generation framework designed for
       "sha256=03aac06742f3d4ec8a189f0db65d46393b7497e8637ece15c39ff4ec01117b8b"
   }
 }
-package "check_opam_switch" {
-  opam-version: "2.0"
-  version: "~dev"
-  synopsis:
-    "A tool to check that the current opam environment is up to date with an opam.export file"
-  description:
-    "A tool to check that the current opam environment is up to date with an opam.export file"
-  maintainer: "yves.stan.lecornec@tweag.io"
-  depends: [
-    "dune" {>= "3.3"}
-    "opam-core" {>= "2.0.0"}
-    "opam-format" {>= "2.0.0"}
-    "minicli" {>= "5.0.0"}
-    "odoc" {with-doc}
-  ]
-  build: [
-    ["dune" "subst"] {dev}
-    [
-      "dune"
-      "build"
-      "-p"
-      name
-      "-j"
-      jobs
-      "@install"
-      "@runtest" {with-test}
-      "@doc" {with-doc}
-    ]
-  ]
-  url {
-    src:
-      "https://github.com/tweag/check_opam_switch/archive/d0aa49884e0f9fd4bbb2cd1a32b798a12f84b603.tar.gz"
-    checksum:
-      "sha256=24ab29ea4aff9da9d649f0b577c5d4e27ce2bef51058e139965cc9be25494a46"
-  }
-}
 package "graphql_ppx" {
   opam-version: "2.0"
   version: "1.2.2"
diff --git a/scripts/pin-external-packages.sh b/scripts/pin-external-packages.sh
index 84e615b527..f531d8e43d 100755
--- a/scripts/pin-external-packages.sh
+++ b/scripts/pin-external-packages.sh
@@ -10,3 +10,5 @@ for pkg in $PACKAGES; do
     echo "Pinning package" $pkg
     opam pin -y add src/external/$pkg
 done
+
+opam pin add -y https://github.com/tweag/check_opam_switch.git#d0aa49884e0f9fd4bbb2cd1a32b798a12
\ No newline at end of file
diff --git a/src/app/archive/lib/load_data.ml b/src/app/archive/lib/load_data.ml
index 9b478576cc..4b4faf66dd 100644
--- a/src/app/archive/lib/load_data.ml
+++ b/src/app/archive/lib/load_data.ml
@@ -93,7 +93,7 @@ let update_of_id pool update_id =
   let with_pool ~f arg =
     let open Mina_caqti in
     Pool.use
-      (fun (module Conn : CONNECTION) -> f (module Conn : CONNECTION) arg)
+      (fun (module Conn : Mina_caqti.CONNECTION) -> f (module Conn : Mina_caqti.CONNECTION) arg)
       pool
   in
   let%bind { app_state_id
@@ -638,7 +638,7 @@ let get_account_accessed ~pool (account : Processor.Accounts_accessed.t) :
   let with_pool ~f arg =
     let open Mina_caqti in
     Pool.use
-      (fun (module Conn : CONNECTION) -> f (module Conn : CONNECTION) arg)
+      (fun (module Conn : Mina_caqti.CONNECTION) -> f (module Conn : Mina_caqti.CONNECTION) arg)
       pool
   in
   let pk_of_id = pk_of_id pool in
diff --git a/src/app/archive/lib/metrics.ml b/src/app/archive/lib/metrics.ml
index 29886857ce..bf15430c54 100644
--- a/src/app/archive/lib/metrics.ml
+++ b/src/app/archive/lib/metrics.ml
@@ -14,7 +14,7 @@ let default_missing_blocks_width = 2000
 
 module Max_block_height = struct
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       "SELECT GREATEST(0, MAX(height)) FROM blocks"
 
   let update (module Conn : Mina_caqti.CONNECTION) metric_server =
@@ -30,7 +30,7 @@ end
 module Missing_blocks = struct
   (*A block is missing if there is no entry for a specific height. However, if there is an entry then it doesn't necessarily mean that it is part of the main chain. Unparented_blocks will show value > 1 in that case. Look for the last 2000 blocks*)
   let query missing_blocks_width =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       (Core_kernel.sprintf
          {sql| 
         SELECT COUNT( * )
@@ -55,7 +55,7 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       {sql|
            SELECT COUNT( * ) FROM blocks
            WHERE parent_id IS NULL
diff --git a/src/app/archive/lib/processor.ml b/src/app/archive/lib/processor.ml
index 8b5be97b3b..313b424f55 100644
--- a/src/app/archive/lib/processor.ml
+++ b/src/app/archive/lib/processor.ml
@@ -28,6 +28,7 @@ open Mina_block
 open Pipe_lib
 open Signature_lib
 open Pickles_types
+open Mina_caqti
 
 let applied_str = "applied"
 
@@ -50,7 +51,7 @@ let load_copy' ~default ~local_copies ~typ ~query ~load_elt
   | None ->
       let t_to_id = ensure_local_copies (module Conn) ~default local_copies in
       let%bind all_rows =
-        Conn.collect_list (Caqti_request.collect Caqti_type.unit typ query) ()
+        Conn.collect_list (Mina_caqti.collect_req Caqti_type.unit typ query) ()
       in
       let%map () =
         Deferred.List.iter (unwrap all_rows) ~f:(fun row ->
@@ -81,7 +82,7 @@ module Public_key = struct
         ; key_to_id = Hashtbl.create (module Public_key.Compressed)
         } )
       ~local_copies
-      ~typ:Caqti_type.(tup2 int string)
+      ~typ:Caqti_type.(t2 int string)
       ~query:{sql| SELECT id, value FROM public_keys |sql}
       ~load_elt:(fun { id_to_key; key_to_id } (id, keytext) ->
         let key = Public_key.Compressed.of_base58_check_exn keytext in
@@ -114,7 +115,7 @@ module Public_key = struct
         let public_key = Public_key.Compressed.to_base58_check t in
         let%map.Deferred.Result new_id =
           Conn.find
-            (Caqti_request.find Caqti_type.string Caqti_type.int
+            (Mina_caqti.find_req Caqti_type.string Caqti_type.int
                "INSERT INTO public_keys (value) VALUES (?) RETURNING id" )
             public_key
         in
@@ -160,7 +161,7 @@ module Token = struct
         ; value_to_id = Hashtbl.create (module String)
         } )
       ~local_copies
-      ~typ:Caqti_type.(tup4 int string (option int) (option int))
+      ~typ:Caqti_type.(t4 int string (option int) (option int))
       ~query:
         {sql| SELECT id, value, owner_public_key_id, owner_token_id FROM tokens |sql}
       ~load_elt:(fun { id_to_t; value_to_id }
@@ -212,8 +213,8 @@ module Token = struct
         } ;
 
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          Caqti_type.int
          {sql| UPDATE tokens
                SET owner_public_key_id = $2, owner_token_id = $3
@@ -295,7 +296,7 @@ module Voting_for = struct
     load_copy'
       ~default:(fun () -> Hashtbl.create (module String))
       ~local_copies
-      ~typ:Caqti_type.(tup2 int string)
+      ~typ:Caqti_type.(t2 int string)
       ~query:{sql| SELECT id, value FROM voting_for |sql}
       ~load_elt:(fun t_to_id (id, value) ->
         Hashtbl.add_exn t_to_id ~key:value ~data:id ;
@@ -320,7 +321,7 @@ module Voting_for = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -340,7 +341,7 @@ module Token_symbols = struct
     load_copy'
       ~default:(fun () -> Hashtbl.create (module String))
       ~local_copies
-      ~typ:Caqti_type.(tup2 int string)
+      ~typ:Caqti_type.(t2 int string)
       ~query:{sql| SELECT id, value FROM token_symbols |sql}
       ~load_elt:(fun t_to_id (id, value) ->
         Hashtbl.add_exn t_to_id ~key:value ~data:id ;
@@ -365,7 +366,7 @@ module Token_symbols = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -398,7 +399,7 @@ module Account_identifiers = struct
             type t = int * int [@@deriving compare, sexp, hash]
           end ) )
       ~local_copies
-      ~typ:Caqti_type.(tup3 int int int)
+      ~typ:Caqti_type.(t3 int int int)
       ~query:
         {sql| SELECT id,public_key_id,token_id FROM account_identifiers |sql}
       ~load_elt:(fun t_to_id (id, public_key_id, token_id) ->
@@ -454,7 +455,7 @@ module Account_identifiers = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -472,7 +473,7 @@ module Zkapp_field = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "field" ]) )
       id
 end
@@ -497,7 +498,7 @@ module Zkapp_field_array = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
+      (find_req Caqti_type.int Mina_caqti.array_int_typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
       id
 end
@@ -569,7 +570,7 @@ module Zkapp_states_nullable = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -630,7 +631,7 @@ module Zkapp_states = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -672,7 +673,7 @@ module Zkapp_action_states = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -694,7 +695,7 @@ module Zkapp_verification_key_hashes = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -729,7 +730,7 @@ module Zkapp_verification_keys = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -757,7 +758,7 @@ module Protocol_versions = struct
     load_copy'
       ~default:(fun () -> Hashtbl.create (module T))
       ~local_copies
-      ~typ:Caqti_type.(tup4 int int int int)
+      ~typ:Caqti_type.(t4 int int int int)
       ~query:
         {sql| SELECT id, transaction, network, patch FROM protocol_versions |sql}
       ~load_elt:(fun t_to_id (id, transaction, network, patch) ->
@@ -783,8 +784,8 @@ module Protocol_versions = struct
 
   let find (module Conn : Mina_caqti.CONNECTION) ~transaction ~network ~patch =
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
       (transaction, network, patch)
@@ -801,7 +802,7 @@ module Protocol_versions = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -954,7 +955,7 @@ module Zkapp_permissions = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (Mina_caqti.find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
@@ -1077,7 +1078,7 @@ module Zkapp_timing_info = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1098,7 +1099,7 @@ module Zkapp_uri = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -1191,7 +1192,7 @@ module Zkapp_updates = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1219,7 +1220,7 @@ module Zkapp_balance_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1248,7 +1249,7 @@ module Zkapp_nonce_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1332,7 +1333,7 @@ module Zkapp_account_precondition = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1360,7 +1361,7 @@ module Zkapp_token_id_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1392,7 +1393,7 @@ module Zkapp_timestamp_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1420,7 +1421,7 @@ module Zkapp_length_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1448,7 +1449,7 @@ module Zkapp_amount_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1483,7 +1484,7 @@ module Zkapp_global_slot_bounds = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1550,13 +1551,13 @@ module Timing_info = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (Mina_caqti.find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
   let load_opt (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.int typ
+      (Mina_caqti.find_opt_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
@@ -1578,7 +1579,7 @@ module Timing_info = struct
       Account_identifiers.find (module Conn) account_id
     in
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          {sql| SELECT account_identifier_id, initial_minimum_balance,
                       cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -1590,7 +1591,7 @@ module Timing_info = struct
   let find_by_account_identifier_id_opt (module Conn : Mina_caqti.CONNECTION)
       account_identifier_id =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.int typ
+      (find_opt_req Caqti_type.int typ
          {sql| SELECT account_identifier_id, initial_minimum_balance,
                       cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -1638,7 +1639,7 @@ module Timing_info = struct
     | None ->
         let%map new_id =
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (Mina_caqti.find_req typ Caqti_type.int
                {sql| INSERT INTO timing_info
                     (account_identifier_id,initial_minimum_balance,
                      cliff_time, cliff_amount, vesting_period, vesting_increment)
@@ -1655,13 +1656,13 @@ module Snarked_ledger_hash = struct
   let find (module Conn : Mina_caqti.CONNECTION) (t : Frozen_ledger_hash.t) =
     let hash = Frozen_ledger_hash.to_base58_check t in
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (find_req Caqti_type.string Caqti_type.int
          "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
       hash
 
   let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
       id
 
@@ -1671,7 +1672,7 @@ module Snarked_ledger_hash = struct
     let hash = Frozen_ledger_hash.to_base58_check t in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (find_opt_req Caqti_type.string Caqti_type.int
            "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
         hash
     with
@@ -1679,13 +1680,13 @@ module Snarked_ledger_hash = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
+          (find_req Caqti_type.string Caqti_type.int
              "INSERT INTO snarked_ledger_hashes (value) VALUES (?) RETURNING id" )
           hash
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
       id
 end
@@ -1721,7 +1722,7 @@ module Zkapp_epoch_ledger = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1781,7 +1782,7 @@ module Zkapp_epoch_data = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1856,7 +1857,7 @@ module Zkapp_network_precondition = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1948,7 +1949,7 @@ module Zkapp_events = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
+      (find_req Caqti_type.int Mina_caqti.array_int_typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
       id
 end
@@ -2100,7 +2101,7 @@ module Zkapp_account_update_body = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -2131,7 +2132,7 @@ module Zkapp_account_update = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -2175,7 +2176,7 @@ module Zkapp_fee_payer_body = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -2232,7 +2233,7 @@ module Epoch_data = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -2273,13 +2274,13 @@ module User_command = struct
     let find (module Conn : Mina_caqti.CONNECTION)
         ~(transaction_hash : Transaction_hash.t) ~v1_transaction_hash =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (find_opt_req Caqti_type.string Caqti_type.int
            (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()) )
         (txn_hash_to_base58_check transaction_hash ~v1_transaction_hash)
 
     let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (find_req Caqti_type.int typ
            (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
         id
 
@@ -2324,7 +2325,7 @@ module User_command = struct
           in
           (* TODO: Converting these uint64s to int64 can overflow; see #5419 *)
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "command_type" -> Some "user_command_type" | _ -> None )
@@ -2371,7 +2372,7 @@ module User_command = struct
             Public_key.add_if_doesn't_exist (module Conn) user_cmd.receiver
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "command_type" -> Some "user_command_type" | _ -> None )
@@ -2412,14 +2413,14 @@ module User_command = struct
     let find_opt (module Conn : Mina_caqti.CONNECTION)
         ~(transaction_hash : Transaction_hash.t) =
       Conn.find_opt
-        ( Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        ( find_opt_req Caqti_type.string Caqti_type.int
         @@ Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()
         )
         (Transaction_hash.to_base58_check transaction_hash)
 
     let load (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find
-        ( Caqti_request.find Caqti_type.int typ
+        ( find_req Caqti_type.int typ
         @@ Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names )
         id
 
@@ -2497,8 +2498,8 @@ module Internal_command = struct
       ~(v1_transaction_hash : bool) ~(transaction_hash : Transaction_hash.t)
       ~(command_type : string) =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 string string)
+      (find_opt_req
+         Caqti_type.(t2 string string)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name
             ~tannot:(function
@@ -2509,7 +2510,7 @@ module Internal_command = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
@@ -2530,7 +2531,7 @@ module Internal_command = struct
           Public_key.add_if_doesn't_exist (module Conn) internal_cmd.receiver
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                 ~tannot:(function
                   | "command_type" -> Some "internal_command_type" | _ -> None
@@ -2575,7 +2576,7 @@ module Fee_transfer = struct
       in
       Ok { kind; receiver_id; fee; hash }
     in
-    let rep = Caqti_type.(tup4 string int int64 string) in
+    let rep = Caqti_type.(t4 string int int64 string) in
     Caqti_type.custom ~encode ~decode rep
 
   let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
@@ -2597,7 +2598,7 @@ module Fee_transfer = struct
           Public_key.add_if_doesn't_exist (module Conn) pk
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (command_type, receiver_id, fee, hash)
                    VALUES (?::internal_command_type, ?, ?, ?)
@@ -2625,7 +2626,7 @@ module Coinbase = struct
     let decode (_, receiver_id, amount, hash) =
       Ok { receiver_id; amount; hash }
     in
-    let rep = Caqti_type.(tup4 string int int64 string) in
+    let rep = Caqti_type.(t4 string int int64 string) in
     Caqti_type.custom ~encode ~decode rep
 
   let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
@@ -2646,7 +2647,7 @@ module Coinbase = struct
           Public_key.add_if_doesn't_exist (module Conn) pk
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (command_type, receiver_id, fee, hash)
                    VALUES (?::internal_command_type, ?, ?, ?)
@@ -2685,7 +2686,7 @@ module Block_and_internal_command = struct
       Option.map ~f:Transaction_status.Failure.to_string failure_reason
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (exec_req typ
          {sql| INSERT INTO blocks_internal_commands
                  (block_id,
                  internal_command_id,
@@ -2706,8 +2707,8 @@ module Block_and_internal_command = struct
   let find (module Conn : Mina_caqti.CONNECTION) ~block_id ~internal_command_id
       ~sequence_no ~secondary_sequence_no =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup4 int int int int)
+      (find_opt_req
+         Caqti_type.(t4 int int int int)
          Caqti_type.string
          {sql| SELECT 'exists' FROM blocks_internal_commands
                WHERE block_id = $1
@@ -2738,8 +2739,8 @@ module Block_and_internal_command = struct
       ~sequence_no ~secondary_sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup4 int int int int)
+      (find_req
+         Caqti_type.(t4 int int int int)
          typ
          (sprintf
             {sql| SELECT %s FROM blocks_internal_commands
@@ -2774,7 +2775,7 @@ module Block_and_signed_command = struct
       Option.map ~f:Transaction_status.Failure.to_string failure_reason
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (exec_req typ
          {sql| INSERT INTO blocks_user_commands
                  (block_id,
                  user_command_id,
@@ -2804,8 +2805,8 @@ module Block_and_signed_command = struct
     let open Deferred.Result.Let_syntax in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup3 int int int)
+        (find_opt_req
+           Caqti_type.(t3 int int int)
            Caqti_type.string
            {sql| SELECT 'exists' FROM blocks_user_commands
                  WHERE block_id = $1
@@ -2825,8 +2826,8 @@ module Block_and_signed_command = struct
       ~sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          typ
          (sprintf
             {sql| SELECT %s FROM blocks_user_commands
@@ -2861,7 +2862,7 @@ module Zkapp_account_update_failures = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name
             ~cols:[ "index"; "failures" ] ) )
       id
@@ -2904,8 +2905,7 @@ module Block_and_zkapp_command = struct
     in
     Mina_caqti.select_insert_into_cols
       ~select:
-        ( "block_id, zkapp_command_id, sequence_no"
-        , Caqti_type.(tup3 int int int) )
+        ("block_id, zkapp_command_id, sequence_no", Caqti_type.(t3 int int int))
       ~table_name
       ~cols:
         ( [ "block_id"
@@ -2929,8 +2929,8 @@ module Block_and_zkapp_command = struct
       ~sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          typ
          (Mina_caqti.select_cols ~table_name ~select:comma_cols
             ~cols:[ "block_id"; "zkapp_command_id"; "sequence_no" ]
@@ -2940,7 +2940,7 @@ module Block_and_zkapp_command = struct
   let all_from_block (module Conn : Mina_caqti.CONNECTION) ~block_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          (Mina_caqti.select_cols ~table_name ~select:comma_cols
             ~cols:[ "block_id" ] () ) )
       block_id
@@ -3012,7 +3012,7 @@ module Zkapp_account = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -3065,7 +3065,7 @@ module Accounts_accessed = struct
             type t = int * int [@@deriving compare, sexp, hash]
           end ) )
       ~local_copies
-      ~typ:Caqti_type.(tup2 int int)
+      ~typ:Caqti_type.(t2 int int)
       ~query:
         {sql| SELECT block_id,account_identifier_id FROM accounts_accessed |sql}
       ~load_elt:(fun exists_index key ->
@@ -3076,8 +3076,8 @@ module Accounts_accessed = struct
       ~account_identifier_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 int int)
+      (find_opt_req
+         Caqti_type.(t2 int int)
          typ
          (sprintf
             {sql| SELECT %s
@@ -3147,7 +3147,7 @@ module Accounts_accessed = struct
       in
       Hash_set.add exists_index (block_id, account_identifier_id) ;
       Mina_caqti.insert_assuming_new
-        ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
+        ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
         ~table_name ~cols:(Fields.names, typ)
         (module Conn)
         account_accessed
@@ -3163,7 +3163,7 @@ module Accounts_accessed = struct
   let all_from_block (module Conn : Mina_caqti.CONNECTION) block_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          (Mina_caqti.select_cols ~select:comma_cols ~table_name
             ~cols:[ "block_id" ] () ) )
       block_id
@@ -3188,7 +3188,7 @@ module Accounts_created = struct
     in
     let creation_fee = Currency.Fee.to_string creation_fee in
     Mina_caqti.select_insert_into_cols
-      ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
+      ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
       ~table_name ~cols:(Fields.names, typ)
       (module Conn)
       { block_id; account_identifier_id; creation_fee }
@@ -3203,7 +3203,7 @@ module Accounts_created = struct
 
   let all_from_block (module Conn : Mina_caqti.CONNECTION) block_id =
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          {sql| SELECT block_id, account_identifier_id, creation_fee
                FROM accounts_created
                WHERE block_id = ?
@@ -3270,14 +3270,14 @@ module Block = struct
       (State_hash.to_base58_check state_hash)
 
   let find (module Conn : Mina_caqti.CONNECTION) =
-    make_finder Conn.find Caqti_request.find
+    make_finder Conn.find Mina_caqti.find_req
 
   let find_opt (module Conn : Mina_caqti.CONNECTION) =
-    make_finder Conn.find_opt Caqti_request.find_opt
+    make_finder Conn.find_opt Mina_caqti.find_opt_req
 
   let load (module Conn : Mina_caqti.CONNECTION) ~id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name:"blocks" ~cols:Fields.names) )
       id
 
@@ -3382,7 +3382,7 @@ module Block = struct
         let blockchain_state = Protocol_state.blockchain_state protocol_state in
         let%bind block_id =
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "chain_status" ->
@@ -3764,9 +3764,7 @@ module Block = struct
     in
 
     (* we don't need to specify all types here, just the ones that sql may infer incorrectly *)
-    let field_name : type a. a Caqti_type.Field.t -> string option =
-      let open Caqti_type in
-      function
+    let field_name : type a. a Caqti_type.Field.t -> string option = function
       | Bool ->
           Some "BOOL"
       | Int ->
@@ -3779,39 +3777,36 @@ module Block = struct
           Some "BIGINT"
       | Float ->
           Some "FLOAT"
+      | String ->
+          Some "TEXT"
       | Enum name ->
           Some name
-      | _ ->
-          None
+      | Octets | Pdate | Ptime | Ptime_span ->
+          failwith "unsupported field type"
     in
 
     let rec type_field_names : type a. a Caqti_type.t -> string option list =
+      let open Caqti_type in
       function
-      | Unit ->
-          []
       | Field f ->
           [ field_name f ]
       | Option t ->
           type_field_names t
-      | Tup2 (at, bt) ->
-          List.concat [ type_field_names at; type_field_names bt ]
-      | Tup3 (at, bt, ct) ->
-          List.concat
-            [ type_field_names at; type_field_names bt; type_field_names ct ]
-      | Tup4 (at, bt, ct, dt) ->
-          List.concat
-            [ type_field_names at
-            ; type_field_names bt
-            ; type_field_names ct
-            ; type_field_names dt
-            ]
-      | Custom custom ->
-          type_field_names custom.rep
-    in
-
-    let rec render_field : type a. a Caqti_type.Field.t -> a -> string =
+      | Product (_, prod) ->
+          let rec loop : type a i. _ -> (a, i) product -> _ =
+           fun acc -> function
+            | Proj_end ->
+                List.concat (List.rev acc)
+            | Proj (t, _, prod) ->
+                loop (type_field_names t :: acc) prod
+          in
+          loop [] prod
+      | Annot (_, t) ->
+          type_field_names t
+    in
+
+    let render_field : type a. a Caqti_type.Field.t -> a -> string =
      fun typ value ->
-      let open Caqti_type in
       match typ with
       | Bool ->
           Bool.to_string value
@@ -3839,45 +3834,30 @@ module Block = struct
           (* we are ignoring the enum annotation in this context because it's not always valid to apply *)
           (* NOTE: we assume enum values do not contain special characters (eg "'") *)
           "'" ^ value ^ "'"
-      | _ -> (
-          match Caqti_type.Field.coding Conn.driver_info typ with
-          | None ->
-              failwithf "unable to render caqti field: %s"
-                (Caqti_type.Field.to_string typ)
-                ()
-          | Some (Coding coding) ->
-              render_field coding.rep
-                (Result.ok_or_failwith @@ coding.encode value) )
     in
     let rec render_type : type a. a Caqti_type.t -> a -> string list =
-     fun typ value ->
-      match typ with
-      | Unit ->
-          []
-      | Field f ->
-          [ render_field f value ]
-      | Option t -> (
-          match value with
-          | None ->
-              List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
-          | Some x ->
-              render_type t x )
-      | Tup2 (at, bt) ->
-          let a, b = value in
-          List.concat [ render_type at a; render_type bt b ]
-      | Tup3 (at, bt, ct) ->
-          let a, b, c = value in
-          List.concat [ render_type at a; render_type bt b; render_type ct c ]
-      | Tup4 (at, bt, ct, dt) ->
-          let a, b, c, d = value in
-          List.concat
-            [ render_type at a
-            ; render_type bt b
-            ; render_type ct c
-            ; render_type dt d
-            ]
-      | Custom custom ->
-          render_type custom.rep (Result.ok_or_failwith @@ custom.encode value)
+      let open Caqti_type in
+      fun typ value ->
+        match typ with
+        | Field f ->
+            [ render_field f value ]
+        | Option t -> (
+            match value with
+            | None ->
+                List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
+            | Some x ->
+                render_type t x )
+        | Product (_, prod) ->
+            let rec loop : type i. _ -> (a, i) product -> _ =
+             fun acc -> function
+              | Proj_end ->
+                  List.concat (List.rev acc)
+              | Proj (t, prj, prod) ->
+                  loop (render_type t (prj value) :: acc) prod
+            in
+            loop [] prod
+        | Annot (_, t) ->
+            render_type t value
     in
     let render_row (type a) (typ : a Caqti_type.t) (value : a) : string =
       "(" ^ String.concat ~sep:"," (render_type typ value) ^ ")"
@@ -3928,8 +3908,8 @@ module Block = struct
         in
         let%map entries =
           Conn.collect_list
-            (Caqti_request.collect Caqti_type.unit
-               Caqti_type.(tup2 typ int)
+            (Mina_caqti.collect_req Caqti_type.unit
+               Caqti_type.(t2 typ int)
                query )
             ()
         in
@@ -3947,7 +3927,7 @@ module Block = struct
           String.concat ~sep:"," @@ List.map ~f:(render_row typ) values
         in
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit Caqti_type.int
+          (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
              (sprintf "INSERT INTO %s (%s) VALUES %s RETURNING id" table
                 fields_sql values_sql ) )
           () )
@@ -4299,7 +4279,7 @@ module Block = struct
       let ids_sql = String.concat ~sep:"," ids in
       let parent_ids_sql = String.concat ~sep:"," parent_ids in
       Conn.exec
-        (Caqti_request.exec Caqti_type.unit
+        (Mina_caqti.exec_req Caqti_type.unit
            (sprintf
               "UPDATE %s AS b SET parent_id = data.parent_id FROM (SELECT \
                unnest(array[%s]) as id, unnest(array[%s]) as parent_id) AS \
@@ -4509,7 +4489,7 @@ module Block = struct
                 Some id )
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "sub_window_densities" ->
@@ -4670,8 +4650,8 @@ module Block = struct
   let set_parent_id_if_null (module Conn : Mina_caqti.CONNECTION) ~parent_hash
       ~(parent_id : int) =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 int string)
+      (exec_req
+         Caqti_type.(t2 int string)
          {sql| UPDATE blocks SET parent_id = ?
                WHERE parent_hash = ?
                AND parent_id IS NULL
@@ -4688,8 +4668,8 @@ module Block = struct
     in
     let columns = concat Fields.names in
     Conn.collect_list
-      (Caqti_request.collect
-         Caqti_type.(tup2 int int)
+      (collect_req
+         Caqti_type.(t2 int int)
          typ
          (sprintf
             {sql| WITH RECURSIVE chain AS (
@@ -4715,16 +4695,16 @@ module Block = struct
 
   let get_highest_canonical_block_opt (module Conn : Mina_caqti.CONNECTION) =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.unit
-         Caqti_type.(tup2 int int64)
+      (find_opt_req Caqti_type.unit
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' ORDER BY \
           height DESC LIMIT 1" )
 
   let get_nearest_canonical_block_above (module Conn : Mina_caqti.CONNECTION)
       height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height > ? ORDER BY height ASC LIMIT 1" )
       height
@@ -4732,23 +4712,23 @@ module Block = struct
   let get_nearest_canonical_block_below (module Conn : Mina_caqti.CONNECTION)
       height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height < ? ORDER BY height DESC LIMIT 1" )
       height
 
   let mark_as_canonical (module Conn : Mina_caqti.CONNECTION) ~state_hash =
     Conn.exec
-      (Caqti_request.exec Caqti_type.string
+      (exec_req Caqti_type.string
          "UPDATE blocks SET chain_status='canonical' WHERE state_hash = ?" )
       state_hash
 
   let mark_as_orphaned (module Conn : Mina_caqti.CONNECTION) ~state_hash ~height
       =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 string int64)
+      (exec_req
+         Caqti_type.(t2 string int64)
          {sql| UPDATE blocks SET chain_status='orphaned'
                WHERE height = $2
                AND state_hash <> $1
@@ -4837,7 +4817,7 @@ module Block = struct
       | None, Some num_blocks -> (
           match%map
             Conn.find_opt
-              (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+              (find_opt_req Caqti_type.unit Caqti_type.int
                  "SELECT MAX(height) FROM blocks" )
               ()
           with
@@ -4853,8 +4833,8 @@ module Block = struct
       let%bind () =
         (* Delete user commands from old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM user_commands\n\
               WHERE id IN\n\
               (SELECT user_command_id FROM blocks_user_commands\n\
@@ -4865,8 +4845,8 @@ module Block = struct
       let%bind () =
         (* Delete old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM blocks WHERE blocks.height < ? OR blocks.timestamp < \
               ?" )
           (height, timestamp)
@@ -4874,7 +4854,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned internal commands. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM internal_commands\n\
               WHERE id NOT IN\n\
               (SELECT internal_commands.id FROM internal_commands\n\
@@ -4885,7 +4865,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned snarked ledger hashes. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM snarked_ledger_hashes\n\
               WHERE id NOT IN\n\
               (SELECT snarked_ledger_hash_id FROM blocks)" )
@@ -4894,7 +4874,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned public keys. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM public_keys\n\
               WHERE id NOT IN (SELECT fee_payer_id FROM user_commands)\n\
               AND id NOT IN (SELECT source_id FROM user_commands)\n\
@@ -5319,7 +5299,7 @@ let setup_server ~metrics_server_port ~constraint_constants ~logger
           Strict_pipe.Writer.write extensional_block_writer extensional_block )
     ]
   in
-  match Mina_caqti.connect_pool ~max_size:30 postgres_address with
+  match Mina_caqti.connect_pool ~max_size:128 postgres_address with
   | Error e ->
       [%log error]
         "Failed to create a Caqti pool for Postgresql, see error: $error"
diff --git a/src/app/berkeley_migration/berkeley_migration.ml b/src/app/berkeley_migration/berkeley_migration.ml
index f8d8cba78e..7a5e923976 100644
--- a/src/app/berkeley_migration/berkeley_migration.ml
+++ b/src/app/berkeley_migration/berkeley_migration.ml
@@ -2,7 +2,6 @@
 
 open Core_kernel
 open Async
-open Caqti_async
 
 (* before running this program for the first time, import the berkeley schema to the
    migrated database name
@@ -67,10 +66,10 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
   let query_mainnet_db ~f = Mina_caqti.query ~f mainnet_pool in
   [%log info] "Fetching transaction sequence from prior database" ;
   let%bind block_user_cmds =
-    query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
+    query_mainnet_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit
-             (Caqti_type.tup2 Sql.Mainnet.User_command.typ
+          (Mina_caqti.collect_req Caqti_type.unit
+             (Caqti_type.t2 Sql.Mainnet.User_command.typ
                 Sql.Mainnet.Block_user_command.typ )
              (sprintf
                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
@@ -85,10 +84,10 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
           () )
   in
   let%bind block_internal_cmds =
-    query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
+    query_mainnet_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit
-             (Caqti_type.tup2 Sql.Mainnet.Internal_command.typ
+          (Mina_caqti.collect_req Caqti_type.unit
+             (Caqti_type.t2 Sql.Mainnet.Internal_command.typ
                 Sql.Mainnet.Block_internal_command.typ )
              (sprintf
                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
@@ -117,10 +116,10 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
   let%bind public_keys =
     if List.is_empty required_public_key_ids then return Int.Map.empty
     else
-      query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
+      query_mainnet_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
           Conn.collect_list
-            (Caqti_request.collect Caqti_type.unit
-               Caqti_type.(tup2 int Sql.Mainnet.Public_key.typ)
+            (Mina_caqti.collect_req Caqti_type.unit
+               Caqti_type.(t2 int Sql.Mainnet.Public_key.typ)
                (sprintf "SELECT id, value FROM %s WHERE id IN (%s)"
                   Sql.Mainnet.Public_key.table_name
                   ( String.concat ~sep:","
@@ -405,9 +404,9 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
          startup in order to be able to resume gracefully in the event of an unfortunate crash. *)
       let%bind () =
         let%bind garbage_block_ids =
-          query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
+          query_migrated_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
               Conn.collect_list
-                (Caqti_request.collect Caqti_type.unit Caqti_type.int
+                (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
                    (sprintf
                       "DELETE FROM %s WHERE parent_id IS NULL AND height > 1 \
                        RETURNING id"
@@ -421,17 +420,17 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
             @@ List.map garbage_block_ids ~f:Int.to_string
           in
           let%bind () =
-            query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
+            query_migrated_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
                 Conn.exec
-                  (Caqti_request.exec Caqti_type.unit
+                  (Mina_caqti.exec_req Caqti_type.unit
                      (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
                         Archive_lib.Processor.Block_and_signed_command
                         .table_name garbage_block_ids_sql ) )
                   () )
           in
-          query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
+          query_migrated_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
               Conn.exec
-                (Caqti_request.exec Caqti_type.unit
+                (Mina_caqti.exec_req Caqti_type.unit
                    (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
                       Archive_lib.Processor.Block_and_internal_command
                       .table_name garbage_block_ids_sql ) )
@@ -529,7 +528,6 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
                      | Error (`Encode_failed _ as err)
                      | Error (`Encode_rejected _ as err)
                      | Error (`Request_failed _ as err)
-                     | Error (`Request_rejected _ as err)
                      | Error (`Response_failed _ as err)
                      | Error (`Response_rejected _ as err) ->
                          failwithf
diff --git a/src/app/berkeley_migration/sql.ml b/src/app/berkeley_migration/sql.ml
index a7bd0cc611..4b677e43f3 100644
--- a/src/app/berkeley_migration/sql.ml
+++ b/src/app/berkeley_migration/sql.ml
@@ -1,7 +1,6 @@
 (* sql.ml -- for reading the mainnet and berkeley databases (no writing!) *)
 
 open Core
-open Mina_caqti
 
 module Mainnet = struct
   module Public_key = struct
@@ -17,17 +16,17 @@ module Mainnet = struct
 
     let table_name = "public_keys"
 
-    let find_by_id (module Conn : CONNECTION) id =
+    let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find
-        (Caqti_request.find Caqti_type.int Caqti_type.string
+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
            "SELECT value FROM public_keys WHERE id = ?" )
         id
   end
 
   module Snarked_ledger_hash = struct
-    let find_by_id (module Conn : CONNECTION) id =
+    let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find
-        (Caqti_request.find Caqti_type.int Caqti_type.string
+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
            "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
         id
   end
@@ -77,18 +76,18 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let id_from_state_hash (module Conn : CONNECTION) state_hash =
+    let id_from_state_hash (module Conn : Mina_caqti.CONNECTION) state_hash =
       Conn.find
-        (Caqti_request.find Caqti_type.string Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.string Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE state_hash = ?
          |sql} )
         state_hash
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                         next_epoch_data_id, ledger_hash, height, global_slot,
@@ -96,17 +95,17 @@ module Mainnet = struct
                  WHERE id = ?                                                                                                    |sql} )
         id
 
-    let canonical_blocks (module Conn : CONNECTION) =
+    let canonical_blocks (module Conn : Mina_caqti.CONNECTION) =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.unit Caqti_type.int
+        (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE chain_status = 'canonical'
          |sql} )
 
-    let full_canonical_blocks (module Conn : CONNECTION) =
+    let full_canonical_blocks (module Conn : Mina_caqti.CONNECTION) =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.unit typ
+        (Mina_caqti.collect_req Caqti_type.unit typ
            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                         next_epoch_data_id, ledger_hash, height, global_slot,
@@ -116,23 +115,23 @@ module Mainnet = struct
                  ORDER BY height ASC
          |sql} )
 
-    let mark_as_canonical (module Conn : CONNECTION) id =
+    let mark_as_canonical (module Conn : Mina_caqti.CONNECTION) id =
       Conn.exec
-        (Caqti_request.exec Caqti_type.int
+        (Mina_caqti.exec_req Caqti_type.int
            "UPDATE blocks SET chain_status='canonical' WHERE id = ?" )
         id
 
-    let get_highest_canonical_block (module Conn : CONNECTION) =
+    let get_highest_canonical_block (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            "SELECT id FROM blocks WHERE chain_status='canonical' ORDER BY \
             height DESC LIMIT 1" )
 
-    let get_subchain (module Conn : CONNECTION) ~start_block_id ~end_block_id =
+    let get_subchain (module Conn : Mina_caqti.CONNECTION) ~start_block_id ~end_block_id =
       (* derive query from type `t` *)
       Conn.collect_list
-        (Caqti_request.collect
-           Caqti_type.(tup2 int int)
+        (Mina_caqti.collect_req
+           Caqti_type.(t2 int int)
            Caqti_type.int
            {sql| WITH RECURSIVE chain AS (
                     SELECT id, parent_id, height
@@ -194,9 +193,9 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load_block (module Conn : CONNECTION) ~block_id =
+    let load_block (module Conn : Mina_caqti.CONNECTION) ~block_id =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.int typ
+        (Mina_caqti.collect_req Caqti_type.int typ
            {sql| SELECT block_id, user_command_id,
                sequence_no,
                status,failure_reason,
@@ -233,9 +232,9 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load_block (module Conn : CONNECTION) ~block_id =
+    let load_block (module Conn : Mina_caqti.CONNECTION) ~block_id =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.int typ
+        (Mina_caqti.collect_req Caqti_type.int typ
            {sql| SELECT block_id, internal_command_id,
                  sequence_no, secondary_sequence_no,
                  receiver_account_creation_fee_paid,
@@ -266,12 +265,12 @@ module Mainnet = struct
       let decode ((typ, receiver_id, fee, token), hash) =
         Ok { typ; receiver_id; fee; token; hash }
       in
-      let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
+      let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
       Caqti_type.custom ~encode ~decode rep
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,receiver_id,fee,token,hash
                  FROM internal_commands
                  WHERE id = ?
@@ -336,9 +335,9 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,fee_payer_id,source_id,receiver_id,
                  fee_token,token,
                  nonce,amount,fee,valid_until,memo,hash
@@ -350,16 +349,16 @@ end
 
 module Berkeley = struct
   module Block = struct
-    let count (module Conn : CONNECTION) =
+    let count (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            {sql| SELECT count (*)
                  FROM blocks
            |sql} )
 
-    let greatest_block_height (module Conn : CONNECTION) =
+    let greatest_block_height (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int64
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
            {sql| SELECT height
                  FROM blocks
                  WHERE chain_status <> 'orphaned'
@@ -367,9 +366,9 @@ module Berkeley = struct
                  LIMIT 1
            |sql} )
 
-    let genesis_block_id (module Conn : CONNECTION) =
+    let genesis_block_id (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE height = 1
@@ -386,9 +385,9 @@ module Berkeley = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load (module Conn : CONNECTION) =
+    let load (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT pk.value, t.value
                  FROM account_identifiers ai
                  INNER JOIN tokens t ON ai.token_id = t.id
@@ -398,9 +397,9 @@ module Berkeley = struct
   end
 
   module Accounts_accessed = struct
-    let greatest_ledger_index (module Conn : CONNECTION) =
+    let greatest_ledger_index (module Conn : Mina_caqti.CONNECTION) =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.int Caqti_type.int
+        (Mina_caqti.find_opt_req Caqti_type.int Caqti_type.int
            {sql| SELECT ledger_index
                  FROM accounts_accessed
                  WHERE block_id = $1
diff --git a/src/app/berkeley_migration_verifier/sql.ml b/src/app/berkeley_migration_verifier/sql.ml
index a655f27305..c0e89348d2 100644
--- a/src/app/berkeley_migration_verifier/sql.ml
+++ b/src/app/berkeley_migration_verifier/sql.ml
@@ -24,9 +24,9 @@ module Mainnet = struct
         WHERE receiver_account_creation_fee_paid IS NOT NULL
       ) 
       ORDER BY height, public_key |sql}
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
-  let dump_accounts_created_to_csv (module Conn : CONNECTION) output_file =
+  let dump_accounts_created_to_csv (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_accounts_created_to_csv_query ~output_file) ()
 
   let dump_state_and_ledger_hashes_to_csv_query ~output_file =
@@ -36,7 +36,7 @@ module Mainnet = struct
         "  SELECT state_hash, ledger_hash FROM blocks\n\
         \            WHERE chain_status = 'canonical'\n\
         \          "
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_block_hashes_till_height_query ~output_file ~height =
     dump_sql_to_csv output_file
@@ -47,7 +47,7 @@ module Mainnet = struct
            \            WHERE chain_status = 'canonical'\n\
            \            AND height <= %d ORDER BY height\n\
            \      " height )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_block_hashes_till_height (module Conn : Mina_caqti.CONNECTION)
       output_file height =
@@ -61,7 +61,7 @@ module Mainnet = struct
         \            WHERE chain_status = 'canonical'\n\
         \            ORDER BY height\n\
         \      "
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_block_hashes (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_block_hashes_query ~output_file) ()
@@ -85,7 +85,7 @@ module Mainnet = struct
            \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
             fee_payer_keys.id ORDER BY height, sequence_no\n\
            \      " height )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_user_commands_till_height (module Conn : Mina_caqti.CONNECTION)
       output_file height =
@@ -110,7 +110,7 @@ module Mainnet = struct
            \        ORDER BY height, sequence_no, secondary_sequence_no, type \n\
            \   \n\
            \          " height )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_internal_commands_till_height (module Conn : Mina_caqti.CONNECTION)
       output_file height =
@@ -133,7 +133,7 @@ module Mainnet = struct
         \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
          fee_payer_keys.id ORDER BY height, sequence_no\n\
         \      "
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_user_commands (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_user_commands_query ~output_file) ()
@@ -156,13 +156,13 @@ module Mainnet = struct
            \        ORDER BY height, sequence_no, secondary_sequence_no, type \n\
            \   \n\
            \          " )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_internal_commands (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_internal_commands_query ~output_file) ()
 
   let mark_chain_till_fork_block_as_canonical_query =
-    Caqti_request.exec Caqti_type.string
+    Mina_caqti.exec_req Caqti_type.string
       {sql|
       UPDATE blocks
     Set chain_status = 'canonical'
@@ -200,13 +200,13 @@ module Berkeley = struct
       JOIN account_identifiers ON account_identifier_id = account_identifiers.id 
       JOIN public_keys         ON public_key_id         = public_keys.id
       ORDER BY height, public_key |sql}
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
-  let dump_accounts_created_to_csv (module Conn : CONNECTION) output_file =
+  let dump_accounts_created_to_csv (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_accounts_created_to_csv_query ~output_file) ()
 
   let height_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| 
             SELECT height from blocks order by height desc limit 1;
           |sql}
@@ -215,7 +215,7 @@ module Berkeley = struct
     Conn.find height_query ()
 
   let canonical_blocks_count_till_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql|
         WITH RECURSIVE chain AS 
         (  
@@ -234,7 +234,7 @@ module Berkeley = struct
     Conn.find canonical_blocks_count_till_height_query height
 
   let blocks_count_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql|
           SELECT count(*) FROM blocks ;
         |sql}
@@ -261,7 +261,7 @@ module Berkeley = struct
            \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
             fee_payer_keys.id ORDER BY height, sequence_no\n\
            \     " height )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_user_commands_till_height (module Conn : Mina_caqti.CONNECTION)
       output_file height =
@@ -286,7 +286,7 @@ module Berkeley = struct
            \        ORDER BY height, sequence_no, secondary_sequence_no, \
             command_type \n\
            \      " height )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_internal_commands_till_height (module Conn : Mina_caqti.CONNECTION)
       output_file height =
@@ -309,7 +309,7 @@ module Berkeley = struct
         \      INNER JOIN public_keys AS fee_payer_keys ON fee_payer_id = \
          fee_payer_keys.id ORDER BY height, sequence_no\n\
         \     "
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_user_commands (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_user_commands_query ~output_file) ()
@@ -331,7 +331,7 @@ module Berkeley = struct
         \        ORDER BY height, sequence_no, secondary_sequence_no, \
          command_type \n\
         \      "
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_internal_commands (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_internal_commands_query ~output_file) ()
@@ -344,7 +344,7 @@ module Berkeley = struct
                  JOIN blocks ON block_id = blocks.id
                  WHERE height <> 1
                  ORDER BY block_id, id |sql}
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_accounts_accessed_to_csv (module Conn : Mina_caqti.CONNECTION)
       output_file =
@@ -359,7 +359,7 @@ module Berkeley = struct
            \    AND height <= %d ORDER BY height\n\
            \ \n\
            \     " height )
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_block_hashes_till_height (module Conn : Mina_caqti.CONNECTION)
       output_file height =
@@ -373,7 +373,7 @@ module Berkeley = struct
         \      WHERE chain_status = 'canonical'\n\
         \      ORDER BY height\n\
         \      "
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_block_hashes (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_block_hashes_query ~output_file) ()
@@ -405,21 +405,21 @@ module Berkeley = struct
         INNER JOIN internal_commands ON id = internal_command_id
         INNER JOIN account_identifiers ON public_key_id = receiver_id
       ) ORDER BY block_id, id |sql}
-    |> Caqti_request.exec Caqti_type.unit
+    |> Mina_caqti.exec_req Caqti_type.unit
 
   let dump_user_and_internal_command_info_to_csv
       (module Conn : Mina_caqti.CONNECTION) output_file =
     Conn.exec (dump_user_and_internal_command_info_to_csv_query ~output_file) ()
 
   let get_account_accessed_count_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT count(*) FROM accounts_accessed; |sql}
 
   let count_account_accessed (module Conn : Mina_caqti.CONNECTION) =
     Conn.find get_account_accessed_count_query ()
 
   let get_account_id_accessed_in_commands_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| 
         select count(distinct ids.account_identifier_id) FROM 
 
diff --git a/src/app/best_tip_merger/best_tip_merger.ml b/src/app/best_tip_merger/best_tip_merger.ml
index 5682f29ec5..90f418c153 100644
--- a/src/app/best_tip_merger/best_tip_merger.ml
+++ b/src/app/best_tip_merger/best_tip_merger.ml
@@ -205,7 +205,7 @@ module Compact_display = struct
         { current : State_hash.t
         ; parent : State_hash.t
         ; blockchain_length : Mina_numbers.Length.t
-        ; global_slot : Mina_numbers.Global_slot_since_genesis.t
+        ; global_slot : Mina_numbers.Global_slot_since_hard_fork.t
         }
   [@@deriving yojson]
 
@@ -243,7 +243,7 @@ module Graph_node = struct
     | Node of
         { current : State_hash.t
         ; length : Mina_numbers.Length.t
-        ; slot : Mina_numbers.Global_slot_since_genesis.t
+        ; slot : Mina_numbers.Global_slot_since_hard_fork.t
         }
   [@@deriving yojson, equal, hash]
 
@@ -267,7 +267,7 @@ module Graph_node = struct
           ("NA", "NA")
       | Node s ->
           ( Mina_numbers.Length.to_string s.length
-          , Mina_numbers.Global_slot_since_genesis.to_string s.slot )
+          , Mina_numbers.Global_slot_since_hard_fork.to_string s.slot )
     in
     { state; slot; length; peers = t.peers }
 
diff --git a/src/app/delegation_compliance/sql.ml b/src/app/delegation_compliance/sql.ml
index 77a02b6da3..713ea23916 100644
--- a/src/app/delegation_compliance/sql.ml
+++ b/src/app/delegation_compliance/sql.ml
@@ -16,7 +16,7 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect Caqti_type.string typ
+    Mina_caqti.collect_req Caqti_type.string typ
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id,global_slot,state_hash,ledger_hash FROM blocks b WHERE b.state_hash = ?
@@ -122,7 +122,7 @@ module User_command = struct
     Caqti_type.custom ~encode ~decode (to_rep spec)
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id,receiver_id,fee,fee_token,token,amount,valid_until,memo,nonce,
                    blocks.id,blocks.global_slot,parent.global_slot_since_genesis,
                    sequence_no,status,created_token,
@@ -148,8 +148,8 @@ module User_command = struct
     Conn.collect_list query user_cmd_id
 
   let query_payments_by_source_and_receiver =
-    Caqti_request.collect
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int int)
       typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
@@ -182,7 +182,7 @@ module User_command = struct
       (source_id, receiver_id)
 
   let query_payments_by_receiver =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
                parent.global_slot_since_genesis, sequence_no, status, created_token,
@@ -214,7 +214,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
@@ -223,7 +223,7 @@ module Public_key = struct
     Conn.find_opt query pk_id
 
   let query_for_id =
-    Caqti_request.find_opt Caqti_type.string Caqti_type.int
+    Mina_caqti.find_opt_req Caqti_type.string Caqti_type.int
       {sql| SELECT id FROM public_keys
             WHERE value = ?
       |sql}
@@ -234,7 +234,7 @@ end
 
 module Block = struct
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT MAX(global_slot) FROM blocks
       |sql}
 
@@ -242,7 +242,7 @@ module Block = struct
     Conn.find max_slot_query ()
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot = $1
       |sql}
 
@@ -250,8 +250,8 @@ module Block = struct
     Conn.collect_list state_hashes_by_slot_query slot
 
   let creator_slot_bounds_query =
-    Caqti_request.collect
-      Caqti_type.(tup3 int int64 int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t3 int int64 int64)
       Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE creator_id = $1
@@ -268,7 +268,7 @@ module Coinbase_receivers_for_block_creator = struct
      with given creator_id, where the receiver distinct from the creator_id
   *)
   let query =
-    Caqti_request.collect Caqti_type.int Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.int
       {sql| SELECT DISTINCT ic.receiver_id
 
             FROM blocks b
diff --git a/src/app/extract_blocks/sql.ml b/src/app/extract_blocks/sql.ml
index 65b9efcdac..5233a16a89 100644
--- a/src/app/extract_blocks/sql.ml
+++ b/src/app/extract_blocks/sql.ml
@@ -31,12 +31,12 @@ module Subchain = struct
       fields b_fields join_condition fields
 
   let query_unparented =
-    Caqti_request.collect Caqti_type.string Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.string Archive_lib.Processor.Block.typ
       (make_sql ~join_condition:"b.id = chain.parent_id")
 
   let query_from_start =
-    Caqti_request.collect
-      Caqti_type.(tup2 string string)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string string)
       Archive_lib.Processor.Block.typ
       (make_sql
          ~join_condition:
@@ -56,7 +56,7 @@ module Subchain = struct
     let comma_fields =
       String.concat Archive_lib.Processor.Block.Fields.names ~sep:","
     in
-    Caqti_request.collect Caqti_type.unit Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.unit Archive_lib.Processor.Block.typ
       (sprintf "SELECT %s FROM blocks" comma_fields)
 
   let all_blocks (module Conn : Mina_caqti.CONNECTION) =
@@ -67,8 +67,8 @@ end
 
 module Blocks_and_user_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT user_command_id, sequence_no
             FROM blocks_user_commands
             WHERE block_id = ?
@@ -91,7 +91,7 @@ module Block_user_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_user_commands buc
             INNER JOIN blocks
@@ -122,7 +122,7 @@ module Blocks_and_internal_commands = struct
       Caqti_type.[ int; int; int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT internal_command_id, sequence_no, secondary_sequence_no
             FROM (blocks_internal_commands
             INNER JOIN blocks
@@ -147,7 +147,7 @@ module Block_internal_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_internal_commands bic
             INNER JOIN blocks
@@ -167,8 +167,8 @@ end
 
 module Blocks_and_zkapp_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT zkapp_command_id, sequence_no
             FROM blocks_zkapp_commands
             WHERE block_id = ?
@@ -191,7 +191,7 @@ module Block_zkapp_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_zkapp_commands bzkc
             INNER JOIN blocks
diff --git a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
index 65b34d6b55..efe0668cc2 100644
--- a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
+++ b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
@@ -67,15 +67,11 @@ let amount_geq_min_balance ~amount ~initial_min_balance =
 let generate_delegate_account ~logger delegatee_pk =
   [%log info] "Generating account for delegatee $delegatee"
     ~metadata:[ ("delegatee", `String delegatee_pk) ] ;
-  let pk = Some delegatee_pk in
-  let balance = Currency.Balance.zero in
-  let timing = None in
-  let delegate = None in
   { Runtime_config.Json_layout.Accounts.Single.default with
-    pk
-  ; balance
-  ; timing
-  ; delegate
+    pk = delegatee_pk
+  ; balance = Currency.Balance.zero
+  ; timing = None
+  ; delegate = None
   }
 
 let generate_missing_delegate_accounts ~logger =
@@ -97,7 +93,6 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
     ~delegatee_pk =
   [%log info] "Processing record for $wallet_pk"
     ~metadata:[ ("wallet_pk", `String wallet_pk) ] ;
-  let pk = Some wallet_pk in
   let balance = Currency.Balance.of_mina_string_exn amount in
   let initial_minimum_balance =
     (* if omitted in the TSV, use balance *)
@@ -135,7 +130,9 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
           .initial_minimum_balance
         ; cliff_time
         ; cliff_amount
-        ; vesting_period
+        ; vesting_period =
+            Global_slot_since_genesis.(
+              diff vesting_period zero |> Option.value_exn)
         ; vesting_increment
         }
   in
@@ -144,7 +141,7 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
     if no_delegatee delegatee_pk then None else Some delegatee_pk
   in
   { Runtime_config.Json_layout.Accounts.Single.default with
-    pk
+    pk = wallet_pk
   ; balance
   ; timing
   ; delegate
diff --git a/src/app/ledger_export_bench/ledger_export_benchmark.ml b/src/app/ledger_export_bench/ledger_export_benchmark.ml
index cd5846345a..5125f8ba90 100644
--- a/src/app/ledger_export_bench/ledger_export_benchmark.ml
+++ b/src/app/ledger_export_bench/ledger_export_benchmark.ml
@@ -26,7 +26,7 @@ let () =
   let cfg = load_daemon_cfg runtime_config () in
   let accounts =
     match cfg.ledger with
-    | None | Some { base = Named _; _ } | Some { base = Hash _; _ } ->
+    | None | Some { base = Named _; _ } | Some { base = Hash; _ } ->
         []
     | Some { base = Accounts accs; _ } ->
         List.map ~f:Runtime_config.Accounts.Single.to_account accs
diff --git a/src/app/migrate-balances-table/sql.ml b/src/app/migrate-balances-table/sql.ml
index d5520c542c..be4d000a4d 100644
--- a/src/app/migrate-balances-table/sql.ml
+++ b/src/app/migrate-balances-table/sql.ml
@@ -4,7 +4,7 @@ open Core_kernel
 
 let create_temp_balances_table (module Conn : Mina_caqti.CONNECTION) =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        {sql| CREATE TABLE IF NOT EXISTS balances_temp
            ( id                           serial PRIMARY KEY
            , public_key_id                int    NOT NULL REFERENCES public_keys(id)
@@ -19,7 +19,7 @@ let create_temp_balances_table (module Conn : Mina_caqti.CONNECTION) =
 
 let copy_table_to_temp_table (module Conn : Mina_caqti.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_temp AS (SELECT * FROM %s)
                 |sql}
@@ -27,7 +27,7 @@ let copy_table_to_temp_table (module Conn : Mina_caqti.CONNECTION) table =
 
 let create_table_index (module Conn : Mina_caqti.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
@@ -39,7 +39,7 @@ let create_temp_table_index (module Conn : Mina_caqti.CONNECTION) table col =
 let create_table_named_index (module Conn : Mina_caqti.CONNECTION) table col
     name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
@@ -51,7 +51,7 @@ let create_temp_table_named_index (module Conn : Mina_caqti.CONNECTION) table
 
 let drop_table_index (module Conn : Mina_caqti.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP INDEX IF EXISTS idx_%s_%s
           |sql} table col ) )
 
@@ -60,7 +60,7 @@ let drop_temp_table_index (module Conn : Mina_caqti.CONNECTION) table col =
 
 let create_cursor (module Conn : Mina_caqti.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_cursor
                       ( value int NOT NULL)
@@ -69,7 +69,7 @@ let create_cursor (module Conn : Mina_caqti.CONNECTION) name =
 
 let initialize_cursor (module Conn : Mina_caqti.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| INSERT INTO %s_cursor (value) VALUES (0)
                 |sql}
@@ -77,13 +77,13 @@ let initialize_cursor (module Conn : Mina_caqti.CONNECTION) name =
 
 let current_cursor (module Conn : Mina_caqti.CONNECTION) name =
   Conn.find_opt
-    (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+    (Mina_caqti.find_opt_req Caqti_type.unit Caqti_type.int
        (sprintf {sql| SELECT value FROM %s_cursor
                 |sql} name ) )
 
 let update_cursor (module Conn : Mina_caqti.CONNECTION) name ndx =
   Conn.exec
-    (Caqti_request.exec Caqti_type.int
+    (Mina_caqti.exec_req Caqti_type.int
        (sprintf
           {sql| UPDATE %s_cursor SET value = $1
                 |sql}
@@ -99,7 +99,7 @@ let drop_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION) table
       |sql}
       table foreign_key
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let add_balances_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION)
     table col foreign_key =
@@ -112,7 +112,7 @@ let add_balances_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let add_blocks_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION)
     table col foreign_key =
@@ -125,14 +125,14 @@ let add_blocks_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let find_balance_entry (module Conn : Mina_caqti.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find_opt
-    (Caqti_request.find_opt
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_opt_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| SELECT id
             FROM balances_temp
@@ -152,8 +152,8 @@ let insert_balance_entry (module Conn : Mina_caqti.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find
-    (Caqti_request.find
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| INSERT INTO balances_temp
             ( public_key_id
@@ -178,8 +178,8 @@ let insert_balance_entry (module Conn : Mina_caqti.CONNECTION) ~public_key_id
 
 let get_internal_commands (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup4 int int64 (tup4 int int int int) int)
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t4 int int64 (t4 int int int int) int)
        {sql| SELECT bal.public_key_id,bal.balance,bic.block_id,blocks.height,bic.sequence_no,bic.secondary_sequence_no,
             internal_command_id
             FROM blocks_internal_commands bic
@@ -193,8 +193,8 @@ let update_internal_command_receiver_balance
     (module Conn : Mina_caqti.CONNECTION) ~new_balance_id ~block_id
     ~internal_command_id ~block_sequence_no ~block_secondary_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup4 int int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t4 int int int int))
        {sql| UPDATE blocks_internal_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND internal_command_id = $3
@@ -209,8 +209,8 @@ let update_internal_command_receiver_balance
 
 let get_user_command_fee_payers (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_fee_payer.public_key_id,bal_fee_payer.balance
              FROM blocks_user_commands buc
@@ -222,8 +222,8 @@ let get_user_command_fee_payers (module Conn : Mina_caqti.CONNECTION) =
 
 let get_user_command_sources (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_source.public_key_id,bal_source.balance
              FROM blocks_user_commands buc
@@ -236,8 +236,8 @@ let get_user_command_sources (module Conn : Mina_caqti.CONNECTION) =
 
 let get_user_command_receivers (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_receiver.public_key_id,bal_receiver.balance
              FROM blocks_user_commands buc
@@ -251,8 +251,8 @@ let get_user_command_receivers (module Conn : Mina_caqti.CONNECTION) =
 let update_user_command_fee_payer_balance (module Conn : Mina_caqti.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET fee_payer_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -263,8 +263,8 @@ let update_user_command_fee_payer_balance (module Conn : Mina_caqti.CONNECTION)
 let update_user_command_source_balance (module Conn : Mina_caqti.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET source_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -276,8 +276,8 @@ let update_user_command_source_balance (module Conn : Mina_caqti.CONNECTION)
 let update_user_command_receiver_balance (module Conn : Mina_caqti.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -288,13 +288,13 @@ let update_user_command_receiver_balance (module Conn : Mina_caqti.CONNECTION)
 
 let drop_table (module Conn : Mina_caqti.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP TABLE %s
                 |sql} table ) )
 
 let rename_temp_table (module Conn : Mina_caqti.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| ALTER TABLE %s_temp
                 RENAME TO %s
@@ -303,7 +303,7 @@ let rename_temp_table (module Conn : Mina_caqti.CONNECTION) table =
 
 let get_column_count (module Conn : Mina_caqti.CONNECTION) table =
   Conn.find
-    (Caqti_request.find Caqti_type.string Caqti_type.int
+    (Mina_caqti.find_req Caqti_type.string Caqti_type.int
        {sql| SELECT COUNT(*) FROM information_schema.columns
              WHERE table_name=$1
        |sql} )
diff --git a/src/app/missing_blocks_auditor/sql.ml b/src/app/missing_blocks_auditor/sql.ml
index f375181660..7aa4108f02 100644
--- a/src/app/missing_blocks_auditor/sql.ml
+++ b/src/app/missing_blocks_auditor/sql.ml
@@ -4,8 +4,8 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.collect Caqti_type.unit
-      Caqti_type.(tup4 int string int string)
+    Mina_caqti.collect_req Caqti_type.unit
+      Caqti_type.(t4 int string int string)
       {sql|
            SELECT id, state_hash, height, parent_hash FROM blocks
            WHERE parent_id IS NULL
@@ -16,7 +16,7 @@ end
 
 module Missing_blocks_gap = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT $1 - MAX(height) - 1 FROM blocks
             WHERE height < $1
       |sql}
@@ -26,7 +26,7 @@ end
 
 module Chain_status = struct
   let query_highest_canonical =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT max(height) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
@@ -35,7 +35,7 @@ module Chain_status = struct
     Conn.find query_highest_canonical ()
 
   let query_count_pending_below =
-    Caqti_request.find Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT count(*) FROM blocks
             WHERE chain_status = 'pending'
             AND height <= ?
@@ -45,8 +45,8 @@ module Chain_status = struct
     Conn.find query_count_pending_below height
 
   let query_canonical_chain =
-    Caqti_request.collect Caqti_type.int64
-      Caqti_type.(tup3 int string string)
+    Mina_caqti.collect_req Caqti_type.int64
+      Caqti_type.(t3 int string string)
       {sql| WITH RECURSIVE chain AS (
 
                (SELECT id, state_hash, parent_id, chain_status
diff --git a/src/app/replayer/sql.ml b/src/app/replayer/sql.ml
index 72a98c1340..160e213187 100644
--- a/src/app/replayer/sql.ml
+++ b/src/app/replayer/sql.ml
@@ -18,8 +18,8 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       typ
       {sql| WITH RECURSIVE chain AS (
               SELECT id,parent_id,global_slot_since_genesis,state_hash,ledger_hash, snarked_ledger_hash_id FROM blocks b                                                                                                                                                           WHERE b.state_hash = $1
@@ -71,7 +71,7 @@ let find_command_ids_query s =
 
 module Block = struct
   let state_hash_query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks
             WHERE id = ?
       |sql}
@@ -80,7 +80,7 @@ module Block = struct
     Conn.find state_hash_query id
 
   let parent_id_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT parent_id FROM blocks
             WHERE id = ?
       |sql}
@@ -89,7 +89,7 @@ module Block = struct
     Conn.find parent_id_query id
 
   let unparented_query =
-    Caqti_request.collect Caqti_type.unit Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE parent_id IS NULL
       |sql}
@@ -98,21 +98,21 @@ module Block = struct
     Conn.collect_list unparented_query ()
 
   let get_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int64
       {sql| SELECT height FROM blocks WHERE id = $1 |sql}
 
   let get_height (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.find get_height_query block_id
 
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks |sql}
 
   let get_max_slot (module Conn : Mina_caqti.CONNECTION) () =
     Conn.find max_slot_query ()
 
   let max_canonical_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
@@ -121,7 +121,7 @@ module Block = struct
     Conn.find max_canonical_slot_query ()
 
   let next_slot_query =
-    Caqti_request.find_opt Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_opt_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT global_slot_since_genesis FROM blocks
             WHERE global_slot_since_genesis >= $1
             AND chain_status <> 'orphaned'
@@ -133,7 +133,7 @@ module Block = struct
     Conn.find_opt next_slot_query slot
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int64 Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int64 Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot_since_genesis = $1 |sql}
 
   let get_state_hashes_by_slot (module Conn : Mina_caqti.CONNECTION) slot =
@@ -141,7 +141,7 @@ module Block = struct
 
   (* find all blocks, working back from block with given state hash *)
   let chain_query =
-    Caqti_request.collect Caqti_type.string Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.string Caqti_type.string
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id FROM blocks b WHERE b.state_hash = ?
@@ -171,7 +171,7 @@ module Block = struct
       let pk, _ = Mina_state.Consensus_state_hooks.genesis_winner in
       Signature_lib.Public_key.Compressed.to_base58_check pk
     in
-    Caqti_request.find Caqti_type.int64 Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.string
       (sprintf
          {sql| SELECT snarked_ledger_hashes.value
                FROM blocks
@@ -192,8 +192,8 @@ end
 
 module User_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "user")
 
@@ -240,7 +240,7 @@ module User_command = struct
         ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT command_type,fee_payer_id, source_id,receiver_id,fee,amount,valid_until,memo,nonce,
                    blocks.id,blocks.height,blocks.global_slot_since_genesis,
                    sequence_no,status
@@ -265,8 +265,8 @@ end
 
 module Zkapp_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "zkapp")
 
@@ -292,7 +292,7 @@ module Zkapp_command = struct
         [ int; Mina_caqti.array_int_typ; string; int; int64; int; string ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT zkapp_fee_payer_body_id,zkapp_account_updates_ids,memo,
                    blocks.id,blocks.global_slot_since_genesis,
                    sequence_no,hash
@@ -317,8 +317,8 @@ end
 
 module Internal_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "internal")
 
@@ -347,8 +347,8 @@ module Internal_command = struct
      the call to Staged_ledger.apply in Block_producer
   *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 int64 int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int64 int)
       typ
       {sql| SELECT command_type,receiver_id,fee,
                    b.id,b.height,b.global_slot_since_genesis,
@@ -377,7 +377,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
@@ -388,7 +388,7 @@ end
 
 module Snarked_ledger_hashes = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM snarked_ledger_hashes
             WHERE id = ?
       |sql}
@@ -404,11 +404,11 @@ module Epoch_data = struct
     let decode (epoch_ledger_hash, epoch_data_seed) =
       Ok { epoch_ledger_hash; epoch_data_seed }
     in
-    let rep = Caqti_type.(tup2 string string) in
+    let rep = Caqti_type.(t2 string string) in
     Caqti_type.custom ~encode ~decode rep
 
   let query_epoch_data =
-    Caqti_request.find Caqti_type.int epoch_data_typ
+    Mina_caqti.find_req Caqti_type.int epoch_data_typ
       {sql| SELECT slh.value, ed.seed FROM snarked_ledger_hashes AS slh
 
        INNER JOIN
@@ -425,7 +425,7 @@ module Epoch_data = struct
     Conn.find query_epoch_data epoch_ledger_id
 
   let query_staking_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT staking_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
@@ -437,7 +437,7 @@ module Epoch_data = struct
     Conn.find query_staking_epoch_data_id state_hash
 
   let query_next_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT next_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
@@ -450,7 +450,7 @@ end
 module Parent_block = struct
   (* fork block is parent of block with the given state hash *)
   let query_parent_state_hash =
-    Caqti_request.find Caqti_type.string Caqti_type.string
+    Mina_caqti.find_req Caqti_type.string Caqti_type.string
       {sql| SELECT parent.state_hash FROM blocks AS parent
 
             INNER JOIN
diff --git a/src/app/rosetta/lib/account.ml b/src/app/rosetta/lib/account.ml
index 1cdf7bafec..81599bbef6 100644
--- a/src/app/rosetta/lib/account.ml
+++ b/src/app/rosetta/lib/account.ml
@@ -36,9 +36,9 @@ module Sql = struct
           .transaction_capacity_log_2
 
     let query_pending =
-      Caqti_request.find_opt
-        Caqti_type.(tup3 string int64 string)
-        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t3 string int64 string)
+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
         {sql|
   WITH RECURSIVE pending_chain AS (
 
@@ -87,9 +87,9 @@ module Sql = struct
 |sql}
 
     let query_canonical =
-      Caqti_request.find_opt
-        Caqti_type.(tup3 string int64 string)
-        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t3 string int64 string)
+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
         {sql|
                 SELECT b.height,b.global_slot_since_genesis AS block_global_slot_since_genesis,balance,nonce,timing_id
 
diff --git a/src/app/rosetta/lib/block.ml b/src/app/rosetta/lib/block.ml
index b73341b19c..4cd284ce54 100644
--- a/src/app/rosetta/lib/block.ml
+++ b/src/app/rosetta/lib/block.ml
@@ -390,10 +390,10 @@ module Sql = struct
 
       let winner (_, winner) = `Pk winner
 
-      let typ = Caqti_type.(tup2 string string)
+      let typ = Caqti_type.(t2 string string)
     end
 
-    let typ = Caqti_type.(tup3 int Archive_lib.Processor.Block.typ Extras.typ)
+    let typ = Caqti_type.(t3 int Archive_lib.Processor.Block.typ Extras.typ)
 
     let block_fields ?prefix () =
       let names = Archive_lib.Processor.Block.Fields.names in
@@ -404,7 +404,7 @@ module Sql = struct
       String.concat ~sep:"," fields
 
     let query_count_canonical_at_height =
-      Caqti_request.find Caqti_type.int64 Caqti_type.int64
+      Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
         {sql| SELECT COUNT(*) FROM blocks
               WHERE height = ?
               AND chain_status = 'canonical'
@@ -412,7 +412,7 @@ module Sql = struct
 
     let query_height_canonical =
       let c_fields = block_fields ~prefix:"c." () in
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_opt_req Caqti_type.int64 typ
         (* The archive database will only reconcile the canonical columns for
          * blocks older than k + epsilon
          *)
@@ -436,7 +436,7 @@ module Sql = struct
       let fields = block_fields () in
       let b_fields = block_fields ~prefix:"b." () in
       let c_fields = block_fields ~prefix:"c." () in
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_opt_req Caqti_type.int64 typ
         (* According to the clarification of the Rosetta spec here
          * https://community.rosetta-api.org/t/querying-block-by-just-its-index/84/3 ,
          * it is important to select only the block on the canonical chain for a
@@ -482,9 +482,9 @@ module Sql = struct
 
     let query_hash =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.string typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.string typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -500,8 +500,8 @@ module Sql = struct
 
     let query_both =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t2 string int64)
         typ
         (sprintf
            {|
@@ -521,9 +521,9 @@ module Sql = struct
 
     let query_by_id =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.int typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.int typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -539,9 +539,9 @@ module Sql = struct
 
     let query_best =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.unit typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.unit typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -578,7 +578,7 @@ module Sql = struct
           else
             let%bind max_height =
               Conn.find
-                (Caqti_request.find Caqti_type.unit Caqti_type.int64
+                (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
                    {sql| SELECT MAX(height) FROM blocks |sql} )
                 ()
             in
@@ -635,21 +635,16 @@ module Sql = struct
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.User_command.Signed_command.typ
+        t3 int Archive_lib.Processor.User_command.Signed_command.typ
           Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "u." ^ n)
-             Archive_lib.Processor.User_command.Signed_command.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup2 int string)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "u." ^ n)
+          Archive_lib.Processor.User_command.Signed_command.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
+      (sprintf
+        {|
          SELECT u.id,
                 %s,
                 pk_payer.value as fee_payer,
@@ -712,25 +707,20 @@ module Sql = struct
 
       let secondary_sequence_no (_, _, _, secondary_seq_no) = secondary_seq_no
 
-      let typ = Caqti_type.(tup4 (option int64) string int int)
+      let typ = Caqti_type.(t4 (option int64) string int int)
     end
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
+        t3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "i." ^ n)
-             Archive_lib.Processor.Internal_command.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup2 int string)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "i." ^ n)
+          Archive_lib.Processor.Internal_command.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
+      (sprintf
+        {|
          SELECT DISTINCT ON (i.hash,i.command_type,bic.sequence_no,bic.secondary_sequence_no)
            i.id,
            %s,
@@ -813,10 +803,10 @@ module Sql = struct
             ]
     end
 
-    let typ = Caqti_type.(tup2 int Extras.typ)
+    let typ = Caqti_type.(t2 int Extras.typ)
 
     let query =
-      Caqti_request.collect Caqti_type.int typ
+      Mina_caqti.collect_req Caqti_type.int typ
         {| 
          SELECT zc.id,
                 zc.memo,
@@ -857,20 +847,15 @@ module Sql = struct
 
     let typ =
       Caqti_type.(
-        tup2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
+        t2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "zaub." ^ n)
-             Archive_lib.Processor.Zkapp_account_update_body.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup3 int string int)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "zaub." ^ n)
+          Archive_lib.Processor.Zkapp_account_update_body.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t3 int string int) typ
+      (sprintf
+        {|
          SELECT %s,
                 pk.value as account,
                 bzc.status
diff --git a/src/app/rosetta/lib/construction.ml b/src/app/rosetta/lib/construction.ml
index 44be9d7863..318bc7ff7a 100644
--- a/src/app/rosetta/lib/construction.ml
+++ b/src/app/rosetta/lib/construction.ml
@@ -866,7 +866,9 @@ module Submit = struct
         Caqti_type.custom ~encode ~decode (to_rep spec)
 
       let query =
-        Caqti_request.find_opt params_typ Caqti_type.string
+        Mina_caqti.find_opt_req
+          params_typ
+          Caqti_type.string
           {sql| SELECT uc.id FROM user_commands uc
                 INNER JOIN public_keys AS pks ON pks.id = uc.source_id
                 INNER JOIN public_keys AS pkr ON pkr.id = uc.receiver_id
diff --git a/src/app/rosetta/lib/network.ml b/src/app/rosetta/lib/network.ml
index e60e316f74..65abac7842 100644
--- a/src/app/rosetta/lib/network.ml
+++ b/src/app/rosetta/lib/network.ml
@@ -75,10 +75,9 @@ end
 
 module Sql = struct
   let oldest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup2 int64 string)
-      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, \
-       state_hash ASC LIMIT 1"
+    Mina_caqti.find_req Caqti_type.unit
+      Caqti_type.(t2 int64 string)
+      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, state_hash ASC LIMIT 1"
 
   let max_height_delta =
     match Sys.getenv "MINA_ROSETTA_MAX_HEIGHT_DELTA" with
@@ -88,10 +87,10 @@ module Sql = struct
         0L
 
   let latest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup3 int64 string int64)
-      (sprintf
-         {sql| SELECT height, state_hash, timestamp FROM blocks b
+    Mina_caqti.find_req
+      Caqti_type.unit
+      Caqti_type.(t3 int64 string int64)
+      (sprintf {sql| SELECT height, state_hash, timestamp FROM blocks b
                      WHERE height = (select MAX(height) - %Ld FROM blocks)
                      ORDER BY timestamp ASC, state_hash ASC
                      LIMIT 1
diff --git a/src/app/rosetta/lib/pg_data.ml b/src/app/rosetta/lib/pg_data.ml
index 3e8d19499a..1dda81f8e9 100644
--- a/src/app/rosetta/lib/pg_data.ml
+++ b/src/app/rosetta/lib/pg_data.ml
@@ -1,7 +1,7 @@
 (* pg_data.ml -- Postgres data *)
 
 let query_connection_count =
-  Caqti_request.find Caqti_type.unit Caqti_type.int64
+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
     {sql| SELECT count(*) FROM pg_stat_activity
               WHERE state = 'active'
         |sql}
@@ -10,7 +10,7 @@ let run_connection_count (module Conn : Mina_caqti.CONNECTION) =
   Conn.find query_connection_count
 
 let query_lock_count =
-  Caqti_request.find Caqti_type.unit Caqti_type.int64
+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
     {sql| SELECT count(*) FROM pg_locks
               WHERE mode = 'SIReadLock'
         |sql}
diff --git a/src/app/swap_bad_balances/sql.ml b/src/app/swap_bad_balances/sql.ml
index 9f1537f032..bd85672b7e 100644
--- a/src/app/swap_bad_balances/sql.ml
+++ b/src/app/swap_bad_balances/sql.ml
@@ -5,8 +5,8 @@ open Async
 module Receiver_balances = struct
   (* find receiver balances for combined fee transfer *)
   let query_ids_from_fee_transfer =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int)
       Caqti_type.(int)
       {sql| SELECT bic.receiver_balance
             FROM blocks_internal_commands bic
@@ -24,8 +24,8 @@ module Receiver_balances = struct
     (* if duplicates, any is acceptable *)
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup2 int int64)
+        (Mina_caqti.find_opt_req
+           Caqti_type.(t2 int int64)
            Caqti_type.int
            {sql| SELECT id
                           FROM balances
@@ -39,8 +39,8 @@ module Receiver_balances = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find
-             Caqti_type.(tup2 int int64)
+          (Mina_caqti.find_req
+             Caqti_type.(t2 int int64)
              Caqti_type.int
              "INSERT INTO balances (public_key_id,balance) VALUES ($1,$2) \
               RETURNING id" )
@@ -48,9 +48,9 @@ module Receiver_balances = struct
 
   let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find
+      (Mina_caqti.find_req
          Caqti_type.(int)
-         Caqti_type.(tup2 int int64)
+         Caqti_type.(t2 int int64)
          {sql| SELECT public_key_id,balance
             FROM balances
             WHERE id = $1
@@ -58,8 +58,8 @@ module Receiver_balances = struct
       id
 
   let query_swap_in_new_balance =
-    Caqti_request.exec
-      Caqti_type.(tup4 string int int int)
+    Mina_caqti.exec_req
+      Caqti_type.(t4 string int int int)
       {sql| UPDATE blocks_internal_commands bic SET receiver_balance = $4
             FROM blocks b
             WHERE b.id = bic.block_id
diff --git a/src/lib/mina_caqti/mina_caqti.ml b/src/lib/mina_caqti/mina_caqti.ml
index 7c9d40e094..d70a04fcba 100644
--- a/src/lib/mina_caqti/mina_caqti.ml
+++ b/src/lib/mina_caqti/mina_caqti.ml
@@ -4,6 +4,14 @@ open Async
 open Core_kernel
 open Mina_base
 
+let find_req t u s = Caqti_request.Infix.(t ->! u) s
+
+let find_opt_req t u s = Caqti_request.Infix.(t ->? u) s
+
+let collect_req t u s = Caqti_request.Infix.(t ->* u) s
+
+let exec_req t s = Caqti_request.Infix.(t ->. Caqti_type.unit) s
+
 module type CONNECTION = sig
   include Caqti_async.CONNECTION
 
@@ -42,23 +50,20 @@ module Pool = struct
 end
 
 let connect_pool ?max_size uri =
-  let%map.Result pool = Caqti_async.connect_pool ?max_size uri in
+  let size = max_size in
+  let%map.Result pool =
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ?max_size:size ()))
+      uri
+  in
   Pool.wrap ~source:uri pool
 
 let connect uri =
   let%map.Deferred.Result conn = Caqti_async.connect uri in
   wrap_conn ~source:uri conn
 
-(* custom Caqti types for generating type annotations on queries *)
-type _ Caqti_type.field +=
-  | Array_nullable_int : int option array Caqti_type.field
-
-type _ Caqti_type.field +=
-  | Array_nullable_int64 : int64 option array Caqti_type.field
-
-type _ Caqti_type.field +=
-  | Array_nullable_string : string option array Caqti_type.field
-
 module Type_spec = struct
   type (_, _) t =
     | [] : (unit, unit) t
@@ -70,7 +75,7 @@ module Type_spec = struct
      | [] ->
          (Caqti_type.unit : tuple Caqti_type.t)
      | rep :: spec ->
-         Caqti_type.tup2 rep (to_rep spec)
+         Caqti_type.t2 rep (to_rep spec)
 
   let rec hlist_to_tuple :
             'hlist 'tuple.
@@ -138,59 +143,14 @@ let make_coding (type a) ~(elem_to_string : a -> string)
   in
   (encode, decode)
 
-(* register coding for nullable int arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
+(** this type may require type annotations in queries, eg.
+   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
+*)
+let array_nullable_int_typ =
   let encode, decode =
     make_coding ~elem_to_string:Int.to_string ~elem_of_string:Int.of_string
   in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_int ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_int { get_coding }
-
-(* register coding for nullable int64 arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
-  let encode, decode =
-    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
-  in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_int64 ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_int64 { get_coding }
-
-(* register coding for nullable string arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
-  let encode, decode =
-    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
-  in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_string ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_string { get_coding }
-
-(* this type may require type annotations in queries, eg.
-   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
-*)
-let array_nullable_int_typ : int option array Caqti_type.t =
-  Caqti_type.field Array_nullable_int
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_int_typ : int array Caqti_type.t =
   let open Result.Let_syntax in
@@ -203,11 +163,14 @@ let array_int_typ : int array Caqti_type.t =
   in
   Caqti_type.custom array_nullable_int_typ ~encode ~decode
 
-(* this type may require type annotations in queries, eg.
+(** this type may require type annotations in queries, eg.
    `SELECT id FROM zkapp_states WHERE element_ids = ?::bigint[]`
 *)
-let array_nullable_int64_typ : int64 option array Caqti_type.t =
-  Caqti_type.field Array_nullable_int64
+let array_nullable_int64_typ =
+  let encode, decode =
+    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
+  in
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_int64_typ : int64 array Caqti_type.t =
   let open Result.Let_syntax in
@@ -220,11 +183,14 @@ let array_int64_typ : int64 array Caqti_type.t =
   in
   Caqti_type.custom array_nullable_int64_typ ~encode ~decode
 
-(* this type may require type annotations in queries, e.g.
+(** this type may require type annotations in queries, e.g.
    `SELECT id FROM zkapp_states WHERE element_ids = ?::string[]`
 *)
-let array_nullable_string_typ : string option array Caqti_type.t =
-  Caqti_type.field Array_nullable_string
+let array_nullable_string_typ =
+  let encode, decode =
+    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
+  in
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_string_typ : string array Caqti_type.t =
   let open Result.Let_syntax in
@@ -327,7 +293,7 @@ let insert_assuming_new ~(select : string * 'select Caqti_type.t)
     ~(table_name : string) ?tannot ~(cols : string list * 'cols Caqti_type.t)
     (module Conn : CONNECTION) (value : 'cols) =
   Conn.find
-    ( Caqti_request.find (snd cols) (snd select)
+    ( find_req (snd cols) (snd select)
     @@ insert_into_cols ~returning:(fst select) ~table_name ?tannot
          ~cols:(fst cols) () )
     value
@@ -340,7 +306,7 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
     (module Conn : CONNECTION) (value : 'cols) =
   let open Deferred.Result.Let_syntax in
   Conn.find_opt
-    ( Caqti_request.find_opt (snd cols) (snd select)
+    ( Caqti_request.Infix.(snd cols ->? snd select)
     @@ select_cols ~select:(fst select) ~table_name ?tannot ~cols:(fst cols) ()
     )
     value
@@ -348,7 +314,11 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
   | Some id ->
       return id
   | None ->
-      insert_assuming_new ~select ~table_name ?tannot ~cols (module Conn) value
+      Conn.find
+        ( Caqti_request.Infix.(snd cols ->! snd select)
+        @@ insert_into_cols ~returning:(fst select) ~table_name ?tannot
+             ~cols:(fst cols) () )
+        value
 
 let sep_by_comma ?(parenthesis = false) xs =
   List.map xs ~f:(if parenthesis then sprintf "('%s')" else sprintf "'%s'")
@@ -367,7 +337,11 @@ let insert_multi_into_col ~(table_name : string)
       (sep_by_comma ~parenthesis:true values)
       (fst col)
   in
-  let%bind () = Conn.exec (Caqti_request.exec Caqti_type.unit insert) () in
+  let%bind () =
+    Conn.exec
+      (Caqti_request.Infix.(Caqti_type.unit ->. Caqti_type.unit) insert)
+      ()
+  in
   let search =
     sprintf
       {sql| SELECT %s, id FROM %s
@@ -375,9 +349,8 @@ let insert_multi_into_col ~(table_name : string)
       (fst col) table_name (fst col) (sep_by_comma values)
   in
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (snd col) int)
-       search )
+    Caqti_request.Infix.(
+      (Caqti_type.unit ->* Caqti_type.(t2 (snd col) int)) search)
     ()
 
 let query ~f pool =
