diff --git a/opam.export b/opam.export
index 655b623d35..130eb77140 100644
--- a/opam.export
+++ b/opam.export
@@ -69,9 +69,9 @@ installed: [
   "camlp4.4.14+1"
   "camomile.1.0.2"
   "capnp.3.4.0"
-  "caqti.1.5.0"
-  "caqti-async.1.3.0"
-  "caqti-driver-postgresql.1.5.1"
+  "caqti.2.0.1"
+  "caqti-async.2.0.1"
+  "caqti-driver-postgresql.2.0.1"
   "charInfo_width.1.1.0"
   "check_opam_switch.~dev"
   "cmdliner.1.0.3"
@@ -138,6 +138,7 @@ installed: [
   "lmdb.1.0"
   "logs.0.7.0"
   "lwt.5.4.0"
+  "lwt-dllist.1.0.1"
   "lwt_log.1.1.1"
   "lwt_react.1.1.2"
   "macaddr.5.0.1"
@@ -155,6 +156,7 @@ installed: [
   "mirage-crypto-rng.0.11.0"
   "mirage-crypto-rng-async.0.11.0"
   "mmap.1.1.0"
+  "mtime.2.0.0"
   "num.1.1"
   "ocaml.4.14.0"
   "ocaml-base-compiler.4.14.0"
diff --git a/src/app/archive/cli/archive_cli.ml b/src/app/archive/cli/archive_cli.ml
index 0868f63e37..e4cf825b0e 100644
--- a/src/app/archive/cli/archive_cli.ml
+++ b/src/app/archive/cli/archive_cli.ml
@@ -85,9 +85,7 @@ let command_prune =
        in
        let go () =
          let open Deferred.Result.Let_syntax in
-         let%bind ((module Conn) as conn) =
-           Caqti_async.connect postgres.value
-         in
+         let%bind ((module Conn) as conn) = Mina_caqti.connect postgres.value in
          let%bind () = Conn.start () in
          match%bind.Async.Deferred
            let%bind () =
diff --git a/src/app/archive/cli/dune b/src/app/archive/cli/dune
index 917ed0b1ba..5f63637d42 100644
--- a/src/app/archive/cli/dune
+++ b/src/app/archive/cli/dune
@@ -17,6 +17,7 @@
    cli_lib
    logger
    block_time
+   mina_caqti
  )
  (instrumentation (backend bisect_ppx))
  (preprocess (pps ppx_version ppx_jane ppx_mina)))
diff --git a/src/app/archive/drop_tables.sql b/src/app/archive/drop_tables.sql
index 571327de81..f9dca92cd7 100644
--- a/src/app/archive/drop_tables.sql
+++ b/src/app/archive/drop_tables.sql
@@ -105,3 +105,7 @@ DROP TABLE zkapp_events;
 DROP TABLE token_symbols;
 
 DROP TABLE voting_for;
+
+DROP TABLE zkapp_field;
+
+DROP TABLE zkapp_verification_key_hashes;
diff --git a/src/app/archive/lib/load_data.ml b/src/app/archive/lib/load_data.ml
index 1ca76d1a0b..4b4faf66dd 100644
--- a/src/app/archive/lib/load_data.ml
+++ b/src/app/archive/lib/load_data.ml
@@ -91,9 +91,9 @@ let update_of_id pool update_id =
   let open Zkapp_basic in
   let query_db ~f = Mina_caqti.query ~f pool in
   let with_pool ~f arg =
-    let open Caqti_async in
+    let open Mina_caqti in
     Pool.use
-      (fun (module Conn : CONNECTION) -> f (module Conn : CONNECTION) arg)
+      (fun (module Conn : Mina_caqti.CONNECTION) -> f (module Conn : Mina_caqti.CONNECTION) arg)
       pool
   in
   let%bind { app_state_id
@@ -636,9 +636,9 @@ let get_account_accessed ~pool (account : Processor.Accounts_accessed.t) :
     (int * Account.t) Deferred.t =
   let query_db ~f = Mina_caqti.query ~f pool in
   let with_pool ~f arg =
-    let open Caqti_async in
+    let open Mina_caqti in
     Pool.use
-      (fun (module Conn : CONNECTION) -> f (module Conn : CONNECTION) arg)
+      (fun (module Conn : Mina_caqti.CONNECTION) -> f (module Conn : Mina_caqti.CONNECTION) arg)
       pool
   in
   let pk_of_id = pk_of_id pool in
diff --git a/src/app/archive/lib/metrics.ml b/src/app/archive/lib/metrics.ml
index c69e1805d1..bf15430c54 100644
--- a/src/app/archive/lib/metrics.ml
+++ b/src/app/archive/lib/metrics.ml
@@ -14,10 +14,10 @@ let default_missing_blocks_width = 2000
 
 module Max_block_height = struct
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       "SELECT GREATEST(0, MAX(height)) FROM blocks"
 
-  let update (module Conn : Caqti_async.CONNECTION) metric_server =
+  let update (module Conn : Mina_caqti.CONNECTION) metric_server =
     time ~label:"max_block_height" (fun () ->
         let open Deferred.Result.Let_syntax in
         let%map max_height = Conn.find query () in
@@ -30,7 +30,7 @@ end
 module Missing_blocks = struct
   (*A block is missing if there is no entry for a specific height. However, if there is an entry then it doesn't necessarily mean that it is part of the main chain. Unparented_blocks will show value > 1 in that case. Look for the last 2000 blocks*)
   let query missing_blocks_width =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       (Core_kernel.sprintf
          {sql| 
         SELECT COUNT( * )
@@ -40,7 +40,7 @@ module Missing_blocks = struct
       |sql}
          missing_blocks_width )
 
-  let update ~missing_blocks_width (module Conn : Caqti_async.CONNECTION)
+  let update ~missing_blocks_width (module Conn : Mina_caqti.CONNECTION)
       metric_server =
     let open Deferred.Result.Let_syntax in
     time ~label:"missing_blocks" (fun () ->
@@ -55,13 +55,13 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       {sql|
            SELECT COUNT( * ) FROM blocks
            WHERE parent_id IS NULL
       |sql}
 
-  let update (module Conn : Caqti_async.CONNECTION) metric_server =
+  let update (module Conn : Mina_caqti.CONNECTION) metric_server =
     let open Deferred.Result.Let_syntax in
     time ~label:"unparented_blocks" (fun () ->
         let%map unparented_block_count = Conn.find query () in
@@ -73,13 +73,13 @@ end
 
 let log_error ~logger pool metric_server
     (f :
-         (module Caqti_async.CONNECTION)
+         (module Mina_caqti.CONNECTION)
       -> Mina_metrics.Archive.t
       -> (unit, [> Caqti_error.call_or_retrieve ]) Deferred.Result.t ) =
   let open Deferred.Let_syntax in
   match%map
-    Caqti_async.Pool.use
-      (fun (module Conn : Caqti_async.CONNECTION) ->
+    Mina_caqti.Pool.use
+      (fun (module Conn : Mina_caqti.CONNECTION) ->
         f (module Conn) metric_server )
       pool
   with
diff --git a/src/app/archive/lib/processor.ml b/src/app/archive/lib/processor.ml
index bec5544e41..fd99cc96e1 100644
--- a/src/app/archive/lib/processor.ml
+++ b/src/app/archive/lib/processor.ml
@@ -21,7 +21,6 @@
 module Archive_rpc = Rpc
 open Async
 open Core
-open Caqti_async
 open Mina_base
 open Mina_transaction
 open Mina_state
@@ -29,6 +28,7 @@ open Mina_block
 open Pipe_lib
 open Signature_lib
 open Pickles_types
+open Mina_caqti
 
 let applied_str = "applied"
 
@@ -38,39 +38,89 @@ let txn_hash_to_base58_check ?(v1_transaction_hash = false) hash =
   if v1_transaction_hash then Transaction_hash.to_base58_check_v1 hash
   else Transaction_hash.to_base58_check hash
 
+let unwrap t = Result.map_error ~f:Caqti_error.show t |> Result.ok_or_failwith
+
+let ensure_local_copies (module Conn : Mina_caqti.CONNECTION) ~default tbl =
+  Hashtbl.find_or_add ~default tbl (Uri.to_string Conn.source)
+
+let load_copy' ~default ~local_copies ~typ ~query ~load_elt
+    (module Conn : Mina_caqti.CONNECTION) =
+  match Hashtbl.find local_copies (Uri.to_string Conn.source) with
+  | Some copy ->
+      Deferred.return copy
+  | None ->
+      let t_to_id = ensure_local_copies (module Conn) ~default local_copies in
+      let%bind all_rows =
+        Conn.collect_list (Mina_caqti.collect_req Caqti_type.unit typ query) ()
+      in
+      let%map () =
+        Deferred.List.iter (unwrap all_rows) ~f:(fun row ->
+            load_elt t_to_id row )
+      in
+      t_to_id
+
+let add_bidi m1 m2 ~key ~data =
+  Hashtbl.add_exn m1 ~key ~data ;
+  Hashtbl.add_exn m2 ~key:data ~data:key
+
+let add_bidi_mapped m1 m2 ~key ~data ~value =
+  Hashtbl.add_exn m1 ~key ~data ;
+  Hashtbl.add_exn m2 ~key:value ~data:key
+
 module Public_key = struct
-  let find (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
-    let public_key = Public_key.Compressed.to_base58_check t in
-    Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
-         "SELECT id FROM public_keys WHERE value = ?" )
-      public_key
+  type local_copy =
+    { id_to_key : (int, Public_key.Compressed.t) Hashtbl.t
+    ; key_to_id : (Public_key.Compressed.t, int) Hashtbl.t
+    }
 
-  let find_opt (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
-    let public_key = Public_key.Compressed.to_base58_check t in
-    Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
-         "SELECT id FROM public_keys WHERE value = ?" )
-      public_key
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () ->
+        { id_to_key = Hashtbl.create (module Int)
+        ; key_to_id = Hashtbl.create (module Public_key.Compressed)
+        } )
+      ~local_copies
+      ~typ:Caqti_type.(t2 int string)
+      ~query:{sql| SELECT id, value FROM public_keys |sql}
+      ~load_elt:(fun { id_to_key; key_to_id } (id, keytext) ->
+        let key = Public_key.Compressed.of_base58_check_exn keytext in
+        add_bidi id_to_key key_to_id ~key:id ~data:key ;
+        Deferred.unit )
 
-  let find_by_id (module Conn : CONNECTION) id =
-    Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
-         "SELECT value FROM public_keys WHERE id = ?" )
-      id
+  let find (module Conn : Mina_caqti.CONNECTION) (t : Public_key.Compressed.t) =
+    let%map local = load_copy (module Conn) in
+    Ok (Hashtbl.find_exn local.key_to_id t)
+
+  let find_opt (module Conn : Mina_caqti.CONNECTION)
+      (t : Public_key.Compressed.t) =
+    let%map local = load_copy (module Conn) in
+    Ok (Hashtbl.find local.key_to_id t)
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
+    let%map local = load_copy (module Conn) in
+    Ok
+      ( Hashtbl.find_exn local.id_to_key id
+      |> Public_key.Compressed.to_base58_check )
+
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (t : Public_key.Compressed.t) =
+    let%bind local = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     match%bind find_opt (module Conn) t with
     | Some id ->
         return id
     | None ->
         let public_key = Public_key.Compressed.to_base58_check t in
-        Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
-             "INSERT INTO public_keys (value) VALUES (?) RETURNING id" )
-          public_key
+        let%map.Deferred.Result new_id =
+          Conn.find
+            (Mina_caqti.find_req Caqti_type.string Caqti_type.int
+               "INSERT INTO public_keys (value) VALUES (?) RETURNING id" )
+            public_key
+        in
+        add_bidi local.id_to_key local.key_to_id ~key:new_id ~data:t ;
+        new_id
 end
 
 (* Unlike other modules here, `Token_owners` does not correspond with a database table *)
@@ -99,46 +149,72 @@ module Token = struct
   include T
   include Comparable.Make (T)
 
+  type local_copy =
+    { id_to_t : (int, t) Hashtbl.t; value_to_id : (string, int) Hashtbl.t }
+
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () ->
+        { id_to_t = Hashtbl.create (module Int)
+        ; value_to_id = Hashtbl.create (module String)
+        } )
+      ~local_copies
+      ~typ:Caqti_type.(t4 int string (option int) (option int))
+      ~query:
+        {sql| SELECT id, value, owner_public_key_id, owner_token_id FROM tokens |sql}
+      ~load_elt:(fun { id_to_t; value_to_id }
+                     (id, value, owner_public_key_id, owner_token_id) ->
+        let t = { value; owner_public_key_id; owner_token_id } in
+        add_bidi_mapped id_to_t value_to_id ~key:id ~data:t ~value ;
+        Deferred.unit )
+
   let typ =
     Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
       Caqti_type.[ string; option int; option int ]
 
   let table_name = "tokens"
 
-  let find_by_id (module Conn : CONNECTION) id =
-    Conn.find
-      (Caqti_request.find Caqti_type.int typ
-         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-      id
-
-  let make_finder conn_finder req_finder token_id =
-    conn_finder
-      (req_finder Caqti_type.string Caqti_type.int
-         (Mina_caqti.select_cols ~table_name ~select:"id" ~cols:[ "value" ] ()) )
-      (Token_id.to_string token_id)
+  let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
+    let%map local = load_copy (module Conn) in
+    Ok (Hashtbl.find_exn local.id_to_t id)
 
-  let find (module Conn : CONNECTION) = make_finder Conn.find Caqti_request.find
+  let find (module Conn : Mina_caqti.CONNECTION) token_id =
+    let%map local = load_copy (module Conn) in
+    Ok (Hashtbl.find_exn local.value_to_id (Token_id.to_string token_id))
 
-  let find_opt (module Conn : CONNECTION) =
-    make_finder Conn.find_opt Caqti_request.find_opt
+  let find_opt (module Conn : Mina_caqti.CONNECTION) token_id =
+    let%map local = load_copy (module Conn) in
+    Ok (Hashtbl.find local.value_to_id (Token_id.to_string token_id))
 
-  let find_no_owner_opt (module Conn : CONNECTION) token_id =
+  let find_no_owner_opt (module Conn : Mina_caqti.CONNECTION) token_id =
+    let%map local = load_copy (module Conn) in
     let value = Token_id.to_string token_id in
-    Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
-         {sql| SELECT id
-               FROM tokens
-               WHERE value = $1
-               AND owner_public_key_id IS NULL
-               AND owner_token_id IS NULL
-         |sql} )
-      value
+    Ok
+      ( match Hashtbl.find local.value_to_id value with
+      | Some id -> (
+          match Hashtbl.find local.id_to_t id with
+          | Some { owner_public_key_id = None; owner_token_id = None; _ } ->
+              Some id
+          | _ ->
+              None )
+      | None ->
+          None )
 
-  let set_owner (module Conn : CONNECTION) ~id ~owner_public_key_id
+  let set_owner (module Conn : Mina_caqti.CONNECTION) ~id ~owner_public_key_id
       ~owner_token_id =
+    let%bind local = load_copy (module Conn) in
+    Hashtbl.set local.id_to_t ~key:id
+      ~data:
+        { (Hashtbl.find_exn local.id_to_t id) with
+          owner_public_key_id = Some owner_public_key_id
+        ; owner_token_id = Some owner_token_id
+        } ;
+
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          Caqti_type.int
          {sql| UPDATE tokens
                SET owner_public_key_id = $2, owner_token_id = $3
@@ -147,16 +223,29 @@ module Token = struct
          |sql} )
       (id, owner_public_key_id, owner_token_id)
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) token_id =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) token_id =
+    let%bind local = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     let value = Token_id.to_string token_id in
     match Token_owners.find_owner token_id with
-    | None ->
+    | None -> (
         (* not necessarily the default token *)
-        Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-          ~table_name ~cols:(Fields.names, typ)
-          (module Conn)
-          { value; owner_public_key_id = None; owner_token_id = None }
+        match Hashtbl.find local.value_to_id value with
+        | None ->
+            let t =
+              { value; owner_public_key_id = None; owner_token_id = None }
+            in
+            let%map new_id =
+              Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+                ~table_name ~cols:(Fields.names, typ)
+                (module Conn)
+                t
+            in
+            add_bidi_mapped local.id_to_t local.value_to_id ~key:new_id ~data:t
+              ~value ;
+            new_id
+        | Some id ->
+            return id )
     | Some acct_id -> (
         assert (not @@ Token_id.(equal default) token_id) ;
         assert (
@@ -180,10 +269,16 @@ module Token = struct
         | None ->
             let owner_public_key_id = Some owner_public_key_id in
             let owner_token_id = Some owner_token_id in
-            Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-              ~table_name ~cols:(Fields.names, typ)
-              (module Conn)
-              { value; owner_public_key_id; owner_token_id } )
+            let t = { value; owner_public_key_id; owner_token_id } in
+            let%map new_id =
+              Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+                ~table_name ~cols:(Fields.names, typ)
+                (module Conn)
+                t
+            in
+            add_bidi_mapped local.id_to_t local.value_to_id ~key:new_id ~data:t
+              ~value ;
+            new_id )
 end
 
 module Voting_for = struct
@@ -193,16 +288,40 @@ module Voting_for = struct
 
   let table_name = "voting_for"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) voting_for =
-    Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-      ~table_name
-      ~cols:([ "value" ], typ)
-      (module Conn)
-      (State_hash.to_base58_check voting_for)
+  type local_copy = (string, int) Hashtbl.t
 
-  let load (module Conn : CONNECTION) id =
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () -> Hashtbl.create (module String))
+      ~local_copies
+      ~typ:Caqti_type.(t2 int string)
+      ~query:{sql| SELECT id, value FROM voting_for |sql}
+      ~load_elt:(fun t_to_id (id, value) ->
+        Hashtbl.add_exn t_to_id ~key:value ~data:id ;
+        Deferred.unit )
+
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) voting_for =
+    let%bind t_to_id = load_copy (module Conn) in
+    let voting_for = State_hash.to_base58_check voting_for in
+    match Hashtbl.find t_to_id voting_for with
+    | Some id ->
+        Deferred.Result.return id
+    | None ->
+        let%map.Deferred.Result new_id =
+          Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+            ~table_name
+            ~cols:([ "value" ], typ)
+            (module Conn)
+            voting_for
+        in
+        Hashtbl.add_exn t_to_id ~key:voting_for ~data:new_id ;
+        new_id
+
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -214,16 +333,40 @@ module Token_symbols = struct
 
   let table_name = "token_symbols"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) token_symbol =
-    Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-      ~table_name
-      ~cols:([ "value" ], typ)
-      (module Conn)
-      token_symbol
+  type local_copy = (string, int) Hashtbl.t
+
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () -> Hashtbl.create (module String))
+      ~local_copies
+      ~typ:Caqti_type.(t2 int string)
+      ~query:{sql| SELECT id, value FROM token_symbols |sql}
+      ~load_elt:(fun t_to_id (id, value) ->
+        Hashtbl.add_exn t_to_id ~key:value ~data:id ;
+        Deferred.unit )
 
-  let load (module Conn : CONNECTION) id =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) token_symbol =
+    let%bind t_to_id = load_copy (module Conn) in
+    let open Deferred.Result.Let_syntax in
+    match Hashtbl.find t_to_id token_symbol with
+    | Some id ->
+        return id
+    | None ->
+        let%map new_id =
+          Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+            ~table_name
+            ~cols:([ "value" ], typ)
+            (module Conn)
+            token_symbol
+        in
+        Hashtbl.add_exn t_to_id ~key:token_symbol ~data:new_id ;
+        new_id
+
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -242,7 +385,29 @@ module Account_identifiers = struct
 
   let table_name = "account_identifiers"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) account_id =
+  type local_copy = (int * int, int) Hashtbl.t
+
+  let local_copies = Hashtbl.create (module String)
+
+  let loaded = ref false
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () ->
+        Hashtbl.create
+          ( module struct
+            type t = int * int [@@deriving compare, sexp, hash]
+          end ) )
+      ~local_copies
+      ~typ:Caqti_type.(t3 int int int)
+      ~query:
+        {sql| SELECT id,public_key_id,token_id FROM account_identifiers |sql}
+      ~load_elt:(fun t_to_id (id, public_key_id, token_id) ->
+        Hashtbl.add_exn t_to_id ~key:(public_key_id, token_id) ~data:id ;
+        Deferred.unit )
+
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) account_id =
+    let%bind t_to_id = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     let pk = Account_id.public_key account_id in
     (* this token_id is Token_id.t *)
@@ -251,12 +416,21 @@ module Account_identifiers = struct
     (* this token_id is a Postgresql table id *)
     let%bind token_id = Token.add_if_doesn't_exist (module Conn) token_id in
     let t = { public_key_id; token_id } in
-    Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-      ~table_name ~cols:(Fields.names, typ)
-      (module Conn)
-      t
+    match Hashtbl.find t_to_id (public_key_id, token_id) with
+    | None ->
+        let%map new_id =
+          Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+            ~table_name ~cols:(Fields.names, typ)
+            (module Conn)
+            t
+        in
+        Hashtbl.add_exn t_to_id ~key:(public_key_id, token_id) ~data:new_id ;
+        new_id
+    | Some id ->
+        Deferred.Result.return id
 
-  let find_opt (module Conn : CONNECTION) account_id =
+  let find_opt (module Conn : Mina_caqti.CONNECTION) account_id =
+    let%bind t_to_id = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     let pk = Account_id.public_key account_id in
     match%bind Public_key.find_opt (module Conn) pk with
@@ -268,30 +442,20 @@ module Account_identifiers = struct
         | None ->
             return None
         | Some tok_id ->
-            Conn.find_opt
-              (Caqti_request.find_opt
-                 Caqti_type.(tup2 int int)
-                 Caqti_type.int
-                 (Mina_caqti.select_cols ~select:"id" ~table_name
-                    ~cols:Fields.names () ) )
-              (pk_id, tok_id) )
-
-  let find (module Conn : CONNECTION) account_id =
+            return (Hashtbl.find t_to_id (pk_id, tok_id)) )
+
+  let find (module Conn : Mina_caqti.CONNECTION) account_id =
+    let%bind t_to_id = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     let pk = Account_id.public_key account_id in
     let%bind public_key_id = Public_key.find (module Conn) pk in
     let token = Account_id.token_id account_id in
-    let%bind token_id = Token.find (module Conn) token in
-    Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup2 int int)
-         Caqti_type.int
-         (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
-      (public_key_id, token_id)
+    let%map token_id = Token.find (module Conn) token in
+    Hashtbl.find_exn t_to_id (public_key_id, token_id)
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -299,7 +463,7 @@ end
 module Zkapp_field = struct
   let table_name = "zkapp_field"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (fp : Pickles.Backend.Tick.Field.t) =
     Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
       ~table_name
@@ -307,9 +471,9 @@ module Zkapp_field = struct
       (module Conn)
       (Pickles.Backend.Tick.Field.to_string fp)
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "field" ]) )
       id
 end
@@ -317,7 +481,7 @@ end
 module Zkapp_field_array = struct
   let table_name = "zkapp_field_array"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (fps : Pickles.Backend.Tick.Field.t array) =
     let open Deferred.Result.Let_syntax in
     let%bind (element_ids : int array) =
@@ -332,9 +496,9 @@ module Zkapp_field_array = struct
       (module Conn)
       element_ids
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
+      (find_req Caqti_type.int Mina_caqti.array_int_typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
       id
 end
@@ -367,7 +531,7 @@ module Zkapp_states_nullable = struct
 
   let table_name = "zkapp_states_nullable"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (fps : (Pickles.Backend.Tick.Field.t option, 'n) Vector.vec) =
     let open Deferred.Result.Let_syntax in
     let%bind (element_ids : int option list) =
@@ -404,9 +568,9 @@ module Zkapp_states_nullable = struct
       (module Conn)
       t
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -430,7 +594,7 @@ module Zkapp_states = struct
 
   let table_name = "zkapp_states"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (fps : (Pickles.Backend.Tick.Field.t, 'n) Vector.vec) =
     let open Deferred.Result.Let_syntax in
     let%bind (element_ids : int list) =
@@ -465,9 +629,9 @@ module Zkapp_states = struct
       (module Conn)
       t
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -488,7 +652,7 @@ module Zkapp_action_states = struct
 
   let table_name = "zkapp_action_states"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (fps : (Pickles.Backend.Tick.Field.t, 'n) Vector.vec) =
     let open Deferred.Result.Let_syntax in
     let%bind (element_ids : int list) =
@@ -507,9 +671,9 @@ module Zkapp_action_states = struct
       (module Conn)
       t
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -521,7 +685,7 @@ module Zkapp_verification_key_hashes = struct
 
   let table_name = "zkapp_verification_key_hashes"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (verification_key_hash : Pickles.Backend.Tick.Field.t) =
     Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
       ~table_name
@@ -529,9 +693,9 @@ module Zkapp_verification_key_hashes = struct
       (module Conn)
       (Pickles.Backend.Tick.Field.to_string verification_key_hash)
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -546,7 +710,7 @@ module Zkapp_verification_keys = struct
 
   let table_name = "zkapp_verification_keys"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (vk :
         ( Pickles.Side_loaded.Verification_key.t
         , Pickles.Backend.Tick.Field.t )
@@ -564,9 +728,9 @@ module Zkapp_verification_keys = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -586,32 +750,59 @@ module Protocol_versions = struct
 
   let table_name = "protocol_versions"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) ~transaction ~network
-      ~patch =
+  type local_copy = (t, int) Hashtbl.t
+
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () -> Hashtbl.create (module T))
+      ~local_copies
+      ~typ:Caqti_type.(t4 int int int int)
+      ~query:
+        {sql| SELECT id, transaction, network, patch FROM protocol_versions |sql}
+      ~load_elt:(fun t_to_id (id, transaction, network, patch) ->
+        Hashtbl.add_exn t_to_id ~key:{ transaction; network; patch } ~data:id ;
+        Deferred.unit )
+
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) ~transaction
+      ~network ~patch =
     let t = { transaction; network; patch } in
-    Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-      ~table_name ~cols:(Fields.names, typ)
-      (module Conn)
-      t
+    let%bind t_to_id = load_copy (module Conn) in
+    match Hashtbl.find t_to_id t with
+    | Some id ->
+        return (Ok id)
+    | None ->
+        let%map.Deferred.Result new_id =
+          Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+            ~table_name ~cols:(Fields.names, typ)
+            (module Conn)
+            t
+        in
+        Hashtbl.add_exn t_to_id ~key:t ~data:new_id ;
+        new_id
 
-  let find (module Conn : CONNECTION) ~transaction ~network ~patch =
+  let find (module Conn : Mina_caqti.CONNECTION) ~transaction ~network ~patch =
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:Fields.names ()) )
       (transaction, network, patch)
 
-  let find_txn_version (module Conn : CONNECTION) ~transaction =
-    Conn.collect_list
-      (Caqti_request.collect Caqti_type.int Caqti_type.int
-         {sql| SELECT id FROM protocol_versions WHERE transaction = ?
-        |sql} )
-      transaction
+  let find_by_txn_version (module Conn : Mina_caqti.CONNECTION) ~transaction =
+    let%map t_to_id = load_copy (module Conn) in
+    let matching_ids =
+      Hashtbl.fold ~init:[]
+        ~f:(fun ~key ~data acc ->
+          if Int.(key.transaction = transaction) then data :: acc else acc )
+        t_to_id
+    in
+    Ok matching_ids
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -646,23 +837,81 @@ module Zkapp_permissions = struct
     in
     Caqti_type.enum ~encode ~decode "zkapp_auth_required_type"
 
-  type t =
-    { edit_state : Permissions.Auth_required.t
-    ; send : Permissions.Auth_required.t
-    ; receive : Permissions.Auth_required.t
-    ; access : Permissions.Auth_required.t
-    ; set_delegate : Permissions.Auth_required.t
-    ; set_permissions : Permissions.Auth_required.t
-    ; set_verification_key_auth : Permissions.Auth_required.t
-    ; set_verification_key_txn_version : int
-    ; set_zkapp_uri : Permissions.Auth_required.t
-    ; edit_action_state : Permissions.Auth_required.t
-    ; set_token_symbol : Permissions.Auth_required.t
-    ; increment_nonce : Permissions.Auth_required.t
-    ; set_voting_for : Permissions.Auth_required.t
-    ; set_timing : Permissions.Auth_required.t
-    }
-  [@@deriving fields, hlist]
+  module T = struct
+    type t =
+      { edit_state : Permissions.Auth_required.t
+      ; send : Permissions.Auth_required.t
+      ; receive : Permissions.Auth_required.t
+      ; access : Permissions.Auth_required.t
+      ; set_delegate : Permissions.Auth_required.t
+      ; set_permissions : Permissions.Auth_required.t
+      ; set_verification_key_auth : Permissions.Auth_required.t
+      ; set_verification_key_txn_version : int
+      ; set_zkapp_uri : Permissions.Auth_required.t
+      ; edit_action_state : Permissions.Auth_required.t
+      ; set_token_symbol : Permissions.Auth_required.t
+      ; increment_nonce : Permissions.Auth_required.t
+      ; set_voting_for : Permissions.Auth_required.t
+      ; set_timing : Permissions.Auth_required.t
+      }
+    [@@deriving fields, hlist, compare, sexp, hash]
+  end
+
+  module With_id = struct
+    type t =
+      { id : int
+      ; edit_state : Permissions.Auth_required.t
+      ; send : Permissions.Auth_required.t
+      ; receive : Permissions.Auth_required.t
+      ; access : Permissions.Auth_required.t
+      ; set_delegate : Permissions.Auth_required.t
+      ; set_permissions : Permissions.Auth_required.t
+      ; set_verification_key_auth : Permissions.Auth_required.t
+      ; set_verification_key_txn_version : int
+      ; set_zkapp_uri : Permissions.Auth_required.t
+      ; edit_action_state : Permissions.Auth_required.t
+      ; set_token_symbol : Permissions.Auth_required.t
+      ; increment_nonce : Permissions.Auth_required.t
+      ; set_voting_for : Permissions.Auth_required.t
+      ; set_timing : Permissions.Auth_required.t
+      }
+    [@@deriving fields, hlist, compare, sexp, hash]
+
+    let forget_id
+        { id = _
+        ; edit_state
+        ; send
+        ; receive
+        ; access
+        ; set_delegate
+        ; set_permissions
+        ; set_verification_key_auth
+        ; set_verification_key_txn_version
+        ; set_zkapp_uri
+        ; edit_action_state
+        ; set_token_symbol
+        ; increment_nonce
+        ; set_voting_for
+        ; set_timing
+        } =
+      { T.edit_state
+      ; send
+      ; receive
+      ; access
+      ; set_delegate
+      ; set_permissions
+      ; set_verification_key_auth
+      ; set_verification_key_txn_version
+      ; set_zkapp_uri
+      ; edit_action_state
+      ; set_token_symbol
+      ; increment_nonce
+      ; set_voting_for
+      ; set_timing
+      }
+  end
+
+  include T
 
   let typ =
     Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
@@ -682,9 +931,51 @@ module Zkapp_permissions = struct
       ; auth_required_typ
       ]
 
+  let typ_with_id : With_id.t Caqti_type.t =
+    let open With_id in
+    Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
+      [ Caqti_type.int
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; Caqti_type.int
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ; auth_required_typ
+      ]
+
   let table_name = "zkapp_permissions"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) (perms : Permissions.t) =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
+    Conn.find
+      (Mina_caqti.find_req Caqti_type.int typ
+         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
+      id
+
+  type local_copy = (t, int) Hashtbl.t
+
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () -> Hashtbl.create (module T))
+      ~local_copies ~typ:typ_with_id
+      ~query:
+        (sprintf {sql| SELECT %s FROM zkapp_permissions |sql}
+           (String.concat ~sep:"," With_id.Fields.names) )
+      ~load_elt:(fun t_to_id t ->
+        Hashtbl.add_exn t_to_id ~key:(With_id.forget_id t) ~data:t.id ;
+        Deferred.unit )
+
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
+      (perms : Permissions.t) =
     let value =
       { edit_state = perms.edit_state
       ; send = perms.send
@@ -703,16 +994,21 @@ module Zkapp_permissions = struct
       ; set_timing = perms.set_timing
       }
     in
-    Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
-      ~table_name ~cols:(Fields.names, typ)
-      (module Conn)
-      value
+    let%bind t_to_id = load_copy (module Conn) in
 
-  let load (module Conn : CONNECTION) id =
-    Conn.find
-      (Caqti_request.find Caqti_type.int typ
-         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-      id
+    let open Deferred.Result.Let_syntax in
+    match Hashtbl.find t_to_id value with
+    | Some id ->
+        return id
+    | None ->
+        let%map new_id =
+          Mina_caqti.insert_assuming_new ~select:("id", Caqti_type.int)
+            ~table_name ~cols:(Fields.names, typ)
+            (module Conn)
+            value
+        in
+        Hashtbl.add_exn t_to_id ~key:value ~data:new_id ;
+        new_id
 end
 
 module Zkapp_timing_info = struct
@@ -731,7 +1027,7 @@ module Zkapp_timing_info = struct
 
   let table_name = "zkapp_timing_info"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (timing_info : Account_update.Update.Timing_info.t) =
     let initial_minimum_balance =
       Currency.Balance.to_string timing_info.initial_minimum_balance
@@ -761,9 +1057,9 @@ module Zkapp_timing_info = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -775,16 +1071,16 @@ module Zkapp_uri = struct
 
   let table_name = "zkapp_uris"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) zkapp_uri =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) zkapp_uri =
     Mina_caqti.select_insert_into_cols ~select:("id", Caqti_type.int)
       ~table_name
       ~cols:([ "value" ], typ)
       (module Conn)
       zkapp_uri
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "value" ]) )
       id
 end
@@ -817,7 +1113,7 @@ module Zkapp_updates = struct
 
   let table_name = "zkapp_updates"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (update : Account_update.Update.t) =
     let open Deferred.Result.Let_syntax in
     let%bind app_state_id =
@@ -875,9 +1171,9 @@ module Zkapp_updates = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -892,7 +1188,7 @@ module Zkapp_balance_bounds = struct
 
   let table_name = "zkapp_balance_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (balance_bounds :
         Currency.Balance.t Mina_base.Zkapp_precondition.Closed_interval.t ) =
     let balance_lower_bound = Currency.Balance.to_string balance_bounds.lower in
@@ -903,9 +1199,9 @@ module Zkapp_balance_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -920,7 +1216,7 @@ module Zkapp_nonce_bounds = struct
 
   let table_name = "zkapp_nonce_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (nonce_bounds :
         Mina_numbers.Account_nonce.t
         Mina_base.Zkapp_precondition.Closed_interval.t ) =
@@ -932,9 +1228,9 @@ module Zkapp_nonce_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -967,7 +1263,7 @@ module Zkapp_account_precondition = struct
 
   let table_name = "zkapp_account_precondition"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (acct : Zkapp_precondition.Account.t) =
     let open Deferred.Result.Let_syntax in
     let%bind balance_id =
@@ -1016,9 +1312,9 @@ module Zkapp_account_precondition = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1033,7 +1329,7 @@ module Zkapp_token_id_bounds = struct
 
   let table_name = "zkapp_token_id_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (token_id_bounds :
         Token_id.t Mina_base.Zkapp_precondition.Closed_interval.t ) =
     let token_id_lower_bound = token_id_bounds.lower |> Token_id.to_string in
@@ -1044,9 +1340,9 @@ module Zkapp_token_id_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1061,7 +1357,7 @@ module Zkapp_timestamp_bounds = struct
 
   let table_name = "zkapp_timestamp_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (timestamp_bounds :
         Block_time.t Mina_base.Zkapp_precondition.Closed_interval.t ) =
     let timestamp_lower_bound =
@@ -1076,9 +1372,9 @@ module Zkapp_timestamp_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1093,7 +1389,7 @@ module Zkapp_length_bounds = struct
 
   let table_name = "zkapp_length_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (length_bounds :
         Unsigned.uint32 Mina_base.Zkapp_precondition.Closed_interval.t ) =
     let length_lower_bound = Unsigned.UInt32.to_int64 length_bounds.lower in
@@ -1104,9 +1400,9 @@ module Zkapp_length_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1121,7 +1417,7 @@ module Zkapp_amount_bounds = struct
 
   let table_name = "zkapp_amount_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (amount_bounds :
         Currency.Amount.t Mina_base.Zkapp_precondition.Closed_interval.t ) =
     let amount_lower_bound = Currency.Amount.to_string amount_bounds.lower in
@@ -1132,9 +1428,9 @@ module Zkapp_amount_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1149,7 +1445,7 @@ module Zkapp_global_slot_bounds = struct
 
   let table_name = "zkapp_global_slot_bounds"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (global_slot_bounds :
         Mina_numbers.Global_slot_since_genesis.t
         Mina_base.Zkapp_precondition.Closed_interval.t ) =
@@ -1167,38 +1463,104 @@ module Zkapp_global_slot_bounds = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
 
 module Timing_info = struct
-  type t =
-    { account_identifier_id : int
-    ; initial_minimum_balance : string
-    ; cliff_time : int64
-    ; cliff_amount : string
-    ; vesting_period : int64
-    ; vesting_increment : string
-    }
-  [@@deriving hlist, fields]
+  module T = struct
+    type t =
+      { account_identifier_id : int
+      ; initial_minimum_balance : string
+      ; cliff_time : int64
+      ; cliff_amount : string
+      ; vesting_period : int64
+      ; vesting_increment : string
+      }
+    [@@deriving hlist, fields, compare, sexp, hash]
+  end
+
+  module With_id = struct
+    type t =
+      { id : int
+      ; account_identifier_id : int
+      ; initial_minimum_balance : string
+      ; cliff_time : int64
+      ; cliff_amount : string
+      ; vesting_period : int64
+      ; vesting_increment : string
+      }
+    [@@deriving hlist, fields, compare, sexp, hash]
+
+    let forget_id
+        { id = _
+        ; account_identifier_id
+        ; initial_minimum_balance
+        ; cliff_time
+        ; cliff_amount
+        ; vesting_period
+        ; vesting_increment
+        } =
+      { T.account_identifier_id
+      ; initial_minimum_balance
+      ; cliff_time
+      ; cliff_amount
+      ; vesting_period
+      ; vesting_increment
+      }
+  end
+
+  include T
 
   let typ =
     Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
       Caqti_type.[ int; string; int64; string; int64; string ]
 
+  let typ_with_id =
+    let open With_id in
+    Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
+      Caqti_type.[ int; int; string; int64; string; int64; string ]
+
   let table_name = "timing_info"
 
-  let find (module Conn : CONNECTION) (acc : Account.t) =
+  type local_copy = (t, int) Hashtbl.t
+
+  let local_copies = Hashtbl.create (module String)
+
+  let load (module Conn : Mina_caqti.CONNECTION) id =
+    Conn.find
+      (Mina_caqti.find_req Caqti_type.int typ
+         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
+      id
+
+  let load_opt (module Conn : Mina_caqti.CONNECTION) id =
+    Conn.find_opt
+      (Mina_caqti.find_opt_req Caqti_type.int typ
+         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
+      id
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () -> Hashtbl.create (module T))
+      ~local_copies ~typ:typ_with_id
+      ~query:
+        (sprintf {sql| SELECT %s FROM timing_info |sql}
+           (String.concat ~sep:"," With_id.Fields.names) )
+      ~load_elt:(fun t_to_id t ->
+        Hashtbl.add_exn t_to_id ~key:(With_id.forget_id t) ~data:t.id ;
+        Deferred.unit )
+
+  let find (module Conn : Mina_caqti.CONNECTION) (acc : Account.t) =
     let open Deferred.Result.Let_syntax in
     let%bind account_identifier_id =
       let account_id = Account_id.create acc.public_key acc.token_id in
       Account_identifiers.find (module Conn) account_id
     in
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          {sql| SELECT account_identifier_id, initial_minimum_balance,
                       cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -1207,10 +1569,10 @@ module Timing_info = struct
          |sql} )
       account_identifier_id
 
-  let find_by_account_identifier_id_opt (module Conn : CONNECTION)
+  let find_by_account_identifier_id_opt (module Conn : Mina_caqti.CONNECTION)
       account_identifier_id =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.int typ
+      (find_opt_req Caqti_type.int typ
          {sql| SELECT account_identifier_id, initial_minimum_balance,
                       cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -1219,8 +1581,9 @@ module Timing_info = struct
          |sql} )
       account_identifier_id
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) account_identifier_id
-      (timing : Account_timing.t) =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
+      account_identifier_id (timing : Account_timing.t) =
+    let%bind t_to_id = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     let slot_to_int64 x =
       Mina_numbers.Global_slot_since_genesis.to_uint32 x
@@ -1251,65 +1614,46 @@ module Timing_info = struct
           ; vesting_increment = zero
           }
     in
-    match%bind
-      Conn.find_opt
-        (Caqti_request.find_opt typ Caqti_type.int
-           {sql| SELECT id FROM timing_info
-                 WHERE account_identifier_id = ?
-                 AND initial_minimum_balance = ?
-                 AND cliff_time = ?
-                 AND cliff_amount = ?
-                 AND vesting_period = ?
-                 AND vesting_increment = ? |sql} )
-        values
-    with
+    match Hashtbl.find t_to_id values with
     | Some id ->
         return id
     | None ->
-        Conn.find
-          (Caqti_request.find typ Caqti_type.int
-             {sql| INSERT INTO timing_info
+        let%map new_id =
+          Conn.find
+            (Mina_caqti.find_req typ Caqti_type.int
+               {sql| INSERT INTO timing_info
                     (account_identifier_id,initial_minimum_balance,
                      cliff_time, cliff_amount, vesting_period, vesting_increment)
                    VALUES (?, ?, ?, ?, ?, ?)
                    RETURNING id
              |sql} )
-          values
-
-  let load (module Conn : CONNECTION) id =
-    Conn.find
-      (Caqti_request.find Caqti_type.int typ
-         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-      id
-
-  let load_opt (module Conn : CONNECTION) id =
-    Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.int typ
-         (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
-      id
+            values
+        in
+        Hashtbl.add_exn t_to_id ~key:values ~data:new_id ;
+        new_id
 end
 
 module Snarked_ledger_hash = struct
-  let find (module Conn : CONNECTION) (t : Frozen_ledger_hash.t) =
+  let find (module Conn : Mina_caqti.CONNECTION) (t : Frozen_ledger_hash.t) =
     let hash = Frozen_ledger_hash.to_base58_check t in
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (find_req Caqti_type.string Caqti_type.int
          "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
       hash
 
-  let find_by_id (module Conn : CONNECTION) id =
+  let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
       id
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) (t : Frozen_ledger_hash.t)
-      =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
+      (t : Frozen_ledger_hash.t) =
     let open Deferred.Result.Let_syntax in
     let hash = Frozen_ledger_hash.to_base58_check t in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (find_opt_req Caqti_type.string Caqti_type.int
            "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
         hash
     with
@@ -1317,13 +1661,13 @@ module Snarked_ledger_hash = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
+          (find_req Caqti_type.string Caqti_type.int
              "INSERT INTO snarked_ledger_hashes (value) VALUES (?) RETURNING id" )
           hash
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
       id
 end
@@ -1338,7 +1682,7 @@ module Zkapp_epoch_ledger = struct
 
   let table_name = "zkapp_epoch_ledger"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (epoch_ledger : _ Epoch_ledger.Poly.t) =
     let open Deferred.Result.Let_syntax in
     let%bind hash_id =
@@ -1357,9 +1701,9 @@ module Zkapp_epoch_ledger = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1381,7 +1725,7 @@ module Zkapp_epoch_data = struct
 
   let table_name = "zkapp_epoch_data"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (epoch_data : Mina_base.Zkapp_precondition.Protocol_state.Epoch_data.t) =
     let open Deferred.Result.Let_syntax in
     let%bind epoch_ledger_id =
@@ -1417,9 +1761,9 @@ module Zkapp_epoch_data = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1443,7 +1787,7 @@ module Zkapp_network_precondition = struct
 
   let table_name = "zkapp_network_precondition"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (ps : Mina_base.Zkapp_precondition.Protocol_state.t) =
     let open Deferred.Result.Let_syntax in
     let%bind snarked_ledger_hash_id =
@@ -1492,9 +1836,9 @@ module Zkapp_network_precondition = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1528,7 +1872,7 @@ module Zkapp_events = struct
      7. use "M'" and the list of list of field_ids to compute the list of field_array_ids
      8. insert the list of field_arrays
   *)
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (events : Account_update.Body.Events'.t) =
     let open Deferred.Result.Let_syntax in
     let%bind field_array_id_list =
@@ -1584,9 +1928,9 @@ module Zkapp_events = struct
       (module Conn)
       field_array_id_list
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Mina_caqti.array_int_typ
+      (find_req Caqti_type.int Mina_caqti.array_int_typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:[ "element_ids" ]) )
       id
 end
@@ -1635,7 +1979,7 @@ module Zkapp_account_update_body = struct
 
   let table_name = "zkapp_account_update_body"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (body : Account_update.Body.Simple.t) =
     let open Deferred.Result.Let_syntax in
     let account_identifier = Account_id.create body.public_key body.token_id in
@@ -1736,9 +2080,9 @@ module Zkapp_account_update_body = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1751,7 +2095,7 @@ module Zkapp_account_update = struct
 
   let table_name = "zkapp_account_update"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (account_update : Account_update.Simple.t) =
     let open Deferred.Result.Let_syntax in
     let%bind body_id =
@@ -1767,9 +2111,9 @@ module Zkapp_account_update = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1789,7 +2133,7 @@ module Zkapp_fee_payer_body = struct
 
   let table_name = "zkapp_fee_payer_body"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (body : Account_update.Body.Fee_payer.t) =
     let open Deferred.Result.Let_syntax in
     let%bind public_key_id =
@@ -1811,9 +2155,9 @@ module Zkapp_fee_payer_body = struct
       (module Conn)
       value
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1840,7 +2184,7 @@ module Epoch_data = struct
 
   let table_name = "epoch_data"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       (t : Mina_base.Epoch_data.Value.t) =
     let open Deferred.Result.Let_syntax in
     let Mina_base.Epoch_ledger.Poly.{ hash; total_currency } =
@@ -1868,9 +2212,9 @@ module Epoch_data = struct
       ; epoch_length
       }
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -1908,22 +2252,22 @@ module User_command = struct
 
     let table_name = "user_commands"
 
-    let find (module Conn : CONNECTION) ~(transaction_hash : Transaction_hash.t)
-        ~v1_transaction_hash =
+    let find (module Conn : Mina_caqti.CONNECTION)
+        ~(transaction_hash : Transaction_hash.t) ~v1_transaction_hash =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (find_opt_req Caqti_type.string Caqti_type.int
            (Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()) )
         (txn_hash_to_base58_check transaction_hash ~v1_transaction_hash)
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (find_req Caqti_type.int typ
            (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
         id
 
     type balance_public_key_ids = { fee_payer_id : int; receiver_id : int }
 
-    let add_account_ids_if_don't_exist (module Conn : CONNECTION)
+    let add_account_ids_if_don't_exist (module Conn : Mina_caqti.CONNECTION)
         (t : Signed_command.t) =
       let open Deferred.Result.Let_syntax in
       let%bind fee_payer_id =
@@ -1936,8 +2280,9 @@ module User_command = struct
       in
       { fee_payer_id; receiver_id }
 
-    let add_if_doesn't_exist ?(via = `Ident) (module Conn : CONNECTION)
-        (t : Signed_command.t) ~v1_transaction_hash =
+    let add_if_doesn't_exist ?(via = `Ident)
+        (module Conn : Mina_caqti.CONNECTION) (t : Signed_command.t)
+        ~v1_transaction_hash =
       let open Deferred.Result.Let_syntax in
       let transaction_hash = Transaction_hash.hash_command (Signed_command t) in
       match%bind find (module Conn) ~transaction_hash ~v1_transaction_hash with
@@ -1961,7 +2306,7 @@ module User_command = struct
           in
           (* TODO: Converting these uint64s to int64 can overflow; see #5419 *)
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "command_type" -> Some "user_command_type" | _ -> None )
@@ -1988,7 +2333,7 @@ module User_command = struct
                 |> txn_hash_to_base58_check ~v1_transaction_hash
             }
 
-    let add_extensional_if_doesn't_exist (module Conn : CONNECTION)
+    let add_extensional_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
         ?(v1_transaction_hash = false) (user_cmd : Extensional.User_command.t) =
       let open Deferred.Result.Let_syntax in
       match%bind
@@ -2008,7 +2353,7 @@ module User_command = struct
             Public_key.add_if_doesn't_exist (module Conn) user_cmd.receiver
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "command_type" -> Some "user_command_type" | _ -> None )
@@ -2046,21 +2391,22 @@ module User_command = struct
 
     let table_name = "zkapp_commands"
 
-    let find_opt (module Conn : CONNECTION)
+    let find_opt (module Conn : Mina_caqti.CONNECTION)
         ~(transaction_hash : Transaction_hash.t) =
       Conn.find_opt
-        ( Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        ( find_opt_req Caqti_type.string Caqti_type.int
         @@ Mina_caqti.select_cols ~select:"id" ~table_name ~cols:[ "hash" ] ()
         )
         (Transaction_hash.to_base58_check transaction_hash)
 
-    let load (module Conn : CONNECTION) id =
+    let load (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find
-        ( Caqti_request.find Caqti_type.int typ
+        ( find_req Caqti_type.int typ
         @@ Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names )
         id
 
-    let add_if_doesn't_exist (module Conn : CONNECTION) (ps : Zkapp_command.t) =
+    let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
+        (ps : Zkapp_command.t) =
       let open Deferred.Result.Let_syntax in
       let zkapp_command = Zkapp_command.to_simple ps in
       let%bind zkapp_fee_payer_body_id =
@@ -2129,11 +2475,12 @@ module Internal_command = struct
 
   let table_name = "internal_commands"
 
-  let find_opt (module Conn : CONNECTION) ~(v1_transaction_hash : bool)
-      ~(transaction_hash : Transaction_hash.t) ~(command_type : string) =
+  let find_opt (module Conn : Mina_caqti.CONNECTION)
+      ~(v1_transaction_hash : bool) ~(transaction_hash : Transaction_hash.t)
+      ~(command_type : string) =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 string string)
+      (find_opt_req
+         Caqti_type.(t2 string string)
          Caqti_type.int
          (Mina_caqti.select_cols ~select:"id" ~table_name
             ~tannot:(function
@@ -2142,13 +2489,13 @@ module Internal_command = struct
       ( txn_hash_to_base58_check ~v1_transaction_hash transaction_hash
       , command_type )
 
-  let load (module Conn : CONNECTION) ~(id : int) =
+  let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 
-  let add_extensional_if_doesn't_exist (module Conn : CONNECTION)
+  let add_extensional_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       ?(v1_transaction_hash = false)
       (internal_cmd : Extensional.Internal_command.t) =
     let open Deferred.Result.Let_syntax in
@@ -2165,7 +2512,7 @@ module Internal_command = struct
           Public_key.add_if_doesn't_exist (module Conn) internal_cmd.receiver
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                 ~tannot:(function
                   | "command_type" -> Some "internal_command_type" | _ -> None
@@ -2210,10 +2557,10 @@ module Fee_transfer = struct
       in
       Ok { kind; receiver_id; fee; hash }
     in
-    let rep = Caqti_type.(tup4 string int int64 string) in
+    let rep = Caqti_type.(t4 string int int64 string) in
     Caqti_type.custom ~encode ~decode rep
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       ?(v1_transaction_hash = false) (t : Fee_transfer.Single.t)
       (kind : [ `Normal | `Via_coinbase ]) =
     let open Deferred.Result.Let_syntax in
@@ -2232,7 +2579,7 @@ module Fee_transfer = struct
           Public_key.add_if_doesn't_exist (module Conn) pk
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (command_type, receiver_id, fee, hash)
                    VALUES (?::internal_command_type, ?, ?, ?)
@@ -2260,10 +2607,10 @@ module Coinbase = struct
     let decode (_, receiver_id, amount, hash) =
       Ok { receiver_id; amount; hash }
     in
-    let rep = Caqti_type.(tup4 string int int64 string) in
+    let rep = Caqti_type.(t4 string int int64 string) in
     Caqti_type.custom ~encode ~decode rep
 
-  let add_if_doesn't_exist (module Conn : CONNECTION)
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       ?(v1_transaction_hash = false) (t : Coinbase.t) =
     let open Deferred.Result.Let_syntax in
     let transaction_hash = Transaction_hash.hash_coinbase t in
@@ -2281,7 +2628,7 @@ module Coinbase = struct
           Public_key.add_if_doesn't_exist (module Conn) pk
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (command_type, receiver_id, fee, hash)
                    VALUES (?::internal_command_type, ?, ?, ?)
@@ -2313,14 +2660,14 @@ module Block_and_internal_command = struct
     Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
       Caqti_type.[ int; int; int; int; string; option string ]
 
-  let add (module Conn : CONNECTION) ~block_id ~internal_command_id ~sequence_no
-      ~secondary_sequence_no ~status
+  let add (module Conn : Mina_caqti.CONNECTION) ~block_id ~internal_command_id
+      ~sequence_no ~secondary_sequence_no ~status
       ~(failure_reason : Transaction_status.Failure.t option) =
     let failure_reason =
       Option.map ~f:Transaction_status.Failure.to_string failure_reason
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (exec_req typ
          {sql| INSERT INTO blocks_internal_commands
                  (block_id,
                  internal_command_id,
@@ -2338,11 +2685,11 @@ module Block_and_internal_command = struct
       ; failure_reason
       }
 
-  let find (module Conn : CONNECTION) ~block_id ~internal_command_id
+  let find (module Conn : Mina_caqti.CONNECTION) ~block_id ~internal_command_id
       ~sequence_no ~secondary_sequence_no =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup4 int int int int)
+      (find_opt_req
+         Caqti_type.(t4 int int int int)
          Caqti_type.string
          {sql| SELECT 'exists' FROM blocks_internal_commands
                WHERE block_id = $1
@@ -2352,7 +2699,7 @@ module Block_and_internal_command = struct
          |sql} )
       (block_id, internal_command_id, sequence_no, secondary_sequence_no)
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) ~block_id
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) ~block_id
       ~internal_command_id ~sequence_no ~secondary_sequence_no ~status
       ~failure_reason =
     let open Deferred.Result.Let_syntax in
@@ -2369,12 +2716,12 @@ module Block_and_internal_command = struct
           ~block_id ~internal_command_id ~sequence_no ~secondary_sequence_no
           ~status ~failure_reason
 
-  let load (module Conn : CONNECTION) ~block_id ~internal_command_id
+  let load (module Conn : Mina_caqti.CONNECTION) ~block_id ~internal_command_id
       ~sequence_no ~secondary_sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup4 int int int int)
+      (find_req
+         Caqti_type.(t4 int int int int)
          typ
          (sprintf
             {sql| SELECT %s FROM blocks_internal_commands
@@ -2403,13 +2750,13 @@ module Block_and_signed_command = struct
 
   let table_name = "blocks_user_commands"
 
-  let add (module Conn : CONNECTION) ~block_id ~user_command_id ~sequence_no
-      ~status ~failure_reason =
+  let add (module Conn : Mina_caqti.CONNECTION) ~block_id ~user_command_id
+      ~sequence_no ~status ~failure_reason =
     let failure_reason =
       Option.map ~f:Transaction_status.Failure.to_string failure_reason
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (exec_req typ
          {sql| INSERT INTO blocks_user_commands
                  (block_id,
                  user_command_id,
@@ -2420,8 +2767,8 @@ module Block_and_signed_command = struct
          |sql} )
       { block_id; user_command_id; sequence_no; status; failure_reason }
 
-  let add_with_status (module Conn : CONNECTION) ~block_id ~user_command_id
-      ~sequence_no ~(status : Transaction_status.t) =
+  let add_with_status (module Conn : Mina_caqti.CONNECTION) ~block_id
+      ~user_command_id ~sequence_no ~(status : Transaction_status.t) =
     let status_str, failure_reason =
       match status with
       | Applied ->
@@ -2434,13 +2781,13 @@ module Block_and_signed_command = struct
       (module Conn)
       ~block_id ~user_command_id ~sequence_no ~status:status_str ~failure_reason
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) ~block_id ~user_command_id
-      ~sequence_no ~(status : string) ~failure_reason =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) ~block_id
+      ~user_command_id ~sequence_no ~(status : string) ~failure_reason =
     let open Deferred.Result.Let_syntax in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup3 int int int)
+        (find_opt_req
+           Caqti_type.(t3 int int int)
            Caqti_type.string
            {sql| SELECT 'exists' FROM blocks_user_commands
                  WHERE block_id = $1
@@ -2456,11 +2803,12 @@ module Block_and_signed_command = struct
           (module Conn)
           ~block_id ~user_command_id ~sequence_no ~status ~failure_reason
 
-  let load (module Conn : CONNECTION) ~block_id ~user_command_id ~sequence_no =
+  let load (module Conn : Mina_caqti.CONNECTION) ~block_id ~user_command_id
+      ~sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          typ
          (sprintf
             {sql| SELECT %s FROM blocks_user_commands
@@ -2481,7 +2829,8 @@ module Zkapp_account_update_failures = struct
 
   let table_name = "zkapp_account_update_failures"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) index failures =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) index failures
+      =
     let failures =
       List.map failures ~f:Transaction_status.Failure.to_string |> Array.of_list
     in
@@ -2492,9 +2841,9 @@ module Zkapp_account_update_failures = struct
       (module Conn)
       { index; failures }
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name
             ~cols:[ "index"; "failures" ] ) )
       id
@@ -2516,7 +2865,7 @@ module Block_and_zkapp_command = struct
     Mina_caqti.Type_spec.custom_type ~to_hlist ~of_hlist
       Caqti_type.[ int; int; int; string; option Mina_caqti.array_int_typ ]
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) ~block_id
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) ~block_id
       ~zkapp_command_id ~sequence_no ~status
       ~(failure_reasons : Transaction_status.Failure.Collection.Display.t option)
       =
@@ -2537,8 +2886,7 @@ module Block_and_zkapp_command = struct
     in
     Mina_caqti.select_insert_into_cols
       ~select:
-        ( "block_id, zkapp_command_id, sequence_no"
-        , Caqti_type.(tup3 int int int) )
+        ("block_id, zkapp_command_id, sequence_no", Caqti_type.(t3 int int int))
       ~table_name
       ~cols:
         ( [ "block_id"
@@ -2558,21 +2906,22 @@ module Block_and_zkapp_command = struct
       (module Conn)
       { block_id; zkapp_command_id; sequence_no; status; failure_reasons_ids }
 
-  let load (module Conn : CONNECTION) ~block_id ~zkapp_command_id ~sequence_no =
+  let load (module Conn : Mina_caqti.CONNECTION) ~block_id ~zkapp_command_id
+      ~sequence_no =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup3 int int int)
+      (find_req
+         Caqti_type.(t3 int int int)
          typ
          (Mina_caqti.select_cols ~table_name ~select:comma_cols
             ~cols:[ "block_id"; "zkapp_command_id"; "sequence_no" ]
             () ) )
       (block_id, zkapp_command_id, sequence_no)
 
-  let all_from_block (module Conn : CONNECTION) ~block_id =
+  let all_from_block (module Conn : Mina_caqti.CONNECTION) ~block_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          (Mina_caqti.select_cols ~table_name ~select:comma_cols
             ~cols:[ "block_id" ] () ) )
       block_id
@@ -2596,7 +2945,7 @@ module Zkapp_account = struct
 
   let table_name = "zkapp_accounts"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) zkapp_account =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) zkapp_account =
     let open Deferred.Result.Let_syntax in
     let ({ app_state
          ; verification_key
@@ -2642,9 +2991,9 @@ module Zkapp_account = struct
       ; zkapp_uri_id
       }
 
-  let load (module Conn : CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name ~cols:Fields.names) )
       id
 end
@@ -2685,11 +3034,31 @@ module Accounts_accessed = struct
 
   let table_name = "accounts_accessed"
 
-  let find_opt (module Conn : CONNECTION) ~block_id ~account_identifier_id =
+  type local_copy = (t, int) Hashtbl.t
+
+  let local_copies = Hashtbl.create (module String)
+
+  let load_copy =
+    load_copy'
+      ~default:(fun () ->
+        Hash_set.create
+          ( module struct
+            type t = int * int [@@deriving compare, sexp, hash]
+          end ) )
+      ~local_copies
+      ~typ:Caqti_type.(t2 int int)
+      ~query:
+        {sql| SELECT block_id,account_identifier_id FROM accounts_accessed |sql}
+      ~load_elt:(fun exists_index key ->
+        Hash_set.add exists_index key ;
+        Deferred.unit )
+
+  let find_opt (module Conn : Mina_caqti.CONNECTION) ~block_id
+      ~account_identifier_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 int int)
+      (find_opt_req
+         Caqti_type.(t2 int int)
          typ
          (sprintf
             {sql| SELECT %s
@@ -2700,72 +3069,71 @@ module Accounts_accessed = struct
             comma_cols table_name ) )
       (block_id, account_identifier_id)
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) block_id
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) block_id
       (ledger_index, (account : Account.t)) =
+    let%bind exists_index = load_copy (module Conn) in
     let open Deferred.Result.Let_syntax in
     let account_id = Account_id.create account.public_key account.token_id in
     let%bind account_identifier_id =
       Account_identifiers.add_if_doesn't_exist (module Conn) account_id
     in
-    match%bind find_opt (module Conn) ~block_id ~account_identifier_id with
-    | Some result ->
-        return (result.block_id, result.account_identifier_id)
-    | None ->
-        let%bind token_symbol_id =
-          Token_symbols.add_if_doesn't_exist (module Conn) account.token_symbol
-        in
-        let balance = Currency.Balance.to_string account.balance in
-        let nonce =
-          account.nonce |> Account.Nonce.to_uint32 |> Unsigned.UInt32.to_int64
-        in
-        let receipt_chain_hash =
-          account.receipt_chain_hash |> Receipt.Chain_hash.to_base58_check
-        in
-        let%bind delegate_id =
-          Mina_caqti.add_if_some
-            (Public_key.add_if_doesn't_exist (module Conn))
-            account.delegate
-        in
-        let%bind voting_for_id =
-          Voting_for.add_if_doesn't_exist (module Conn) account.voting_for
-        in
-        let%bind timing_id =
-          Timing_info.add_if_doesn't_exist
-            (module Conn)
-            account_identifier_id account.timing
-        in
-        let%bind permissions_id =
-          Zkapp_permissions.add_if_doesn't_exist
-            (module Conn)
-            account.permissions
-        in
-        let%bind zkapp_id =
-          Mina_caqti.add_if_some
-            (Zkapp_account.add_if_doesn't_exist (module Conn))
-            account.zkapp
-        in
-        let account_accessed : t =
-          { ledger_index
-          ; block_id
-          ; account_identifier_id
-          ; token_symbol_id
-          ; balance
-          ; nonce
-          ; receipt_chain_hash
-          ; delegate_id
-          ; voting_for_id
-          ; timing_id
-          ; permissions_id
-          ; zkapp_id
-          }
-        in
-        Mina_caqti.select_insert_into_cols
-          ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
-          ~table_name ~cols:(Fields.names, typ)
+    if Hash_set.mem exists_index (block_id, account_identifier_id) then
+      return (block_id, account_identifier_id)
+    else
+      let%bind token_symbol_id =
+        Token_symbols.add_if_doesn't_exist (module Conn) account.token_symbol
+      in
+      let balance = Currency.Balance.to_string account.balance in
+      let nonce =
+        account.nonce |> Account.Nonce.to_uint32 |> Unsigned.UInt32.to_int64
+      in
+      let receipt_chain_hash =
+        account.receipt_chain_hash |> Receipt.Chain_hash.to_base58_check
+      in
+      let%bind delegate_id =
+        Mina_caqti.add_if_some
+          (Public_key.add_if_doesn't_exist (module Conn))
+          account.delegate
+      in
+      let%bind voting_for_id =
+        Voting_for.add_if_doesn't_exist (module Conn) account.voting_for
+      in
+      let%bind timing_id =
+        Timing_info.add_if_doesn't_exist
           (module Conn)
-          account_accessed
+          account_identifier_id account.timing
+      in
+      let%bind permissions_id =
+        Zkapp_permissions.add_if_doesn't_exist (module Conn) account.permissions
+      in
+      let%bind zkapp_id =
+        Mina_caqti.add_if_some
+          (Zkapp_account.add_if_doesn't_exist (module Conn))
+          account.zkapp
+      in
+      let account_accessed : t =
+        { ledger_index
+        ; block_id
+        ; account_identifier_id
+        ; token_symbol_id
+        ; balance
+        ; nonce
+        ; receipt_chain_hash
+        ; delegate_id
+        ; voting_for_id
+        ; timing_id
+        ; permissions_id
+        ; zkapp_id
+        }
+      in
+      Hash_set.add exists_index (block_id, account_identifier_id) ;
+      Mina_caqti.insert_assuming_new
+        ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
+        ~table_name ~cols:(Fields.names, typ)
+        (module Conn)
+        account_accessed
 
-  let add_accounts_if_don't_exist (module Conn : CONNECTION) block_id
+  let add_accounts_if_don't_exist (module Conn : Mina_caqti.CONNECTION) block_id
       (accounts : (int * Account.t) list) =
     let%map results =
       Deferred.List.map accounts ~f:(fun account ->
@@ -2773,10 +3141,10 @@ module Accounts_accessed = struct
     in
     Result.all results
 
-  let all_from_block (module Conn : CONNECTION) block_id =
+  let all_from_block (module Conn : Mina_caqti.CONNECTION) block_id =
     let comma_cols = String.concat Fields.names ~sep:"," in
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          (Mina_caqti.select_cols ~select:comma_cols ~table_name
             ~cols:[ "block_id" ] () ) )
       block_id
@@ -2793,30 +3161,30 @@ module Accounts_created = struct
 
   let table_name = "accounts_created"
 
-  let add_if_doesn't_exist (module Conn : CONNECTION) block_id account_id
-      creation_fee =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) block_id
+      account_id creation_fee =
     let open Deferred.Result.Let_syntax in
     let%bind account_identifier_id =
       Account_identifiers.add_if_doesn't_exist (module Conn) account_id
     in
     let creation_fee = Currency.Fee.to_string creation_fee in
     Mina_caqti.select_insert_into_cols
-      ~select:("block_id,account_identifier_id", Caqti_type.(tup2 int int))
+      ~select:("block_id,account_identifier_id", Caqti_type.(t2 int int))
       ~table_name ~cols:(Fields.names, typ)
       (module Conn)
       { block_id; account_identifier_id; creation_fee }
 
-  let add_accounts_created_if_don't_exist (module Conn : CONNECTION) block_id
-      accounts_created =
+  let add_accounts_created_if_don't_exist (module Conn : Mina_caqti.CONNECTION)
+      block_id accounts_created =
     let%map results =
       Deferred.List.map accounts_created ~f:(fun (pk, creation_fee) ->
           add_if_doesn't_exist (module Conn) block_id pk creation_fee )
     in
     Result.all results
 
-  let all_from_block (module Conn : CONNECTION) block_id =
+  let all_from_block (module Conn : Mina_caqti.CONNECTION) block_id =
     Conn.collect_list
-      (Caqti_request.collect Caqti_type.int typ
+      (collect_req Caqti_type.int typ
          {sql| SELECT block_id, account_identifier_id, creation_fee
                FROM accounts_created
                WHERE block_id = ?
@@ -2882,18 +3250,19 @@ module Block = struct
          "SELECT id FROM blocks WHERE state_hash = ?" )
       (State_hash.to_base58_check state_hash)
 
-  let find (module Conn : CONNECTION) = make_finder Conn.find Caqti_request.find
+  let find (module Conn : Mina_caqti.CONNECTION) =
+    make_finder Conn.find Mina_caqti.find_req
 
-  let find_opt (module Conn : CONNECTION) =
-    make_finder Conn.find_opt Caqti_request.find_opt
+  let find_opt (module Conn : Mina_caqti.CONNECTION) =
+    make_finder Conn.find_opt Mina_caqti.find_opt_req
 
-  let load (module Conn : CONNECTION) ~id =
+  let load (module Conn : Mina_caqti.CONNECTION) ~id =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (find_req Caqti_type.int typ
          (Mina_caqti.select_cols_from_id ~table_name:"blocks" ~cols:Fields.names) )
       id
 
-  let add_parts_if_doesn't_exist (module Conn : CONNECTION)
+  let add_parts_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION)
       ~constraint_constants ~protocol_state ~staged_ledger_diff
       ~protocol_version ~proposed_protocol_version ~hash ~v1_transaction_hash =
     let open Deferred.Result.Let_syntax in
@@ -2994,7 +3363,7 @@ module Block = struct
         let blockchain_state = Protocol_state.blockchain_state protocol_state in
         let%bind block_id =
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "chain_status" ->
@@ -3314,7 +3683,7 @@ module Block = struct
 
   (* NB: this batching logic an lead to partial writes; it is acceptable to be used with the
      migration tool, but not acceptable to be used with the archive node in its current form *)
-  let add_from_extensional_batch (module Conn : CONNECTION)
+  let add_from_extensional_batch (module Conn : Mina_caqti.CONNECTION)
       ?(v1_transaction_hash = false) (blocks : Extensional.Block.t list) =
     let open Deferred.Result.Let_syntax in
     (* zkapps are currently unsupported in the batch implementation of this function *)
@@ -3376,9 +3745,7 @@ module Block = struct
     in
 
     (* we don't need to specify all types here, just the ones that sql may infer incorrectly *)
-    let field_name : type a. a Caqti_type.Field.t -> string option =
-      let open Caqti_type in
-      function
+    let field_name : type a. a Caqti_type.Field.t -> string option = function
       | Bool ->
           Some "BOOL"
       | Int ->
@@ -3391,39 +3758,36 @@ module Block = struct
           Some "BIGINT"
       | Float ->
           Some "FLOAT"
+      | String ->
+          Some "TEXT"
       | Enum name ->
           Some name
-      | _ ->
-          None
+      | Octets | Pdate | Ptime | Ptime_span ->
+          failwith "unsupported field type"
     in
 
     let rec type_field_names : type a. a Caqti_type.t -> string option list =
+      let open Caqti_type in
       function
-      | Unit ->
-          []
       | Field f ->
           [ field_name f ]
       | Option t ->
           type_field_names t
-      | Tup2 (at, bt) ->
-          List.concat [ type_field_names at; type_field_names bt ]
-      | Tup3 (at, bt, ct) ->
-          List.concat
-            [ type_field_names at; type_field_names bt; type_field_names ct ]
-      | Tup4 (at, bt, ct, dt) ->
-          List.concat
-            [ type_field_names at
-            ; type_field_names bt
-            ; type_field_names ct
-            ; type_field_names dt
-            ]
-      | Custom custom ->
-          type_field_names custom.rep
-    in
-
-    let rec render_field : type a. a Caqti_type.Field.t -> a -> string =
+      | Product (_, prod) ->
+          let rec loop : type a i. _ -> (a, i) product -> _ =
+           fun acc -> function
+            | Proj_end ->
+                List.concat (List.rev acc)
+            | Proj (t, _, prod) ->
+                loop (type_field_names t :: acc) prod
+          in
+          loop [] prod
+      | Annot (_, t) ->
+          type_field_names t
+    in
+
+    let render_field : type a. a Caqti_type.Field.t -> a -> string =
      fun typ value ->
-      let open Caqti_type in
       match typ with
       | Bool ->
           Bool.to_string value
@@ -3451,45 +3815,30 @@ module Block = struct
           (* we are ignoring the enum annotation in this context because it's not always valid to apply *)
           (* NOTE: we assume enum values do not contain special characters (eg "'") *)
           "'" ^ value ^ "'"
-      | _ -> (
-          match Caqti_type.Field.coding Conn.driver_info typ with
-          | None ->
-              failwithf "unable to render caqti field: %s"
-                (Caqti_type.Field.to_string typ)
-                ()
-          | Some (Coding coding) ->
-              render_field coding.rep
-                (Result.ok_or_failwith @@ coding.encode value) )
     in
     let rec render_type : type a. a Caqti_type.t -> a -> string list =
-     fun typ value ->
-      match typ with
-      | Unit ->
-          []
-      | Field f ->
-          [ render_field f value ]
-      | Option t -> (
-          match value with
-          | None ->
-              List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
-          | Some x ->
-              render_type t x )
-      | Tup2 (at, bt) ->
-          let a, b = value in
-          List.concat [ render_type at a; render_type bt b ]
-      | Tup3 (at, bt, ct) ->
-          let a, b, c = value in
-          List.concat [ render_type at a; render_type bt b; render_type ct c ]
-      | Tup4 (at, bt, ct, dt) ->
-          let a, b, c, d = value in
-          List.concat
-            [ render_type at a
-            ; render_type bt b
-            ; render_type ct c
-            ; render_type dt d
-            ]
-      | Custom custom ->
-          render_type custom.rep (Result.ok_or_failwith @@ custom.encode value)
+      let open Caqti_type in
+      fun typ value ->
+        match typ with
+        | Field f ->
+            [ render_field f value ]
+        | Option t -> (
+            match value with
+            | None ->
+                List.init (Caqti_type.length typ) ~f:(Fn.const "NULL")
+            | Some x ->
+                render_type t x )
+        | Product (_, prod) ->
+            let rec loop : type i. _ -> (a, i) product -> _ =
+             fun acc -> function
+              | Proj_end ->
+                  List.concat (List.rev acc)
+              | Proj (t, prj, prod) ->
+                  loop (render_type t (prj value) :: acc) prod
+            in
+            loop [] prod
+        | Annot (_, t) ->
+            render_type t value
     in
     let render_row (type a) (typ : a Caqti_type.t) (value : a) : string =
       "(" ^ String.concat ~sep:"," (render_type typ value) ^ ")"
@@ -3540,8 +3889,8 @@ module Block = struct
         in
         let%map entries =
           Conn.collect_list
-            (Caqti_request.collect Caqti_type.unit
-               Caqti_type.(tup2 typ int)
+            (Mina_caqti.collect_req Caqti_type.unit
+               Caqti_type.(t2 typ int)
                query )
             ()
         in
@@ -3559,7 +3908,7 @@ module Block = struct
           String.concat ~sep:"," @@ List.map ~f:(render_row typ) values
         in
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit Caqti_type.int
+          (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
              (sprintf "INSERT INTO %s (%s) VALUES %s RETURNING id" table
                 fields_sql values_sql ) )
           () )
@@ -4050,7 +4399,7 @@ module Block = struct
       let ids_sql = String.concat ~sep:"," ids in
       let parent_ids_sql = String.concat ~sep:"," parent_ids in
       Conn.exec
-        (Caqti_request.exec Caqti_type.unit
+        (Mina_caqti.exec_req Caqti_type.unit
            (sprintf
               "UPDATE %s AS b SET parent_id = data.parent_id FROM (SELECT \
                unnest(array[%s]) as id, unnest(array[%s]) as parent_id) AS \
@@ -4060,7 +4409,7 @@ module Block = struct
     in
     return ()
 
-  let add_from_extensional (module Conn : CONNECTION)
+  let add_from_extensional (module Conn : Mina_caqti.CONNECTION)
       ?(v1_transaction_hash = false) (block : Extensional.Block.t) =
     let open Deferred.Result.Let_syntax in
     let%bind block_id =
@@ -4119,7 +4468,7 @@ module Block = struct
                 Some id )
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (find_req typ Caqti_type.int
                (Mina_caqti.insert_into_cols ~returning:"id" ~table_name
                   ~tannot:(function
                     | "sub_window_densities" ->
@@ -4277,18 +4626,19 @@ module Block = struct
     in
     return block_id
 
-  let set_parent_id_if_null (module Conn : CONNECTION) ~parent_hash
+  let set_parent_id_if_null (module Conn : Mina_caqti.CONNECTION) ~parent_hash
       ~(parent_id : int) =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 int string)
+      (exec_req
+         Caqti_type.(t2 int string)
          {sql| UPDATE blocks SET parent_id = ?
                WHERE parent_hash = ?
                AND parent_id IS NULL
          |sql} )
       (parent_id, State_hash.to_base58_check parent_hash)
 
-  let get_subchain (module Conn : CONNECTION) ~start_block_id ~end_block_id =
+  let get_subchain (module Conn : Mina_caqti.CONNECTION) ~start_block_id
+      ~end_block_id =
     (* derive query from type `t` *)
     let concat = String.concat ~sep:"," in
     let columns_with_id = concat ("id" :: Fields.names) in
@@ -4297,8 +4647,8 @@ module Block = struct
     in
     let columns = concat Fields.names in
     Conn.collect_list
-      (Caqti_request.collect
-         Caqti_type.(tup2 int int)
+      (collect_req
+         Caqti_type.(t2 int int)
          typ
          (sprintf
             {sql| WITH RECURSIVE chain AS (
@@ -4322,39 +4672,42 @@ module Block = struct
             columns_with_id b_columns_with_id columns ) )
       (end_block_id, start_block_id)
 
-  let get_highest_canonical_block_opt (module Conn : CONNECTION) =
+  let get_highest_canonical_block_opt (module Conn : Mina_caqti.CONNECTION) =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.unit
-         Caqti_type.(tup2 int int64)
+      (find_opt_req Caqti_type.unit
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' ORDER BY \
           height DESC LIMIT 1" )
 
-  let get_nearest_canonical_block_above (module Conn : CONNECTION) height =
+  let get_nearest_canonical_block_above (module Conn : Mina_caqti.CONNECTION)
+      height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height > ? ORDER BY height ASC LIMIT 1" )
       height
 
-  let get_nearest_canonical_block_below (module Conn : CONNECTION) height =
+  let get_nearest_canonical_block_below (module Conn : Mina_caqti.CONNECTION)
+      height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height < ? ORDER BY height DESC LIMIT 1" )
       height
 
-  let mark_as_canonical (module Conn : CONNECTION) ~state_hash =
+  let mark_as_canonical (module Conn : Mina_caqti.CONNECTION) ~state_hash =
     Conn.exec
-      (Caqti_request.exec Caqti_type.string
+      (exec_req Caqti_type.string
          "UPDATE blocks SET chain_status='canonical' WHERE state_hash = ?" )
       state_hash
 
-  let mark_as_orphaned (module Conn : CONNECTION) ~state_hash ~height =
+  let mark_as_orphaned (module Conn : Mina_caqti.CONNECTION) ~state_hash ~height
+      =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 string int64)
+      (exec_req
+         Caqti_type.(t2 string int64)
          {sql| UPDATE blocks SET chain_status='orphaned'
                WHERE height = $2
                AND state_hash <> $1
@@ -4362,7 +4715,7 @@ module Block = struct
       (state_hash, height)
 
   (* update chain_status for blocks now known to be canonical or orphaned *)
-  let update_chain_status (module Conn : CONNECTION) ~block_id =
+  let update_chain_status (module Conn : Mina_caqti.CONNECTION) ~block_id =
     let open Deferred.Result.Let_syntax in
     match%bind get_highest_canonical_block_opt (module Conn) () with
     | None ->
@@ -4434,7 +4787,7 @@ module Block = struct
           Deferred.Result.return ()
 
   let delete_if_older_than ?height ?num_blocks ?timestamp
-      (module Conn : CONNECTION) =
+      (module Conn : Mina_caqti.CONNECTION) =
     let open Deferred.Result.Let_syntax in
     let%bind height =
       match (height, num_blocks) with
@@ -4443,7 +4796,7 @@ module Block = struct
       | None, Some num_blocks -> (
           match%map
             Conn.find_opt
-              (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+              (find_opt_req Caqti_type.unit Caqti_type.int
                  "SELECT MAX(height) FROM blocks" )
               ()
           with
@@ -4459,8 +4812,8 @@ module Block = struct
       let%bind () =
         (* Delete user commands from old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM user_commands\n\
               WHERE id IN\n\
               (SELECT user_command_id FROM blocks_user_commands\n\
@@ -4471,8 +4824,8 @@ module Block = struct
       let%bind () =
         (* Delete old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM blocks WHERE blocks.height < ? OR blocks.timestamp < \
               ?" )
           (height, timestamp)
@@ -4480,7 +4833,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned internal commands. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM internal_commands\n\
               WHERE id NOT IN\n\
               (SELECT internal_commands.id FROM internal_commands\n\
@@ -4491,7 +4844,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned snarked ledger hashes. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM snarked_ledger_hashes\n\
               WHERE id NOT IN\n\
               (SELECT snarked_ledger_hash_id FROM blocks)" )
@@ -4500,7 +4853,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned public keys. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (exec_req Caqti_type.unit
              "DELETE FROM public_keys\n\
               WHERE id NOT IN (SELECT fee_payer_id FROM user_commands)\n\
               AND id NOT IN (SELECT source_id FROM user_commands)\n\
@@ -4550,8 +4903,8 @@ let add_block_aux ?(retries = 3) ~logger ~pool ~add_block ~hash
             ()
         | Some acct_id ->
             Token_owners.add_if_doesn't_exist token_id acct_id ) ;
-    Caqti_async.Pool.use
-      (fun (module Conn : CONNECTION) ->
+    Mina_caqti.Pool.use
+      (fun (module Conn : Mina_caqti.CONNECTION) ->
         let%bind res =
           let open Deferred.Result.Let_syntax in
           let%bind () = Conn.start () in
@@ -4562,7 +4915,7 @@ let add_block_aux ?(retries = 3) ~logger ~pool ~add_block ~hash
             O1trace.thread "archive_processor.add_block"
             @@ fun () ->
             Metrics.time ~label:"add_block"
-            @@ fun () -> add_block (module Conn : CONNECTION) block
+            @@ fun () -> add_block (module Conn : Mina_caqti.CONNECTION) block
           in
           (* if an existing block has a parent hash that's for the block just added,
              set its parent id
@@ -4617,8 +4970,8 @@ let add_block_aux ?(retries = 3) ~logger ~pool ~add_block ~hash
                     ] ;
                 let%bind.Deferred.Result () = Conn.start () in
                 match%bind
-                  Caqti_async.Pool.use
-                    (fun (module Conn : CONNECTION) ->
+                  Mina_caqti.Pool.use
+                    (fun (module Conn : Mina_caqti.CONNECTION) ->
                       Accounts_accessed.add_accounts_if_don't_exist
                         (module Conn)
                         block_id accounts_accessed )
@@ -4643,8 +4996,8 @@ let add_block_aux ?(retries = 3) ~logger ~pool ~add_block ~hash
                           , `Int (List.length accounts_accessed) )
                         ] ;
                     match%bind
-                      Caqti_async.Pool.use
-                        (fun (module Conn : CONNECTION) ->
+                      Mina_caqti.Pool.use
+                        (fun (module Conn : Mina_caqti.CONNECTION) ->
                           Accounts_created.add_accounts_created_if_don't_exist
                             (module Conn)
                             block_id accounts_created )
@@ -4758,8 +5111,8 @@ let add_genesis_accounts ~logger ~(runtime_config_opt : Runtime_config.t option)
         With_hash.{ data = block; hash = the_hash }
       in
       let add_accounts () =
-        Caqti_async.Pool.use
-          (fun (module Conn : CONNECTION) ->
+        Mina_caqti.Pool.use
+          (fun (module Conn : Mina_caqti.CONNECTION) ->
             let%bind.Deferred.Result genesis_block_id =
               Block.add_if_doesn't_exist
                 (module Conn)
@@ -4893,7 +5246,7 @@ let setup_server ~metrics_server_port ~constraint_constants ~logger
           Strict_pipe.Writer.write extensional_block_writer extensional_block )
     ]
   in
-  match Caqti_async.connect_pool ~max_size:30 postgres_address with
+  match Mina_caqti.connect_pool ~max_size:128 postgres_address with
   | Error e ->
       [%log error]
         "Failed to create a Caqti pool for Postgresql, see error: $error"
diff --git a/src/app/archive/lib/test.ml b/src/app/archive/lib/test.ml
index 7795a5817f..6f31ad3523 100644
--- a/src/app/archive/lib/test.ml
+++ b/src/app/archive/lib/test.ml
@@ -37,13 +37,13 @@ let%test_module "Archive node unit tests" =
         @@ fun () ->
         match%map Caqti_async.connect archive_uri with
         | Ok conn ->
-            conn
+            Mina_caqti.wrap_conn ~source:archive_uri conn
         | Error e ->
             failwith @@ Caqti_error.show e )
 
     let conn_pool_lazy =
       lazy
-        ( match Caqti_async.connect_pool archive_uri with
+        ( match Mina_caqti.connect_pool archive_uri with
         | Ok pool ->
             pool
         | Error e ->
@@ -312,7 +312,7 @@ let%test_module "Archive node unit tests" =
           match%map
             Mina_caqti.deferred_result_list_fold breadcrumbs ~init:()
               ~f:(fun () breadcrumb ->
-                Caqti_async.Pool.use
+                Mina_caqti.Pool.use
                   (fun conn ->
                     let open Deferred.Result.Let_syntax in
                     match%bind
diff --git a/src/app/archive_blocks/archive_blocks.ml b/src/app/archive_blocks/archive_blocks.ml
index caa4203939..a2934a6184 100644
--- a/src/app/archive_blocks/archive_blocks.ml
+++ b/src/app/archive_blocks/archive_blocks.ml
@@ -20,7 +20,7 @@ let main ~archive_uri ~precomputed ~extensional ~success_file ~failure_file
   if Bool.equal precomputed extensional then
     failwith "Must provide exactly one of -precomputed and -extensional" ;
   let logger = Logger.create () in
-  match Caqti_async.connect_pool archive_uri with
+  match Mina_caqti.connect_pool archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/berkeley_account_tables/berkeley_account_tables.ml b/src/app/berkeley_account_tables/berkeley_account_tables.ml
index 670f44c8e1..01d4912c28 100644
--- a/src/app/berkeley_account_tables/berkeley_account_tables.ml
+++ b/src/app/berkeley_account_tables/berkeley_account_tables.ml
@@ -50,7 +50,7 @@ type output =
 
 module type Get_command_ids = sig
   val run :
-       Caqti_async.connection
+       (module Mina_caqti.CONNECTION)
     -> state_hash:string
     -> start_slot:int64
     -> (int list, [> Caqti_error.call_or_retrieve ]) Deferred.Result.t
@@ -174,7 +174,7 @@ let get_slot_hashes slot = Hashtbl.find global_slot_hashes_tbl slot
 
 let process_block_infos_of_state_hash ~logger pool ~state_hash ~start_slot ~f =
   match%bind
-    Caqti_async.Pool.use
+    Mina_caqti.Pool.use
       (fun db -> Sql.Block_info.run db ~state_hash ~start_slot)
       pool
   with
@@ -521,8 +521,8 @@ let get_parent_state_view ~pool block_id =
   in
   return state_view
 
-let zkapp_command_to_transaction ~logger ~pool (cmd : Sql.Zkapp_command.t) :
-    Mina_transaction.Transaction.t Deferred.t =
+let zkapp_command_to_transaction ~logger ~source ~pool
+    (cmd : Sql.Zkapp_command.t) : Mina_transaction.Transaction.t Deferred.t =
   let query_db = Mina_caqti.query pool in
   (* use dummy authorizations *)
   let%bind (fee_payer : Account_update.Fee_payer.t) =
@@ -543,7 +543,7 @@ let zkapp_command_to_transaction ~logger ~pool (cmd : Sql.Zkapp_command.t) :
           query_db ~f:(fun db -> Processor.Zkapp_account_update.load db id)
         in
         let%map body =
-          Archive_lib.Load_data.get_account_update_body ~pool body_id
+          Archive_lib.Load_data.get_account_update_body ~source ~pool body_id
         in
         let (authorization : Control.t) =
           match body.authorization_kind with
@@ -641,7 +641,7 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
              msg )
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match Mina_caqti.connect_pool ~max_size:128 archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -781,7 +781,7 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
       (* end mutable state *)
       let get_command_ids (module Command_ids : Get_command_ids) name =
         match%bind
-          Caqti_async.Pool.use
+          Mina_caqti.Pool.use
             (fun db ->
               Command_ids.run db ~state_hash:target_state_hash
                 ~start_slot:input.start_slot_since_genesis )
@@ -817,7 +817,7 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
         Deferred.List.map internal_cmd_ids ~f:(fun id ->
             let open Deferred.Let_syntax in
             match%map
-              Caqti_async.Pool.use
+              Mina_caqti.Pool.use
                 (fun db ->
                   Sql.Internal_command.run db
                     ~start_slot:input.start_slot_since_genesis
@@ -874,7 +874,7 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
         Deferred.List.map user_cmd_ids ~f:(fun id ->
             let open Deferred.Let_syntax in
             match%map
-              Caqti_async.Pool.use (fun db -> Sql.User_command.run db id) pool
+              Mina_caqti.Pool.use (fun db -> Sql.User_command.run db id) pool
             with
             | Ok [] ->
                 failwithf "Expected at least one user command with id %d" id ()
@@ -905,7 +905,7 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
         Deferred.List.map zkapp_cmd_ids ~f:(fun id ->
             let open Deferred.Let_syntax in
             match%map
-              Caqti_async.Pool.use (fun db -> Sql.Zkapp_command.run db id) pool
+              Mina_caqti.Pool.use (fun db -> Sql.Zkapp_command.run db id) pool
             with
             | Ok [] ->
                 failwithf "Expected at least one zkApp command with id %d" id ()
@@ -1410,7 +1410,9 @@ let main ~input_file ~output_file_opt ~archive_uri ~continue_on_error
               check_for_complete_block
                 ~cmd_global_slot_since_genesis:zkc.global_slot_since_genesis
             in
-            let%bind txn = zkapp_command_to_transaction ~logger ~pool zkc in
+            let%bind txn =
+              zkapp_command_to_transaction ~logger ~pool ~source zkc
+            in
             apply_commands ~block_txns:(txn :: block_txns)
               ~last_global_slot_since_genesis:zkc.global_slot_since_genesis
               ~last_block_id:zkc.block_id internal_cmds user_cmds zkcs
diff --git a/src/app/berkeley_migration/berkeley_migration.ml b/src/app/berkeley_migration/berkeley_migration.ml
index f9689b8fb2..bfa01f1985 100644
--- a/src/app/berkeley_migration/berkeley_migration.ml
+++ b/src/app/berkeley_migration/berkeley_migration.ml
@@ -2,7 +2,6 @@
 
 open Core_kernel
 open Async
-open Caqti_async
 
 (* before running this program for the first time, import the berkeley schema to the
    migrated database name
@@ -67,10 +66,10 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
   let query_mainnet_db ~f = Mina_caqti.query ~f mainnet_pool in
   [%log info] "Fetching transaction sequence from prior database" ;
   let%bind block_user_cmds =
-    query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
+    query_mainnet_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit
-             (Caqti_type.tup2 Sql.Mainnet.User_command.typ
+          (Mina_caqti.collect_req Caqti_type.unit
+             (Caqti_type.t2 Sql.Mainnet.User_command.typ
                 Sql.Mainnet.Block_user_command.typ )
              (sprintf
                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
@@ -85,10 +84,10 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
           () )
   in
   let%bind block_internal_cmds =
-    query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
+    query_mainnet_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
         Conn.collect_list
-          (Caqti_request.collect Caqti_type.unit
-             (Caqti_type.tup2 Sql.Mainnet.Internal_command.typ
+          (Mina_caqti.collect_req Caqti_type.unit
+             (Caqti_type.t2 Sql.Mainnet.Internal_command.typ
                 Sql.Mainnet.Block_internal_command.typ )
              (sprintf
                 "SELECT %s, %s FROM %s AS c JOIN %s AS j ON c.id = \
@@ -117,10 +116,10 @@ let mainnet_block_to_extensional_batch ~logger ~mainnet_pool ~precomputed_blocks
   let%bind public_keys =
     if List.is_empty required_public_key_ids then return Int.Map.empty
     else
-      query_mainnet_db ~f:(fun (module Conn : CONNECTION) ->
+      query_mainnet_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
           Conn.collect_list
-            (Caqti_request.collect Caqti_type.unit
-               Caqti_type.(tup2 int Sql.Mainnet.Public_key.typ)
+            (Mina_caqti.collect_req Caqti_type.unit
+               Caqti_type.(t2 int Sql.Mainnet.Public_key.typ)
                (sprintf "SELECT id, value FROM %s WHERE id IN (%s)"
                   Sql.Mainnet.Public_key.table_name
                   ( String.concat ~sep:","
@@ -341,10 +340,10 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
   let mainnet_pool =
-    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
+    Mina_caqti.connect_pool ~max_size:128 mainnet_archive_uri
   in
   let migrated_pool =
-    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
+    Mina_caqti.connect_pool ~max_size:128 migrated_archive_uri
   in
   match (mainnet_pool, migrated_pool) with
   | Error e, _ | _, Error e ->
@@ -410,9 +409,9 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
          startup in order to be able to resume gracefully in the event of an unfortunate crash. *)
       let%bind () =
         let%bind garbage_block_ids =
-          query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
+          query_migrated_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
               Conn.collect_list
-                (Caqti_request.collect Caqti_type.unit Caqti_type.int
+                (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
                    (sprintf
                       "DELETE FROM %s WHERE parent_id IS NULL AND height > 1 \
                        RETURNING id"
@@ -426,17 +425,17 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
             @@ List.map garbage_block_ids ~f:Int.to_string
           in
           let%bind () =
-            query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
+            query_migrated_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
                 Conn.exec
-                  (Caqti_request.exec Caqti_type.unit
+                  (Mina_caqti.exec_req Caqti_type.unit
                      (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
                         Archive_lib.Processor.Block_and_signed_command
                         .table_name garbage_block_ids_sql ) )
                   () )
           in
-          query_migrated_db ~f:(fun (module Conn : CONNECTION) ->
+          query_migrated_db ~f:(fun (module Conn : Mina_caqti.CONNECTION) ->
               Conn.exec
-                (Caqti_request.exec Caqti_type.unit
+                (Mina_caqti.exec_req Caqti_type.unit
                    (sprintf "DELETE FROM %s WHERE block_id IN (%s)"
                       Archive_lib.Processor.Block_and_internal_command
                       .table_name garbage_block_ids_sql ) )
@@ -535,7 +534,6 @@ let main ~mainnet_archive_uri ~migrated_archive_uri ~runtime_config_file
                      | Error (`Encode_failed _ as err)
                      | Error (`Encode_rejected _ as err)
                      | Error (`Request_failed _ as err)
-                     | Error (`Request_rejected _ as err)
                      | Error (`Response_failed _ as err)
                      | Error (`Response_rejected _ as err) ->
                          failwithf
diff --git a/src/app/berkeley_migration/sql.ml b/src/app/berkeley_migration/sql.ml
index 297081b7b3..4b677e43f3 100644
--- a/src/app/berkeley_migration/sql.ml
+++ b/src/app/berkeley_migration/sql.ml
@@ -1,7 +1,6 @@
 (* sql.ml -- for reading the mainnet and berkeley databases (no writing!) *)
 
 open Core
-open Caqti_async
 
 module Mainnet = struct
   module Public_key = struct
@@ -17,17 +16,17 @@ module Mainnet = struct
 
     let table_name = "public_keys"
 
-    let find_by_id (module Conn : CONNECTION) id =
+    let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find
-        (Caqti_request.find Caqti_type.int Caqti_type.string
+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
            "SELECT value FROM public_keys WHERE id = ?" )
         id
   end
 
   module Snarked_ledger_hash = struct
-    let find_by_id (module Conn : CONNECTION) id =
+    let find_by_id (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find
-        (Caqti_request.find Caqti_type.int Caqti_type.string
+        (Mina_caqti.find_req Caqti_type.int Caqti_type.string
            "SELECT value FROM snarked_ledger_hashes WHERE id = ?" )
         id
   end
@@ -77,18 +76,18 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let id_from_state_hash (module Conn : CONNECTION) state_hash =
+    let id_from_state_hash (module Conn : Mina_caqti.CONNECTION) state_hash =
       Conn.find
-        (Caqti_request.find Caqti_type.string Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.string Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE state_hash = ?
          |sql} )
         state_hash
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                         next_epoch_data_id, ledger_hash, height, global_slot,
@@ -96,17 +95,17 @@ module Mainnet = struct
                  WHERE id = ?                                                                                                    |sql} )
         id
 
-    let canonical_blocks (module Conn : CONNECTION) =
+    let canonical_blocks (module Conn : Mina_caqti.CONNECTION) =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.unit Caqti_type.int
+        (Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE chain_status = 'canonical'
          |sql} )
 
-    let full_canonical_blocks (module Conn : CONNECTION) =
+    let full_canonical_blocks (module Conn : Mina_caqti.CONNECTION) =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.unit typ
+        (Mina_caqti.collect_req Caqti_type.unit typ
            {sql| SELECT id, state_hash, parent_id, parent_hash, creator_id,
                         block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                         next_epoch_data_id, ledger_hash, height, global_slot,
@@ -116,23 +115,23 @@ module Mainnet = struct
                  ORDER BY height ASC
          |sql} )
 
-    let mark_as_canonical (module Conn : CONNECTION) id =
+    let mark_as_canonical (module Conn : Mina_caqti.CONNECTION) id =
       Conn.exec
-        (Caqti_request.exec Caqti_type.int
+        (Mina_caqti.exec_req Caqti_type.int
            "UPDATE blocks SET chain_status='canonical' WHERE id = ?" )
         id
 
-    let get_highest_canonical_block (module Conn : CONNECTION) =
+    let get_highest_canonical_block (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            "SELECT id FROM blocks WHERE chain_status='canonical' ORDER BY \
             height DESC LIMIT 1" )
 
-    let get_subchain (module Conn : CONNECTION) ~start_block_id ~end_block_id =
+    let get_subchain (module Conn : Mina_caqti.CONNECTION) ~start_block_id ~end_block_id =
       (* derive query from type `t` *)
       Conn.collect_list
-        (Caqti_request.collect
-           Caqti_type.(tup2 int int)
+        (Mina_caqti.collect_req
+           Caqti_type.(t2 int int)
            Caqti_type.int
            {sql| WITH RECURSIVE chain AS (
                     SELECT id, parent_id, height
@@ -194,9 +193,9 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load_block (module Conn : CONNECTION) ~block_id =
+    let load_block (module Conn : Mina_caqti.CONNECTION) ~block_id =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.int typ
+        (Mina_caqti.collect_req Caqti_type.int typ
            {sql| SELECT block_id, user_command_id,
                sequence_no,
                status,failure_reason,
@@ -233,9 +232,9 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load_block (module Conn : CONNECTION) ~block_id =
+    let load_block (module Conn : Mina_caqti.CONNECTION) ~block_id =
       Conn.collect_list
-        (Caqti_request.collect Caqti_type.int typ
+        (Mina_caqti.collect_req Caqti_type.int typ
            {sql| SELECT block_id, internal_command_id,
                  sequence_no, secondary_sequence_no,
                  receiver_account_creation_fee_paid,
@@ -266,12 +265,12 @@ module Mainnet = struct
       let decode ((typ, receiver_id, fee, token), hash) =
         Ok { typ; receiver_id; fee; token; hash }
       in
-      let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
+      let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
       Caqti_type.custom ~encode ~decode rep
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,receiver_id,fee,token,hash
                  FROM internal_commands
                  WHERE id = ?
@@ -336,9 +335,9 @@ module Mainnet = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load (module Conn : CONNECTION) ~(id : int) =
+    let load (module Conn : Mina_caqti.CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,fee_payer_id,source_id,receiver_id,
                  fee_token,token,
                  nonce,amount,fee,valid_until,memo,hash
@@ -350,16 +349,16 @@ end
 
 module Berkeley = struct
   module Block = struct
-    let count (module Conn : CONNECTION) =
+    let count (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            {sql| SELECT count (*)
                  FROM blocks
            |sql} )
 
-    let greatest_block_height (module Conn : CONNECTION) =
+    let greatest_block_height (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int64
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
            {sql| SELECT height
                  FROM blocks
                  WHERE chain_status <> 'orphaned'
@@ -367,9 +366,9 @@ module Berkeley = struct
                  LIMIT 1
            |sql} )
 
-    let genesis_block_id (module Conn : CONNECTION) =
+    let genesis_block_id (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.unit Caqti_type.int
+        (Mina_caqti.find_req Caqti_type.unit Caqti_type.int
            {sql| SELECT id
                  FROM blocks
                  WHERE height = 1
@@ -386,9 +385,9 @@ module Berkeley = struct
       let decode t = Ok (of_hlist (tuple_to_hlist spec t)) in
       Caqti_type.custom ~encode ~decode (to_rep spec)
 
-    let load (module Conn : CONNECTION) =
+    let load (module Conn : Mina_caqti.CONNECTION) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT pk.value, t.value
                  FROM account_identifiers ai
                  INNER JOIN tokens t ON ai.token_id = t.id
@@ -398,9 +397,9 @@ module Berkeley = struct
   end
 
   module Accounts_accessed = struct
-    let greatest_ledger_index (module Conn : CONNECTION) =
+    let greatest_ledger_index (module Conn : Mina_caqti.CONNECTION) =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.int Caqti_type.int
+        (Mina_caqti.find_opt_req Caqti_type.int Caqti_type.int
            {sql| SELECT ledger_index
                  FROM accounts_accessed
                  WHERE block_id = $1
diff --git a/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml b/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
index 25137a4c42..685c8cdf53 100644
--- a/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
+++ b/src/app/berkeley_migration_verifier/berkeley_migration_verifier.ml
@@ -259,10 +259,10 @@ let pre_fork_validations ~mainnet_archive_uri ~migrated_archive_uri () =
   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
   let mainnet_pool =
-    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
+    Mina_caqti.connect_pool ~max_size:128 mainnet_archive_uri
   in
   let migrated_pool =
-    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
+    Mina_caqti.connect_pool ~max_size:128 migrated_archive_uri
   in
 
   match (mainnet_pool, migrated_pool) with
@@ -351,10 +351,10 @@ let post_fork_validations ~mainnet_archive_uri ~migrated_archive_uri
   let mainnet_archive_uri = Uri.of_string mainnet_archive_uri in
   let migrated_archive_uri = Uri.of_string migrated_archive_uri in
   let mainnet_pool =
-    Caqti_async.connect_pool ~max_size:128 mainnet_archive_uri
+    Mina_caqti.connect_pool ~max_size:128 mainnet_archive_uri
   in
   let migrated_pool =
-    Caqti_async.connect_pool ~max_size:128 migrated_archive_uri
+    Mina_caqti.connect_pool ~max_size:128 migrated_archive_uri
   in
 
   match (mainnet_pool, migrated_pool) with
diff --git a/src/app/berkeley_migration_verifier/sql.ml b/src/app/berkeley_migration_verifier/sql.ml
index 40b6b3f114..627350987a 100644
--- a/src/app/berkeley_migration_verifier/sql.ml
+++ b/src/app/berkeley_migration_verifier/sql.ml
@@ -1,6 +1,5 @@
 open Core
 open Async
-open Caqti_async
 
 module Accounts_created = struct
   type t =
@@ -79,7 +78,7 @@ end
 
 module Mainnet = struct
   let dump_accounts_created_query =
-    Caqti_request.collect Caqti_type.unit Accounts_created.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_created.typ
       {sql|
       ( SELECT height, value AS public_key, state_hash, receiver_account_creation_fee_paid AS creation_fee
         FROM blocks_user_commands
@@ -100,18 +99,18 @@ module Mainnet = struct
       ) 
       ORDER BY height, public_key |sql}
 
-  let dump_accounts_created (module Conn : CONNECTION) =
+  let dump_accounts_created (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_accounts_created_query ()
 
   let dump_state_and_ledger_hashes_query =
     (* Workaround for replacing output file as caqti has an issue with using ? in place of FILE argument*)
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       "  SELECT state_hash, ledger_hash FROM blocks\n\
       \            WHERE chain_status = 'canonical'\n\
       \          "
 
   let dump_block_hashes_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       (Printf.sprintf
          "\n\
          \      SELECT state_hash, ledger_hash FROM blocks\n\
@@ -119,22 +118,22 @@ module Mainnet = struct
          \            AND height <= %d ORDER BY height\n\
          \      " height )
 
-  let dump_block_hashes_till_height (module Conn : CONNECTION) height =
+  let dump_block_hashes_till_height (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list (dump_block_hashes_till_height_query ~height) ()
 
   let dump_block_hashes_query =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       "\n\
       \      SELECT state_hash, ledger_hash FROM blocks\n\
       \            WHERE chain_status = 'canonical'\n\
       \            ORDER BY height\n\
       \      "
 
-  let dump_block_hashes (module Conn : CONNECTION) =
+  let dump_block_hashes (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_block_hashes_query ()
 
   let dump_user_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       (Printf.sprintf
          "WITH user_command_ids AS\n\
          \      ( SELECT height, sequence_no, user_command_id FROM \
@@ -152,11 +151,11 @@ module Mainnet = struct
           fee_payer_keys.id ORDER BY height, sequence_no\n\
          \      " height )
 
-  let dump_user_commands_till_height (module Conn : CONNECTION) height =
+  let dump_user_commands_till_height (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list (dump_user_commands_till_height_query ~height) ()
 
   let dump_internal_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       (Printf.sprintf
          "WITH internal_command_ids AS \n\
          \        ( SELECT internal_command_id, height, sequence_no, \
@@ -174,11 +173,11 @@ module Mainnet = struct
          \   \n\
          \          " height )
 
-  let dump_internal_commands_till_height (module Conn : CONNECTION) height =
+  let dump_internal_commands_till_height (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list (dump_internal_commands_till_height_query ~height) ()
 
   let dump_user_commands_query =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       "WITH user_command_ids AS\n\
       \      ( SELECT height, sequence_no, user_command_id FROM \
        blocks_user_commands\n\
@@ -194,11 +193,11 @@ module Mainnet = struct
        fee_payer_keys.id ORDER BY height, sequence_no\n\
       \      "
 
-  let dump_user_commands (module Conn : CONNECTION) =
+  let dump_user_commands (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_user_commands_query ()
 
   let dump_internal_commands_query =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       (Printf.sprintf
          "WITH internal_command_ids AS \n\
          \        ( SELECT internal_command_id, height, sequence_no, \
@@ -215,11 +214,11 @@ module Mainnet = struct
          \   \n\
          \          " )
 
-  let dump_internal_commands (module Conn : CONNECTION) =
+  let dump_internal_commands (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_internal_commands_query ()
 
   let mark_chain_till_fork_block_as_canonical_query =
-    Caqti_request.exec Caqti_type.string
+    Mina_caqti.exec_req Caqti_type.string
       {sql|
       UPDATE blocks
     Set chain_status = 'canonical'
@@ -241,14 +240,14 @@ module Mainnet = struct
       )
       |sql}
 
-  let mark_chain_till_fork_block_as_canonical (module Conn : CONNECTION)
-      fork_state_hash =
+  let mark_chain_till_fork_block_as_canonical
+      (module Conn : Mina_caqti.CONNECTION) fork_state_hash =
     Conn.exec mark_chain_till_fork_block_as_canonical_query fork_state_hash
 end
 
 module Berkeley = struct
   let dump_accounts_created_query =
-    Caqti_request.collect Caqti_type.unit Accounts_created.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_created.typ
       {sql|
       SELECT height, value AS public_key, state_hash, creation_fee
       FROM accounts_created
@@ -257,19 +256,20 @@ module Berkeley = struct
       JOIN public_keys         ON public_key_id         = public_keys.id
       ORDER BY height, public_key |sql}
 
-  let dump_accounts_created (module Conn : CONNECTION) =
+  let dump_accounts_created (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_accounts_created_query ()
 
   let height_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| 
             SELECT height from blocks order by height desc limit 1;
           |sql}
 
-  let block_height (module Conn : CONNECTION) = Conn.find height_query ()
+  let block_height (module Conn : Mina_caqti.CONNECTION) =
+    Conn.find height_query ()
 
   let canonical_blocks_count_till_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql|
         WITH RECURSIVE chain AS 
         (  
@@ -283,19 +283,21 @@ module Berkeley = struct
         ) SELECT count(*) FROM chain where chain_status = 'canonical';
       |sql}
 
-  let canonical_blocks_count_till_height (module Conn : CONNECTION) height =
+  let canonical_blocks_count_till_height (module Conn : Mina_caqti.CONNECTION)
+      height =
     Conn.find canonical_blocks_count_till_height_query height
 
   let blocks_count_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql|
           SELECT count(*) FROM blocks ;
         |sql}
 
-  let blocks_count (module Conn : CONNECTION) = Conn.find blocks_count_query ()
+  let blocks_count (module Conn : Mina_caqti.CONNECTION) =
+    Conn.find blocks_count_query ()
 
   let dump_user_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       (Printf.sprintf
          "WITH user_command_ids AS\n\
          \      ( SELECT height, sequence_no, user_command_id FROM \
@@ -313,11 +315,11 @@ module Berkeley = struct
           fee_payer_keys.id ORDER BY height, sequence_no\n\
          \     " height )
 
-  let dump_user_commands_till_height (module Conn : CONNECTION) height =
+  let dump_user_commands_till_height (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list (dump_user_commands_till_height_query ~height) ()
 
   let dump_internal_commands_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       (Printf.sprintf
          "WITH internal_command_ids AS \n\
          \        ( SELECT internal_command_id, height, sequence_no, \
@@ -335,11 +337,11 @@ module Berkeley = struct
           command_type \n\
          \      " height )
 
-  let dump_internal_commands_till_height (module Conn : CONNECTION) height =
+  let dump_internal_commands_till_height (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list (dump_internal_commands_till_height_query ~height) ()
 
   let dump_user_commands_query =
-    Caqti_request.collect Caqti_type.unit User_command.typ
+    Mina_caqti.collect_req Caqti_type.unit User_command.typ
       "WITH user_command_ids AS\n\
       \      ( SELECT height, sequence_no, user_command_id FROM \
        blocks_user_commands\n\
@@ -355,11 +357,11 @@ module Berkeley = struct
        fee_payer_keys.id ORDER BY height, sequence_no\n\
       \     "
 
-  let dump_user_commands (module Conn : CONNECTION) =
+  let dump_user_commands (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_user_commands_query ()
 
   let dump_internal_commands_query =
-    Caqti_request.collect Caqti_type.unit Internal_command.typ
+    Mina_caqti.collect_req Caqti_type.unit Internal_command.typ
       "WITH internal_command_ids AS \n\
       \        ( SELECT internal_command_id, height, sequence_no, \
        secondary_sequence_no FROM blocks_internal_commands \n\
@@ -375,22 +377,22 @@ module Berkeley = struct
        command_type \n\
       \      "
 
-  let dump_internal_commands (module Conn : CONNECTION) =
+  let dump_internal_commands (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_internal_commands_query ()
 
   let dump_accounts_accessed_query =
-    Caqti_request.collect Caqti_type.unit Accounts_accessed.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_accessed.typ
       {sql| SELECT account_identifier_id AS id, block_id 
                  FROM accounts_accessed
                  JOIN blocks ON block_id = blocks.id
                  WHERE height <> 1
                  ORDER BY block_id, id |sql}
 
-  let dump_accounts_accessed (module Conn : CONNECTION) =
+  let dump_accounts_accessed (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_accounts_accessed_query ()
 
   let dump_block_hashes_till_height_query ~height =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       (Printf.sprintf
          "SELECT state_hash, ledger_hash FROM blocks \n\
          \    WHERE chain_status = 'canonical'\n\
@@ -398,22 +400,22 @@ module Berkeley = struct
          \ \n\
          \     " height )
 
-  let dump_block_hashes_till_height (module Conn : CONNECTION) height =
+  let dump_block_hashes_till_height (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list (dump_block_hashes_till_height_query ~height) ()
 
   let dump_block_hashes_query =
-    Caqti_request.collect Caqti_type.unit State_hash_and_ledger_hash.typ
+    Mina_caqti.collect_req Caqti_type.unit State_hash_and_ledger_hash.typ
       "\n\
       \      SELECT state_hash, ledger_hash FROM blocks\n\
       \      WHERE chain_status = 'canonical'\n\
       \      ORDER BY height\n\
       \      "
 
-  let dump_block_hashes (module Conn : CONNECTION) =
+  let dump_block_hashes (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_block_hashes_query ()
 
   let dump_user_and_internal_command_info_query =
-    Caqti_request.collect Caqti_type.unit Accounts_accessed.typ
+    Mina_caqti.collect_req Caqti_type.unit Accounts_accessed.typ
       {sql| 
       ( 
         WITH user_command_ids AS
@@ -439,18 +441,18 @@ module Berkeley = struct
         INNER JOIN account_identifiers ON public_key_id = receiver_id
       ) ORDER BY block_id, id |sql}
 
-  let dump_user_and_internal_command_info (module Conn : CONNECTION) =
+  let dump_user_and_internal_command_info (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list dump_user_and_internal_command_info_query ()
 
   let get_account_accessed_count_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT count(*) FROM accounts_accessed; |sql}
 
-  let count_account_accessed (module Conn : CONNECTION) =
+  let count_account_accessed (module Conn : Mina_caqti.CONNECTION) =
     Conn.find get_account_accessed_count_query ()
 
   let get_account_id_accessed_in_commands_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| 
         select count(distinct ids.account_identifier_id) FROM 
 
@@ -472,6 +474,7 @@ module Berkeley = struct
      
       |sql}
 
-  let get_account_id_accessed_in_commands (module Conn : CONNECTION) =
+  let get_account_id_accessed_in_commands (module Conn : Mina_caqti.CONNECTION)
+      =
     Conn.find get_account_id_accessed_in_commands_query ()
 end
diff --git a/src/app/best_tip_merger/best_tip_merger.ml b/src/app/best_tip_merger/best_tip_merger.ml
index 5682f29ec5..90f418c153 100644
--- a/src/app/best_tip_merger/best_tip_merger.ml
+++ b/src/app/best_tip_merger/best_tip_merger.ml
@@ -205,7 +205,7 @@ module Compact_display = struct
         { current : State_hash.t
         ; parent : State_hash.t
         ; blockchain_length : Mina_numbers.Length.t
-        ; global_slot : Mina_numbers.Global_slot_since_genesis.t
+        ; global_slot : Mina_numbers.Global_slot_since_hard_fork.t
         }
   [@@deriving yojson]
 
@@ -243,7 +243,7 @@ module Graph_node = struct
     | Node of
         { current : State_hash.t
         ; length : Mina_numbers.Length.t
-        ; slot : Mina_numbers.Global_slot_since_genesis.t
+        ; slot : Mina_numbers.Global_slot_since_hard_fork.t
         }
   [@@deriving yojson, equal, hash]
 
@@ -267,7 +267,7 @@ module Graph_node = struct
           ("NA", "NA")
       | Node s ->
           ( Mina_numbers.Length.to_string s.length
-          , Mina_numbers.Global_slot_since_genesis.to_string s.slot )
+          , Mina_numbers.Global_slot_since_hard_fork.to_string s.slot )
     in
     { state; slot; length; peers = t.peers }
 
diff --git a/src/app/delegation_compliance/delegation_compliance.ml b/src/app/delegation_compliance/delegation_compliance.ml
index 8a0e92a6c5..d91071a33c 100644
--- a/src/app/delegation_compliance/delegation_compliance.ml
+++ b/src/app/delegation_compliance/delegation_compliance.ml
@@ -113,7 +113,7 @@ let global_slot_hashes_tbl : (Int64.t, State_hash.t * Ledger_hash.t) Hashtbl.t =
 let pk_tbl : (int, Account.key) Hashtbl.t = Int.Table.create ()
 
 let query_db pool ~f ~item =
-  match%bind Caqti_async.Pool.use f pool with
+  match%bind Mina_caqti.Pool.use f pool with
   | Ok v ->
       return v
   | Error msg ->
@@ -141,7 +141,7 @@ let pk_of_pk_id pool pk_id : Account.key Deferred.t =
   | None -> (
       (* not in cache, consult database *)
       match%map
-        Caqti_async.Pool.use (fun db -> Sql.Public_key.run db pk_id) pool
+        Mina_caqti.Pool.use (fun db -> Sql.Public_key.run db pk_id) pool
       with
       | Ok (Some pk) -> (
           match Signature_lib.Public_key.Compressed.of_base58_check pk with
@@ -162,7 +162,7 @@ let pk_of_pk_id pool pk_id : Account.key Deferred.t =
 let pk_id_of_pk pool pk : int Deferred.t =
   let open Deferred.Let_syntax in
   match%map
-    Caqti_async.Pool.use (fun db -> Sql.Public_key.run_for_id db pk) pool
+    Mina_caqti.Pool.use (fun db -> Sql.Public_key.run_for_id db pk) pool
   with
   | Ok (Some id) ->
       id
@@ -343,7 +343,7 @@ let main ~input_file ~csv_file ~preliminary_csv_file_opt ~archive_uri
         csv_datas
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match Mina_caqti.connect_pool ~max_size:128 archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -603,7 +603,7 @@ let main ~input_file ~csv_file ~preliminary_csv_file_opt ~archive_uri
                 ] ;
             let%bind coinbase_receiver_ids =
               match%map
-                Caqti_async.Pool.use
+                Mina_caqti.Pool.use
                   (fun db ->
                     Sql.Coinbase_receivers_for_block_creator.run db
                       ~block_creator_id:delegatee_id )
diff --git a/src/app/delegation_compliance/sql.ml b/src/app/delegation_compliance/sql.ml
index 3d214eb9c9..713ea23916 100644
--- a/src/app/delegation_compliance/sql.ml
+++ b/src/app/delegation_compliance/sql.ml
@@ -16,7 +16,7 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect Caqti_type.string typ
+    Mina_caqti.collect_req Caqti_type.string typ
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id,global_slot,state_hash,ledger_hash FROM blocks b WHERE b.state_hash = ?
@@ -34,7 +34,7 @@ module Block_info = struct
 
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) state_hash =
+  let run (module Conn : Mina_caqti.CONNECTION) state_hash =
     Conn.collect_list query state_hash
 end
 
@@ -122,7 +122,7 @@ module User_command = struct
     Caqti_type.custom ~encode ~decode (to_rep spec)
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id,receiver_id,fee,fee_token,token,amount,valid_until,memo,nonce,
                    blocks.id,blocks.global_slot,parent.global_slot_since_genesis,
                    sequence_no,status,created_token,
@@ -144,12 +144,12 @@ module User_command = struct
 
        |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) user_cmd_id =
+  let run (module Conn : Mina_caqti.CONNECTION) user_cmd_id =
     Conn.collect_list query user_cmd_id
 
   let query_payments_by_source_and_receiver =
-    Caqti_request.collect
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int int)
       typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
@@ -176,13 +176,13 @@ module User_command = struct
 
        |sql}
 
-  let run_payments_by_source_and_receiver (module Conn : Caqti_async.CONNECTION)
+  let run_payments_by_source_and_receiver (module Conn : Mina_caqti.CONNECTION)
       ~source_id ~receiver_id =
     Conn.collect_list query_payments_by_source_and_receiver
       (source_id, receiver_id)
 
   let query_payments_by_receiver =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
                parent.global_slot_since_genesis, sequence_no, status, created_token,
@@ -207,51 +207,51 @@ module User_command = struct
 
        |sql}
 
-  let run_payments_by_receiver (module Conn : Caqti_async.CONNECTION)
+  let run_payments_by_receiver (module Conn : Mina_caqti.CONNECTION)
       ~receiver_id =
     Conn.collect_list query_payments_by_receiver receiver_id
 end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) pk_id =
+  let run (module Conn : Mina_caqti.CONNECTION) pk_id =
     Conn.find_opt query pk_id
 
   let query_for_id =
-    Caqti_request.find_opt Caqti_type.string Caqti_type.int
+    Mina_caqti.find_opt_req Caqti_type.string Caqti_type.int
       {sql| SELECT id FROM public_keys
             WHERE value = ?
       |sql}
 
-  let run_for_id (module Conn : Caqti_async.CONNECTION) pk =
+  let run_for_id (module Conn : Mina_caqti.CONNECTION) pk =
     Conn.find_opt query_for_id pk
 end
 
 module Block = struct
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT MAX(global_slot) FROM blocks
       |sql}
 
-  let get_max_slot (module Conn : Caqti_async.CONNECTION) () =
+  let get_max_slot (module Conn : Mina_caqti.CONNECTION) () =
     Conn.find max_slot_query ()
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot = $1
       |sql}
 
-  let get_state_hashes_by_slot (module Conn : Caqti_async.CONNECTION) slot =
+  let get_state_hashes_by_slot (module Conn : Mina_caqti.CONNECTION) slot =
     Conn.collect_list state_hashes_by_slot_query slot
 
   let creator_slot_bounds_query =
-    Caqti_request.collect
-      Caqti_type.(tup3 int int64 int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t3 int int64 int64)
       Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE creator_id = $1
@@ -259,7 +259,7 @@ module Block = struct
       |sql}
 
   let get_block_ids_for_creator_in_slot_bounds
-      (module Conn : Caqti_async.CONNECTION) ~creator ~low_slot ~high_slot =
+      (module Conn : Mina_caqti.CONNECTION) ~creator ~low_slot ~high_slot =
     Conn.collect_list creator_slot_bounds_query (creator, low_slot, high_slot)
 end
 
@@ -268,7 +268,7 @@ module Coinbase_receivers_for_block_creator = struct
      with given creator_id, where the receiver distinct from the creator_id
   *)
   let query =
-    Caqti_request.collect Caqti_type.int Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.int
       {sql| SELECT DISTINCT ic.receiver_id
 
             FROM blocks b
@@ -290,6 +290,6 @@ module Coinbase_receivers_for_block_creator = struct
               AND ic.receiver_id <> b.creator_id
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_creator_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_creator_id =
     Conn.collect_list query block_creator_id
 end
diff --git a/src/app/extract_blocks/extract_blocks.ml b/src/app/extract_blocks/extract_blocks.ml
index 3605538ae4..a104ffaa68 100644
--- a/src/app/extract_blocks/extract_blocks.ml
+++ b/src/app/extract_blocks/extract_blocks.ml
@@ -479,7 +479,7 @@ let main ~archive_uri ~start_state_hash_opt ~end_state_hash_opt ~all_blocks () =
   (* sanity-check input state hashes *)
   check_state_hash ~logger start_state_hash_opt ;
   check_state_hash ~logger end_state_hash_opt ;
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match Mina_caqti.connect_pool ~max_size:128 archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/extract_blocks/sql.ml b/src/app/extract_blocks/sql.ml
index 2c4b659973..5233a16a89 100644
--- a/src/app/extract_blocks/sql.ml
+++ b/src/app/extract_blocks/sql.ml
@@ -31,23 +31,23 @@ module Subchain = struct
       fields b_fields join_condition fields
 
   let query_unparented =
-    Caqti_request.collect Caqti_type.string Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.string Archive_lib.Processor.Block.typ
       (make_sql ~join_condition:"b.id = chain.parent_id")
 
   let query_from_start =
-    Caqti_request.collect
-      Caqti_type.(tup2 string string)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string string)
       Archive_lib.Processor.Block.typ
       (make_sql
          ~join_condition:
            "b.id = chain.parent_id AND (chain.state_hash <> $2 OR b.state_hash \
             = $2)" )
 
-  let start_from_unparented (module Conn : Caqti_async.CONNECTION)
+  let start_from_unparented (module Conn : Mina_caqti.CONNECTION)
       ~end_state_hash =
     Conn.collect_list query_unparented end_state_hash
 
-  let start_from_specified (module Conn : Caqti_async.CONNECTION)
+  let start_from_specified (module Conn : Mina_caqti.CONNECTION)
       ~start_state_hash ~end_state_hash =
     Conn.collect_list query_from_start (end_state_hash, start_state_hash)
 
@@ -56,10 +56,10 @@ module Subchain = struct
     let comma_fields =
       String.concat Archive_lib.Processor.Block.Fields.names ~sep:","
     in
-    Caqti_request.collect Caqti_type.unit Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.unit Archive_lib.Processor.Block.typ
       (sprintf "SELECT %s FROM blocks" comma_fields)
 
-  let all_blocks (module Conn : Caqti_async.CONNECTION) =
+  let all_blocks (module Conn : Mina_caqti.CONNECTION) =
     Conn.collect_list query_all ()
 end
 
@@ -67,14 +67,14 @@ end
 
 module Blocks_and_user_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT user_command_id, sequence_no
             FROM blocks_user_commands
             WHERE block_id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.collect_list query block_id
 end
 
@@ -91,7 +91,7 @@ module Block_user_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_user_commands buc
             INNER JOIN blocks
@@ -105,7 +105,7 @@ module Block_user_command_tokens = struct
             WHERE block_id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.collect_list query block_id
 end
 
@@ -122,7 +122,7 @@ module Blocks_and_internal_commands = struct
       Caqti_type.[ int; int; int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT internal_command_id, sequence_no, secondary_sequence_no
             FROM (blocks_internal_commands
             INNER JOIN blocks
@@ -130,7 +130,7 @@ module Blocks_and_internal_commands = struct
             WHERE block_id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.collect_list query block_id
 end
 
@@ -147,7 +147,7 @@ module Block_internal_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_internal_commands bic
             INNER JOIN blocks
@@ -161,20 +161,20 @@ module Block_internal_command_tokens = struct
             WHERE block_id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.collect_list query block_id
 end
 
 module Blocks_and_zkapp_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT zkapp_command_id, sequence_no
             FROM blocks_zkapp_commands
             WHERE block_id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.collect_list query block_id
 end
 
@@ -191,7 +191,7 @@ module Block_zkapp_command_tokens = struct
       Caqti_type.[ string; option int; option int ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT tokens.value, owner_public_key_id, owner_token_id
             FROM (blocks_zkapp_commands bzkc
             INNER JOIN blocks
@@ -208,6 +208,6 @@ module Block_zkapp_command_tokens = struct
             WHERE block_id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.collect_list query block_id
 end
diff --git a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
index 65b34d6b55..efe0668cc2 100644
--- a/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
+++ b/src/app/genesis_ledger_from_tsv/genesis_ledger_from_tsv.ml
@@ -67,15 +67,11 @@ let amount_geq_min_balance ~amount ~initial_min_balance =
 let generate_delegate_account ~logger delegatee_pk =
   [%log info] "Generating account for delegatee $delegatee"
     ~metadata:[ ("delegatee", `String delegatee_pk) ] ;
-  let pk = Some delegatee_pk in
-  let balance = Currency.Balance.zero in
-  let timing = None in
-  let delegate = None in
   { Runtime_config.Json_layout.Accounts.Single.default with
-    pk
-  ; balance
-  ; timing
-  ; delegate
+    pk = delegatee_pk
+  ; balance = Currency.Balance.zero
+  ; timing = None
+  ; delegate = None
   }
 
 let generate_missing_delegate_accounts ~logger =
@@ -97,7 +93,6 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
     ~delegatee_pk =
   [%log info] "Processing record for $wallet_pk"
     ~metadata:[ ("wallet_pk", `String wallet_pk) ] ;
-  let pk = Some wallet_pk in
   let balance = Currency.Balance.of_mina_string_exn amount in
   let initial_minimum_balance =
     (* if omitted in the TSV, use balance *)
@@ -135,7 +130,9 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
           .initial_minimum_balance
         ; cliff_time
         ; cliff_amount
-        ; vesting_period
+        ; vesting_period =
+            Global_slot_since_genesis.(
+              diff vesting_period zero |> Option.value_exn)
         ; vesting_increment
         }
   in
@@ -144,7 +141,7 @@ let runtime_config_account ~logger ~wallet_pk ~amount ~initial_min_balance
     if no_delegatee delegatee_pk then None else Some delegatee_pk
   in
   { Runtime_config.Json_layout.Accounts.Single.default with
-    pk
+    pk = wallet_pk
   ; balance
   ; timing
   ; delegate
diff --git a/src/app/ledger_export_bench/ledger_export_benchmark.ml b/src/app/ledger_export_bench/ledger_export_benchmark.ml
index cd5846345a..5125f8ba90 100644
--- a/src/app/ledger_export_bench/ledger_export_benchmark.ml
+++ b/src/app/ledger_export_bench/ledger_export_benchmark.ml
@@ -26,7 +26,7 @@ let () =
   let cfg = load_daemon_cfg runtime_config () in
   let accounts =
     match cfg.ledger with
-    | None | Some { base = Named _; _ } | Some { base = Hash _; _ } ->
+    | None | Some { base = Named _; _ } | Some { base = Hash; _ } ->
         []
     | Some { base = Accounts accs; _ } ->
         List.map ~f:Runtime_config.Accounts.Single.to_account accs
diff --git a/src/app/migrate-balances-table/dune b/src/app/migrate-balances-table/dune
index dbb463c78c..dbe6d09aad 100644
--- a/src/app/migrate-balances-table/dune
+++ b/src/app/migrate-balances-table/dune
@@ -18,6 +18,7 @@
    ;; local libraries
    logger
    bounded_types
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/migrate-balances-table/migrate_balances_table.ml b/src/app/migrate-balances-table/migrate_balances_table.ml
index 76d0549c2a..ea2efbce41 100644
--- a/src/app/migrate-balances-table/migrate_balances_table.ml
+++ b/src/app/migrate-balances-table/migrate_balances_table.ml
@@ -4,7 +4,7 @@ open Core_kernel
 open Async
 
 let query_db pool ~f ~item =
-  match%bind Caqti_async.Pool.use f pool with
+  match%bind Mina_caqti.Pool.use f pool with
   | Ok v ->
       return v
   | Error msg ->
@@ -14,7 +14,7 @@ let query_db pool ~f ~item =
 let main ~archive_uri () =
   let logger = Logger.create () in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match Mina_caqti.connect_pool ~max_size:128 archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/migrate-balances-table/sql.ml b/src/app/migrate-balances-table/sql.ml
index 4c0a8c86dd..be4d000a4d 100644
--- a/src/app/migrate-balances-table/sql.ml
+++ b/src/app/migrate-balances-table/sql.ml
@@ -2,9 +2,9 @@
 
 open Core_kernel
 
-let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
+let create_temp_balances_table (module Conn : Mina_caqti.CONNECTION) =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        {sql| CREATE TABLE IF NOT EXISTS balances_temp
            ( id                           serial PRIMARY KEY
            , public_key_id                int    NOT NULL REFERENCES public_keys(id)
@@ -17,80 +17,80 @@ let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
            )
       |sql} )
 
-let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
+let copy_table_to_temp_table (module Conn : Mina_caqti.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_temp AS (SELECT * FROM %s)
                 |sql}
           table table ) )
 
-let create_table_index (module Conn : Caqti_async.CONNECTION) table col =
+let create_table_index (module Conn : Mina_caqti.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
           table col table col ) )
 
-let create_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
+let create_temp_table_index (module Conn : Mina_caqti.CONNECTION) table col =
   create_table_index (module Conn) (sprintf "%s_temp" table) col
 
-let create_table_named_index (module Conn : Caqti_async.CONNECTION) table col
+let create_table_named_index (module Conn : Mina_caqti.CONNECTION) table col
     name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
           table name table col ) )
 
-let create_temp_table_named_index (module Conn : Caqti_async.CONNECTION) table
+let create_temp_table_named_index (module Conn : Mina_caqti.CONNECTION) table
     col name =
   create_table_named_index (module Conn) (sprintf "%s_temp" table) col name
 
-let drop_table_index (module Conn : Caqti_async.CONNECTION) table col =
+let drop_table_index (module Conn : Mina_caqti.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP INDEX IF EXISTS idx_%s_%s
           |sql} table col ) )
 
-let drop_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
+let drop_temp_table_index (module Conn : Mina_caqti.CONNECTION) table col =
   drop_table_index (module Conn) (sprintf "%s_temp" table) col
 
-let create_cursor (module Conn : Caqti_async.CONNECTION) name =
+let create_cursor (module Conn : Mina_caqti.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_cursor
                       ( value int NOT NULL)
                  |sql}
           name ) )
 
-let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
+let initialize_cursor (module Conn : Mina_caqti.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| INSERT INTO %s_cursor (value) VALUES (0)
                 |sql}
           name ) )
 
-let current_cursor (module Conn : Caqti_async.CONNECTION) name =
+let current_cursor (module Conn : Mina_caqti.CONNECTION) name =
   Conn.find_opt
-    (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+    (Mina_caqti.find_opt_req Caqti_type.unit Caqti_type.int
        (sprintf {sql| SELECT value FROM %s_cursor
                 |sql} name ) )
 
-let update_cursor (module Conn : Caqti_async.CONNECTION) name ndx =
+let update_cursor (module Conn : Mina_caqti.CONNECTION) name ndx =
   Conn.exec
-    (Caqti_request.exec Caqti_type.int
+    (Mina_caqti.exec_req Caqti_type.int
        (sprintf
           {sql| UPDATE %s_cursor SET value = $1
                 |sql}
           name ) )
     ndx
 
-let drop_foreign_key_constraint (module Conn : Caqti_async.CONNECTION) table
+let drop_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION) table
     foreign_key =
   let sql =
     sprintf
@@ -99,9 +99,9 @@ let drop_foreign_key_constraint (module Conn : Caqti_async.CONNECTION) table
       |sql}
       table foreign_key
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
-let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
+let add_balances_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION)
     table col foreign_key =
   let sql =
     sprintf
@@ -112,9 +112,9 @@ let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
-let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
+let add_blocks_foreign_key_constraint (module Conn : Mina_caqti.CONNECTION)
     table col foreign_key =
   let sql =
     sprintf
@@ -125,14 +125,14 @@ let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
-let find_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
+let find_balance_entry (module Conn : Mina_caqti.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find_opt
-    (Caqti_request.find_opt
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_opt_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| SELECT id
             FROM balances_temp
@@ -148,12 +148,12 @@ let find_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
     , (block_id, block_height, block_sequence_no, block_secondary_sequence_no)
     )
 
-let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
+let insert_balance_entry (module Conn : Mina_caqti.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find
-    (Caqti_request.find
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| INSERT INTO balances_temp
             ( public_key_id
@@ -176,10 +176,10 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
     , (block_id, block_height, block_sequence_no, block_secondary_sequence_no)
     )
 
-let get_internal_commands (module Conn : Caqti_async.CONNECTION) =
+let get_internal_commands (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup4 int int64 (tup4 int int int int) int)
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t4 int int64 (t4 int int int int) int)
        {sql| SELECT bal.public_key_id,bal.balance,bic.block_id,blocks.height,bic.sequence_no,bic.secondary_sequence_no,
             internal_command_id
             FROM blocks_internal_commands bic
@@ -190,11 +190,11 @@ let get_internal_commands (module Conn : Caqti_async.CONNECTION) =
       |sql} )
 
 let update_internal_command_receiver_balance
-    (module Conn : Caqti_async.CONNECTION) ~new_balance_id ~block_id
+    (module Conn : Mina_caqti.CONNECTION) ~new_balance_id ~block_id
     ~internal_command_id ~block_sequence_no ~block_secondary_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup4 int int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t4 int int int int))
        {sql| UPDATE blocks_internal_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND internal_command_id = $3
@@ -207,10 +207,10 @@ let update_internal_command_receiver_balance
       , block_sequence_no
       , block_secondary_sequence_no ) )
 
-let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
+let get_user_command_fee_payers (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_fee_payer.public_key_id,bal_fee_payer.balance
              FROM blocks_user_commands buc
@@ -220,10 +220,10 @@ let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
                        bal_fee_payer.public_key_id,bal_fee_payer.balance)
       |sql} )
 
-let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
+let get_user_command_sources (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_source.public_key_id,bal_source.balance
              FROM blocks_user_commands buc
@@ -234,10 +234,10 @@ let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
                        bal_source.public_key_id,bal_source.balance)
       |sql} )
 
-let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
+let get_user_command_receivers (module Conn : Mina_caqti.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_receiver.public_key_id,bal_receiver.balance
              FROM blocks_user_commands buc
@@ -248,11 +248,11 @@ let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
                        bal_receiver.public_key_id,bal_receiver.balance)
       |sql} )
 
-let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
+let update_user_command_fee_payer_balance (module Conn : Mina_caqti.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET fee_payer_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -260,11 +260,11 @@ let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
       |sql} )
     (new_balance_id, (block_id, user_command_id, block_sequence_no))
 
-let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
+let update_user_command_source_balance (module Conn : Mina_caqti.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET source_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -273,11 +273,11 @@ let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
       |sql} )
     (new_balance_id, (block_id, user_command_id, block_sequence_no))
 
-let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
+let update_user_command_receiver_balance (module Conn : Mina_caqti.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -286,24 +286,24 @@ let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
       |sql} )
     (new_balance_id, (block_id, user_command_id, block_sequence_no))
 
-let drop_table (module Conn : Caqti_async.CONNECTION) table =
+let drop_table (module Conn : Mina_caqti.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP TABLE %s
                 |sql} table ) )
 
-let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
+let rename_temp_table (module Conn : Mina_caqti.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| ALTER TABLE %s_temp
                 RENAME TO %s
           |sql}
           table table ) )
 
-let get_column_count (module Conn : Caqti_async.CONNECTION) table =
+let get_column_count (module Conn : Mina_caqti.CONNECTION) table =
   Conn.find
-    (Caqti_request.find Caqti_type.string Caqti_type.int
+    (Mina_caqti.find_req Caqti_type.string Caqti_type.int
        {sql| SELECT COUNT(*) FROM information_schema.columns
              WHERE table_name=$1
        |sql} )
diff --git a/src/app/missing_blocks_auditor/dune b/src/app/missing_blocks_auditor/dune
index 623a5079ba..7ec1eae5af 100644
--- a/src/app/missing_blocks_auditor/dune
+++ b/src/app/missing_blocks_auditor/dune
@@ -18,6 +18,7 @@
    ;; local libraries
    logger
    bounded_types
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
index 5bce995ea2..7fbadcf59b 100644
--- a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
+++ b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
@@ -22,7 +22,7 @@ let add_error, get_exit_code =
 let main ~archive_uri () =
   let logger = Logger.create () in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match Mina_caqti.connect_pool ~max_size:128 archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -33,7 +33,7 @@ let main ~archive_uri () =
       [%log info] "Querying missing blocks" ;
       let%bind missing_blocks_raw =
         match%bind
-          Caqti_async.Pool.use (fun db -> Sql.Unparented_blocks.run db ()) pool
+          Mina_caqti.Pool.use (fun db -> Sql.Unparented_blocks.run db ()) pool
         with
         | Ok blocks ->
             return blocks
@@ -54,7 +54,7 @@ let main ~archive_uri () =
           Deferred.List.iter missing_blocks
             ~f:(fun (block_id, state_hash, height, parent_hash) ->
               match%map
-                Caqti_async.Pool.use
+                Mina_caqti.Pool.use
                   (fun db -> Sql.Missing_blocks_gap.run db height)
                   pool
               with
@@ -76,7 +76,7 @@ let main ~archive_uri () =
       [%log info] "Querying for gaps in chain statuses" ;
       let%bind highest_canonical =
         match%bind
-          Caqti_async.Pool.use
+          Mina_caqti.Pool.use
             (fun db -> Sql.Chain_status.run_highest_canonical db ())
             pool
         with
@@ -89,7 +89,7 @@ let main ~archive_uri () =
       in
       let%bind pending_below =
         match%bind
-          Caqti_async.Pool.use
+          Mina_caqti.Pool.use
             (fun db ->
               Sql.Chain_status.run_count_pending_below db highest_canonical )
             pool
@@ -118,7 +118,7 @@ let main ~archive_uri () =
             ] ) ;
       let%bind canonical_chain =
         match%bind
-          Caqti_async.Pool.use
+          Mina_caqti.Pool.use
             (fun db -> Sql.Chain_status.run_canonical_chain db highest_canonical)
             pool
         with
diff --git a/src/app/missing_blocks_auditor/sql.ml b/src/app/missing_blocks_auditor/sql.ml
index 3e2bf01e93..7aa4108f02 100644
--- a/src/app/missing_blocks_auditor/sql.ml
+++ b/src/app/missing_blocks_auditor/sql.ml
@@ -4,49 +4,49 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.collect Caqti_type.unit
-      Caqti_type.(tup4 int string int string)
+    Mina_caqti.collect_req Caqti_type.unit
+      Caqti_type.(t4 int string int string)
       {sql|
            SELECT id, state_hash, height, parent_hash FROM blocks
            WHERE parent_id IS NULL
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) () = Conn.collect_list query ()
+  let run (module Conn : Mina_caqti.CONNECTION) () = Conn.collect_list query ()
 end
 
 module Missing_blocks_gap = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT $1 - MAX(height) - 1 FROM blocks
             WHERE height < $1
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) height = Conn.find query height
+  let run (module Conn : Mina_caqti.CONNECTION) height = Conn.find query height
 end
 
 module Chain_status = struct
   let query_highest_canonical =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT max(height) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
 
-  let run_highest_canonical (module Conn : Caqti_async.CONNECTION) () =
+  let run_highest_canonical (module Conn : Mina_caqti.CONNECTION) () =
     Conn.find query_highest_canonical ()
 
   let query_count_pending_below =
-    Caqti_request.find Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT count(*) FROM blocks
             WHERE chain_status = 'pending'
             AND height <= ?
       |sql}
 
-  let run_count_pending_below (module Conn : Caqti_async.CONNECTION) height =
+  let run_count_pending_below (module Conn : Mina_caqti.CONNECTION) height =
     Conn.find query_count_pending_below height
 
   let query_canonical_chain =
-    Caqti_request.collect Caqti_type.int64
-      Caqti_type.(tup3 int string string)
+    Mina_caqti.collect_req Caqti_type.int64
+      Caqti_type.(t3 int string string)
       {sql| WITH RECURSIVE chain AS (
 
                (SELECT id, state_hash, parent_id, chain_status
@@ -69,6 +69,6 @@ module Chain_status = struct
               ORDER BY id ASC
       |sql}
 
-  let run_canonical_chain (module Conn : Caqti_async.CONNECTION) height =
+  let run_canonical_chain (module Conn : Mina_caqti.CONNECTION) height =
     Conn.collect_list query_canonical_chain height
 end
diff --git a/src/app/patch_archive_test/patch_archive_test.ml b/src/app/patch_archive_test/patch_archive_test.ml
index 1fbc9e3104..b01932ec95 100644
--- a/src/app/patch_archive_test/patch_archive_test.ml
+++ b/src/app/patch_archive_test/patch_archive_test.ml
@@ -21,7 +21,7 @@ let make_archive_copy_uri archive_uri =
   Uri.with_path archive_uri ("/copy_of_" ^ db)
 
 let query_db pool ~f ~item =
-  match%bind Caqti_async.Pool.use f pool with
+  match%bind Mina_caqti.Pool.use f pool with
   | Ok v ->
       return v
   | Error msg ->
@@ -124,7 +124,7 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
   let copy_uri = make_archive_copy_uri archive_uri in
   [%log info] "Connecting to original database" ;
   let%bind () =
-    match Caqti_async.connect_pool ~max_size:128 archive_uri with
+    match Mina_caqti.connect_pool ~max_size:128 archive_uri with
     | Error e ->
         [%log fatal]
           ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -137,7 +137,7 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
         [%log info] "Dropping copied database, in case it already exists" ;
         let%bind () =
           match%bind
-            Caqti_async.Pool.use
+            Mina_caqti.Pool.use
               (fun db -> Sql.Copy_database.run_drop_db db ~copy_db)
               pool
           with
@@ -159,7 +159,7 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
         ()
   in
   [%log info] "Connecting to copied database" ;
-  match Caqti_async.connect_pool ~max_size:128 copy_uri with
+  match Mina_caqti.connect_pool ~max_size:128 copy_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/replayer/replayer.ml b/src/app/replayer/replayer.ml
index f9f22df42c..5023ea7217 100644
--- a/src/app/replayer/replayer.ml
+++ b/src/app/replayer/replayer.ml
@@ -46,7 +46,7 @@ type output =
 
 module type Get_command_ids = sig
   val run :
-       Caqti_async.connection
+       (module Mina_caqti.CONNECTION)
     -> state_hash:string
     -> start_slot:int64
     -> (int list, [> Caqti_error.call_or_retrieve ]) Deferred.Result.t
@@ -173,7 +173,7 @@ let get_slot_hashes slot = Hashtbl.find global_slot_hashes_tbl slot
 
 let process_block_infos_of_state_hash ~logger pool ~state_hash ~start_slot ~f =
   match%bind
-    Caqti_async.Pool.use
+    Mina_caqti.Pool.use
       (fun db -> Sql.Block_info.run db ~state_hash ~start_slot)
       pool
   with
@@ -661,7 +661,7 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
              msg )
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match Mina_caqti.connect_pool ~max_size:128 archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -799,7 +799,7 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
       (* end mutable state *)
       let get_command_ids (module Command_ids : Get_command_ids) name =
         match%bind
-          Caqti_async.Pool.use
+          Mina_caqti.Pool.use
             (fun db ->
               Command_ids.run db ~state_hash:target_state_hash
                 ~start_slot:input.start_slot_since_genesis )
@@ -835,7 +835,7 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
         Deferred.List.map internal_cmd_ids ~f:(fun id ->
             let open Deferred.Let_syntax in
             match%map
-              Caqti_async.Pool.use
+              Mina_caqti.Pool.use
                 (fun db ->
                   Sql.Internal_command.run db
                     ~start_slot:input.start_slot_since_genesis
@@ -892,7 +892,7 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
         Deferred.List.map user_cmd_ids ~f:(fun id ->
             let open Deferred.Let_syntax in
             match%map
-              Caqti_async.Pool.use (fun db -> Sql.User_command.run db id) pool
+              Mina_caqti.Pool.use (fun db -> Sql.User_command.run db id) pool
             with
             | Ok [] ->
                 failwithf "Expected at least one user command with id %d" id ()
@@ -923,7 +923,7 @@ let main ~input_file ~output_file_opt ~migration_mode ~archive_uri
         Deferred.List.map zkapp_cmd_ids ~f:(fun id ->
             let open Deferred.Let_syntax in
             match%map
-              Caqti_async.Pool.use (fun db -> Sql.Zkapp_command.run db id) pool
+              Mina_caqti.Pool.use (fun db -> Sql.Zkapp_command.run db id) pool
             with
             | Ok [] ->
                 failwithf "Expected at least one zkApp command with id %d" id ()
diff --git a/src/app/replayer/sql.ml b/src/app/replayer/sql.ml
index 40caaf5af1..160e213187 100644
--- a/src/app/replayer/sql.ml
+++ b/src/app/replayer/sql.ml
@@ -18,8 +18,8 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       typ
       {sql| WITH RECURSIVE chain AS (
               SELECT id,parent_id,global_slot_since_genesis,state_hash,ledger_hash, snarked_ledger_hash_id FROM blocks b                                                                                                                                                           WHERE b.state_hash = $1
@@ -34,7 +34,7 @@ module Block_info = struct
 
            SELECT id,global_slot_since_genesis,state_hash,ledger_hash, snarked_ledger_hash_id FROM chain c                                                                                                                                                                      WHERE c.global_slot_since_genesis >= $2                                                                                                                                                                                                 |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~state_hash ~start_slot =
+  let run (module Conn : Mina_caqti.CONNECTION) ~state_hash ~start_slot =
     Conn.collect_list query (state_hash, start_slot)
 end
 
@@ -71,57 +71,57 @@ let find_command_ids_query s =
 
 module Block = struct
   let state_hash_query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks
             WHERE id = ?
       |sql}
 
-  let get_state_hash (module Conn : Caqti_async.CONNECTION) id =
+  let get_state_hash (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find state_hash_query id
 
   let parent_id_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT parent_id FROM blocks
             WHERE id = ?
       |sql}
 
-  let get_parent_id (module Conn : Caqti_async.CONNECTION) id =
+  let get_parent_id (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find parent_id_query id
 
   let unparented_query =
-    Caqti_request.collect Caqti_type.unit Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.unit Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE parent_id IS NULL
       |sql}
 
-  let get_unparented (module Conn : Caqti_async.CONNECTION) () =
+  let get_unparented (module Conn : Mina_caqti.CONNECTION) () =
     Conn.collect_list unparented_query ()
 
   let get_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int64
       {sql| SELECT height FROM blocks WHERE id = $1 |sql}
 
-  let get_height (module Conn : Caqti_async.CONNECTION) ~block_id =
+  let get_height (module Conn : Mina_caqti.CONNECTION) ~block_id =
     Conn.find get_height_query block_id
 
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks |sql}
 
-  let get_max_slot (module Conn : Caqti_async.CONNECTION) () =
+  let get_max_slot (module Conn : Mina_caqti.CONNECTION) () =
     Conn.find max_slot_query ()
 
   let max_canonical_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
 
-  let get_max_canonical_slot (module Conn : Caqti_async.CONNECTION) () =
+  let get_max_canonical_slot (module Conn : Mina_caqti.CONNECTION) () =
     Conn.find max_canonical_slot_query ()
 
   let next_slot_query =
-    Caqti_request.find_opt Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_opt_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT global_slot_since_genesis FROM blocks
             WHERE global_slot_since_genesis >= $1
             AND chain_status <> 'orphaned'
@@ -129,19 +129,19 @@ module Block = struct
             LIMIT 1
       |sql}
 
-  let get_next_slot (module Conn : Caqti_async.CONNECTION) slot =
+  let get_next_slot (module Conn : Mina_caqti.CONNECTION) slot =
     Conn.find_opt next_slot_query slot
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int64 Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int64 Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot_since_genesis = $1 |sql}
 
-  let get_state_hashes_by_slot (module Conn : Caqti_async.CONNECTION) slot =
+  let get_state_hashes_by_slot (module Conn : Mina_caqti.CONNECTION) slot =
     Conn.collect_list state_hashes_by_slot_query slot
 
   (* find all blocks, working back from block with given state hash *)
   let chain_query =
-    Caqti_request.collect Caqti_type.string Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.string Caqti_type.string
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id FROM blocks b WHERE b.state_hash = ?
@@ -159,7 +159,7 @@ module Block = struct
 
       |sql}
 
-  let get_chain (module Conn : Caqti_async.CONNECTION) state_hash =
+  let get_chain (module Conn : Mina_caqti.CONNECTION) state_hash =
     Conn.collect_list chain_query state_hash
 
   (* either the bonafide genesis block, or the most recent "linking" block
@@ -171,7 +171,7 @@ module Block = struct
       let pk, _ = Mina_state.Consensus_state_hooks.genesis_winner in
       Signature_lib.Public_key.Compressed.to_base58_check pk
     in
-    Caqti_request.find Caqti_type.int64 Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.string
       (sprintf
          {sql| SELECT snarked_ledger_hashes.value
                FROM blocks
@@ -186,18 +186,18 @@ module Block = struct
          |sql}
          genesis_winner )
 
-  let genesis_snarked_ledger (module Conn : Caqti_async.CONNECTION) start_slot =
+  let genesis_snarked_ledger (module Conn : Mina_caqti.CONNECTION) start_slot =
     Conn.find genesis_snarked_ledger_query start_slot
 end
 
 module User_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "user")
 
-  let run (module Conn : Caqti_async.CONNECTION) ~state_hash ~start_slot =
+  let run (module Conn : Mina_caqti.CONNECTION) ~state_hash ~start_slot =
     Conn.collect_list query (state_hash, start_slot)
 end
 
@@ -240,7 +240,7 @@ module User_command = struct
         ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT command_type,fee_payer_id, source_id,receiver_id,fee,amount,valid_until,memo,nonce,
                    blocks.id,blocks.height,blocks.global_slot_since_genesis,
                    sequence_no,status
@@ -259,18 +259,18 @@ module User_command = struct
 
        |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) user_cmd_id =
+  let run (module Conn : Mina_caqti.CONNECTION) user_cmd_id =
     Conn.collect_list query user_cmd_id
 end
 
 module Zkapp_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "zkapp")
 
-  let run (module Conn : Caqti_async.CONNECTION) ~state_hash ~start_slot =
+  let run (module Conn : Mina_caqti.CONNECTION) ~state_hash ~start_slot =
     Conn.collect_list query (state_hash, start_slot)
 end
 
@@ -292,7 +292,7 @@ module Zkapp_command = struct
         [ int; Mina_caqti.array_int_typ; string; int; int64; int; string ]
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT zkapp_fee_payer_body_id,zkapp_account_updates_ids,memo,
                    blocks.id,blocks.global_slot_since_genesis,
                    sequence_no,hash
@@ -311,18 +311,18 @@ module Zkapp_command = struct
 
        |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) zkapp_cmd_id =
+  let run (module Conn : Mina_caqti.CONNECTION) zkapp_cmd_id =
     Conn.collect_list query zkapp_cmd_id
 end
 
 module Internal_command_ids = struct
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       Caqti_type.int
       (find_command_ids_query "internal")
 
-  let run (module Conn : Caqti_async.CONNECTION) ~state_hash ~start_slot =
+  let run (module Conn : Mina_caqti.CONNECTION) ~state_hash ~start_slot =
     Conn.collect_list query (state_hash, start_slot)
 end
 
@@ -347,8 +347,8 @@ module Internal_command = struct
      the call to Staged_ledger.apply in Block_producer
   *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 int64 int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int64 int)
       typ
       {sql| SELECT command_type,receiver_id,fee,
                    b.id,b.height,b.global_slot_since_genesis,
@@ -371,29 +371,29 @@ module Internal_command = struct
             WHERE b.global_slot_since_genesis >= $1
        |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) ~start_slot ~internal_cmd_id =
+  let run (module Conn : Mina_caqti.CONNECTION) ~start_slot ~internal_cmd_id =
     Conn.collect_list query (start_slot, internal_cmd_id)
 end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_opt_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) pk_id =
+  let run (module Conn : Mina_caqti.CONNECTION) pk_id =
     Conn.find_opt query pk_id
 end
 
 module Snarked_ledger_hashes = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM snarked_ledger_hashes
             WHERE id = ?
       |sql}
 
-  let run (module Conn : Caqti_async.CONNECTION) id = Conn.find query id
+  let run (module Conn : Mina_caqti.CONNECTION) id = Conn.find query id
 end
 
 module Epoch_data = struct
@@ -404,11 +404,11 @@ module Epoch_data = struct
     let decode (epoch_ledger_hash, epoch_data_seed) =
       Ok { epoch_ledger_hash; epoch_data_seed }
     in
-    let rep = Caqti_type.(tup2 string string) in
+    let rep = Caqti_type.(t2 string string) in
     Caqti_type.custom ~encode ~decode rep
 
   let query_epoch_data =
-    Caqti_request.find Caqti_type.int epoch_data_typ
+    Mina_caqti.find_req Caqti_type.int epoch_data_typ
       {sql| SELECT slh.value, ed.seed FROM snarked_ledger_hashes AS slh
 
        INNER JOIN
@@ -421,36 +421,36 @@ module Epoch_data = struct
 
       |sql}
 
-  let get_epoch_data (module Conn : Caqti_async.CONNECTION) epoch_ledger_id =
+  let get_epoch_data (module Conn : Mina_caqti.CONNECTION) epoch_ledger_id =
     Conn.find query_epoch_data epoch_ledger_id
 
   let query_staking_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT staking_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
 
       |sql}
 
-  let get_staking_epoch_data_id (module Conn : Caqti_async.CONNECTION)
-      state_hash =
+  let get_staking_epoch_data_id (module Conn : Mina_caqti.CONNECTION) state_hash
+      =
     Conn.find query_staking_epoch_data_id state_hash
 
   let query_next_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT next_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
       |sql}
 
-  let get_next_epoch_data_id (module Conn : Caqti_async.CONNECTION) state_hash =
+  let get_next_epoch_data_id (module Conn : Mina_caqti.CONNECTION) state_hash =
     Conn.find query_next_epoch_data_id state_hash
 end
 
 module Parent_block = struct
   (* fork block is parent of block with the given state hash *)
   let query_parent_state_hash =
-    Caqti_request.find Caqti_type.string Caqti_type.string
+    Mina_caqti.find_req Caqti_type.string Caqti_type.string
       {sql| SELECT parent.state_hash FROM blocks AS parent
 
             INNER JOIN
@@ -460,7 +460,7 @@ module Parent_block = struct
             ON epoch_ledgers_block.parent_id = parent.id
       |sql}
 
-  let get_parent_state_hash (module Conn : Caqti_async.CONNECTION)
+  let get_parent_state_hash (module Conn : Mina_caqti.CONNECTION)
       epoch_ledgers_state_hash =
     Conn.find query_parent_state_hash epoch_ledgers_state_hash
 end
diff --git a/src/app/rosetta/lib/account.ml b/src/app/rosetta/lib/account.ml
index acfd8bfcba..81599bbef6 100644
--- a/src/app/rosetta/lib/account.ml
+++ b/src/app/rosetta/lib/account.ml
@@ -36,9 +36,9 @@ module Sql = struct
           .transaction_capacity_log_2
 
     let query_pending =
-      Caqti_request.find_opt
-        Caqti_type.(tup3 string int64 string)
-        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t3 string int64 string)
+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
         {sql|
   WITH RECURSIVE pending_chain AS (
 
@@ -87,9 +87,9 @@ module Sql = struct
 |sql}
 
     let query_canonical =
-      Caqti_request.find_opt
-        Caqti_type.(tup3 string int64 string)
-        Caqti_type.(tup2 (tup4 int64 int64 int64 int64) int)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t3 string int64 string)
+        Caqti_type.(t2 (t4 int64 int64 int64 int64) int)
         {sql|
                 SELECT b.height,b.global_slot_since_genesis AS block_global_slot_since_genesis,balance,nonce,timing_id
 
@@ -108,7 +108,7 @@ module Sql = struct
                 LIMIT 1
 |sql}
 
-    let run (module Conn : Caqti_async.CONNECTION) ~requested_block_height
+    let run (module Conn : Mina_caqti.CONNECTION) ~requested_block_height
         ~address ~token_id =
       let open Deferred.Result.Let_syntax in
       let%bind has_canonical_height =
@@ -143,7 +143,7 @@ module Sql = struct
       ~cliff_time ~cliff_amount ~vesting_period ~vesting_increment
       ~initial_minimum_balance
 
-  let find_current_balance (module Conn : Caqti_async.CONNECTION)
+  let find_current_balance (module Conn : Mina_caqti.CONNECTION)
       ~requested_block_global_slot_since_genesis ~last_relevant_command_info
       ?timing_id () =
     let open Deferred.Result.Let_syntax in
@@ -198,7 +198,7 @@ module Sql = struct
     let balance_info : Balance_info.t = { liquid_balance; total_balance } in
     Deferred.Result.return (balance_info, nonce)
 
-  let run (module Conn : Caqti_async.CONNECTION) ~block_query
+  let run (module Conn : Mina_caqti.CONNECTION) ~block_query
       ~address ~token_id =
     let open Deferred.Result.Let_syntax in
     (* First find the block referenced by the block identifier. Then
@@ -298,7 +298,7 @@ module Balance = struct
       ; db_block_identifier_and_balance_info =
           (fun ~block_query ~address ~token_id ->
             with_db (fun ~db ->
-                let (module Conn : Caqti_async.CONNECTION) = db in
+                let (module Conn : Mina_caqti.CONNECTION) = db in
                 Sql.run
                   (module Conn)
                   ~block_query ~address ~token_id
diff --git a/src/app/rosetta/lib/block.ml b/src/app/rosetta/lib/block.ml
index 4c1a06ecaa..4cd284ce54 100644
--- a/src/app/rosetta/lib/block.ml
+++ b/src/app/rosetta/lib/block.ml
@@ -390,10 +390,10 @@ module Sql = struct
 
       let winner (_, winner) = `Pk winner
 
-      let typ = Caqti_type.(tup2 string string)
+      let typ = Caqti_type.(t2 string string)
     end
 
-    let typ = Caqti_type.(tup3 int Archive_lib.Processor.Block.typ Extras.typ)
+    let typ = Caqti_type.(t3 int Archive_lib.Processor.Block.typ Extras.typ)
 
     let block_fields ?prefix () =
       let names = Archive_lib.Processor.Block.Fields.names in
@@ -404,7 +404,7 @@ module Sql = struct
       String.concat ~sep:"," fields
 
     let query_count_canonical_at_height =
-      Caqti_request.find Caqti_type.int64 Caqti_type.int64
+      Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
         {sql| SELECT COUNT(*) FROM blocks
               WHERE height = ?
               AND chain_status = 'canonical'
@@ -412,7 +412,7 @@ module Sql = struct
 
     let query_height_canonical =
       let c_fields = block_fields ~prefix:"c." () in
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_opt_req Caqti_type.int64 typ
         (* The archive database will only reconcile the canonical columns for
          * blocks older than k + epsilon
          *)
@@ -436,7 +436,7 @@ module Sql = struct
       let fields = block_fields () in
       let b_fields = block_fields ~prefix:"b." () in
       let c_fields = block_fields ~prefix:"c." () in
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_opt_req Caqti_type.int64 typ
         (* According to the clarification of the Rosetta spec here
          * https://community.rosetta-api.org/t/querying-block-by-just-its-index/84/3 ,
          * it is important to select only the block on the canonical chain for a
@@ -482,9 +482,9 @@ module Sql = struct
 
     let query_hash =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.string typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.string typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -500,8 +500,8 @@ module Sql = struct
 
     let query_both =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
+      Mina_caqti.find_opt_req
+        Caqti_type.(t2 string int64)
         typ
         (sprintf
            {|
@@ -521,9 +521,9 @@ module Sql = struct
 
     let query_by_id =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.int typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.int typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -539,9 +539,9 @@ module Sql = struct
 
     let query_best =
       let b_fields = block_fields ~prefix:"b." () in
-      Caqti_request.find_opt Caqti_type.unit typ
-        (sprintf
-           {|
+      Mina_caqti.find_opt_req Caqti_type.unit typ
+      (sprintf
+        {|
          SELECT b.id,
                 %s,
                 pk.value as creator,
@@ -557,10 +557,10 @@ module Sql = struct
         |}
            b_fields )
 
-    let run_by_id (module Conn : Caqti_async.CONNECTION) id =
+    let run_by_id (module Conn : Mina_caqti.CONNECTION) id =
       Conn.find_opt query_by_id id
 
-    let run_has_canonical_height (module Conn : Caqti_async.CONNECTION) ~height
+    let run_has_canonical_height (module Conn : Mina_caqti.CONNECTION) ~height
         =
       let open Deferred.Result.Let_syntax in
       let%map num_canonical_at_height =
@@ -568,7 +568,7 @@ module Sql = struct
       in
       Int64.( > ) num_canonical_at_height Int64.zero
 
-    let run (module Conn : Caqti_async.CONNECTION) = function
+    let run (module Conn : Mina_caqti.CONNECTION) = function
       | Some (`This (`Height h)) ->
           let open Deferred.Result.Let_syntax in
           let%bind has_canonical_height =
@@ -578,7 +578,7 @@ module Sql = struct
           else
             let%bind max_height =
               Conn.find
-                (Caqti_request.find Caqti_type.unit Caqti_type.int64
+                (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
                    {sql| SELECT MAX(height) FROM blocks |sql} )
                 ()
             in
@@ -635,21 +635,16 @@ module Sql = struct
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.User_command.Signed_command.typ
+        t3 int Archive_lib.Processor.User_command.Signed_command.typ
           Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "u." ^ n)
-             Archive_lib.Processor.User_command.Signed_command.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup2 int string)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "u." ^ n)
+          Archive_lib.Processor.User_command.Signed_command.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
+      (sprintf
+        {|
          SELECT u.id,
                 %s,
                 pk_payer.value as fee_payer,
@@ -698,7 +693,7 @@ module Sql = struct
         |}
            fields )
 
-    let run (module Conn : Caqti_async.CONNECTION) id =
+    let run (module Conn : Mina_caqti.CONNECTION) id =
       Conn.collect_list query (id, Mina_base.Token_id.(to_string default))
   end
 
@@ -712,25 +707,20 @@ module Sql = struct
 
       let secondary_sequence_no (_, _, _, secondary_seq_no) = secondary_seq_no
 
-      let typ = Caqti_type.(tup4 (option int64) string int int)
+      let typ = Caqti_type.(t4 (option int64) string int int)
     end
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
+        t3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "i." ^ n)
-             Archive_lib.Processor.Internal_command.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup2 int string)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "i." ^ n)
+          Archive_lib.Processor.Internal_command.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t2 int string) typ
+      (sprintf
+        {|
          SELECT DISTINCT ON (i.hash,i.command_type,bic.sequence_no,bic.secondary_sequence_no)
            i.id,
            %s,
@@ -771,7 +761,7 @@ module Sql = struct
       |}
            fields )
 
-    let run (module Conn : Caqti_async.CONNECTION) id =
+    let run (module Conn : Mina_caqti.CONNECTION) id =
       Conn.collect_list query (id, Mina_base.Token_id.(to_string default))
   end
 
@@ -813,10 +803,10 @@ module Sql = struct
             ]
     end
 
-    let typ = Caqti_type.(tup2 int Extras.typ)
+    let typ = Caqti_type.(t2 int Extras.typ)
 
     let query =
-      Caqti_request.collect Caqti_type.int typ
+      Mina_caqti.collect_req Caqti_type.int typ
         {| 
          SELECT zc.id,
                 zc.memo,
@@ -840,7 +830,7 @@ module Sql = struct
          WHERE bzc.block_id = ?
       |}
 
-    let run (module Conn : Caqti_async.CONNECTION) id =
+    let run (module Conn : Mina_caqti.CONNECTION) id =
       Conn.collect_list query id
   end
 
@@ -857,20 +847,15 @@ module Sql = struct
 
     let typ =
       Caqti_type.(
-        tup2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
+        t2 Archive_lib.Processor.Zkapp_account_update_body.typ Extras.typ)
 
     let query =
       let fields =
-        String.concat ~sep:","
-        @@ List.map
-             ~f:(fun n -> "zaub." ^ n)
-             Archive_lib.Processor.Zkapp_account_update_body.Fields.names
-      in
-      Caqti_request.collect
-        Caqti_type.(tup3 int string int)
-        typ
-        (sprintf
-           {|
+        String.concat ~sep:"," @@ List.map ~f:(fun n -> "zaub." ^ n)
+          Archive_lib.Processor.Zkapp_account_update_body.Fields.names in
+      Mina_caqti.collect_req Caqti_type.(t3 int string int) typ
+      (sprintf
+        {|
          SELECT %s,
                 pk.value as account,
                 bzc.status
@@ -893,12 +878,12 @@ module Sql = struct
     |}
            fields )
 
-    let run (module Conn : Caqti_async.CONNECTION) command_id block_id =
+    let run (module Conn : Mina_caqti.CONNECTION) command_id block_id =
       Conn.collect_list query
         (command_id, Mina_base.Token_id.(to_string default), block_id)
   end
 
-  let run (module Conn : Caqti_async.CONNECTION) input =
+  let run (module Conn : Mina_caqti.CONNECTION) input =
     let module M = struct
       include Deferred.Result
 
@@ -1131,12 +1116,12 @@ module Specific = struct
     module Mock = T (Result)
 
     let real :
-        logger:Logger.t -> db:(module Caqti_async.CONNECTION) -> 'gql Real.t =
+        logger:Logger.t -> db:(module Mina_caqti.CONNECTION) -> 'gql Real.t =
      fun ~logger ~db ->
       { logger
       ; db_block =
           (fun query ->
-            let (module Conn : Caqti_async.CONNECTION) = db in
+            let (module Conn : Mina_caqti.CONNECTION) = db in
             Sql.run (module Conn) query )
       ; validate_network_choice = Network.Validate_choice.Real.validate
       }
diff --git a/src/app/rosetta/lib/construction.ml b/src/app/rosetta/lib/construction.ml
index 90297f8b17..318bc7ff7a 100644
--- a/src/app/rosetta/lib/construction.ml
+++ b/src/app/rosetta/lib/construction.ml
@@ -866,7 +866,9 @@ module Submit = struct
         Caqti_type.custom ~encode ~decode (to_rep spec)
 
       let query =
-        Caqti_request.find_opt params_typ Caqti_type.string
+        Mina_caqti.find_opt_req
+          params_typ
+          Caqti_type.string
           {sql| SELECT uc.id FROM user_commands uc
                 INNER JOIN public_keys AS pks ON pks.id = uc.source_id
                 INNER JOIN public_keys AS pkr ON pkr.id = uc.receiver_id
@@ -876,7 +878,7 @@ module Submit = struct
                 AND uc.amount = $4
                 AND uc.fee = $5 |sql}
 
-      let run (module Conn : Caqti_async.CONNECTION) ~nonce ~source ~receiver
+      let run (module Conn : Mina_caqti.CONNECTION) ~nonce ~source ~receiver
           ~amount ~fee =
         let open Unsigned_extended in
         Conn.find_opt query
@@ -924,7 +926,7 @@ module Submit = struct
     module Mock = T (Result)
 
     let real :
-           db:(module Caqti_async.CONNECTION)
+           db:(module Mina_caqti.CONNECTION)
         -> graphql_uri:Uri.t
         -> ( 'gql_payment
            , 'gql_delegation
diff --git a/src/app/rosetta/lib/network.ml b/src/app/rosetta/lib/network.ml
index 420d3569ac..65abac7842 100644
--- a/src/app/rosetta/lib/network.ml
+++ b/src/app/rosetta/lib/network.ml
@@ -75,10 +75,9 @@ end
 
 module Sql = struct
   let oldest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup2 int64 string)
-      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, \
-       state_hash ASC LIMIT 1"
+    Mina_caqti.find_req Caqti_type.unit
+      Caqti_type.(t2 int64 string)
+      "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, state_hash ASC LIMIT 1"
 
   let max_height_delta =
     match Sys.getenv "MINA_ROSETTA_MAX_HEIGHT_DELTA" with
@@ -88,10 +87,10 @@ module Sql = struct
         0L
 
   let latest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup3 int64 string int64)
-      (sprintf
-         {sql| SELECT height, state_hash, timestamp FROM blocks b
+    Mina_caqti.find_req
+      Caqti_type.unit
+      Caqti_type.(t3 int64 string int64)
+      (sprintf {sql| SELECT height, state_hash, timestamp FROM blocks b
                      WHERE height = (select MAX(height) - %Ld FROM blocks)
                      ORDER BY timestamp ASC, state_hash ASC
                      LIMIT 1
@@ -218,9 +217,9 @@ module Status = struct
     let oldest_block_ref = ref None
 
     let real :
-        db:(module Caqti_async.CONNECTION) -> graphql_uri:Uri.t -> 'gql Real.t =
+        db:(module Mina_caqti.CONNECTION) -> graphql_uri:Uri.t -> 'gql Real.t =
      fun ~db ~graphql_uri ->
-      let (module Db : Caqti_async.CONNECTION) = db in
+      let (module Db : Mina_caqti.CONNECTION) = db in
       { gql = Get_status_t.query ~graphql_uri
       ; db_oldest_block =
           (fun () ->
diff --git a/src/app/rosetta/lib/pg_data.ml b/src/app/rosetta/lib/pg_data.ml
index 15065b1fa3..1dda81f8e9 100644
--- a/src/app/rosetta/lib/pg_data.ml
+++ b/src/app/rosetta/lib/pg_data.ml
@@ -1,19 +1,19 @@
 (* pg_data.ml -- Postgres data *)
 
 let query_connection_count =
-  Caqti_request.find Caqti_type.unit Caqti_type.int64
+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
     {sql| SELECT count(*) FROM pg_stat_activity
               WHERE state = 'active'
         |sql}
 
-let run_connection_count (module Conn : Caqti_async.CONNECTION) =
+let run_connection_count (module Conn : Mina_caqti.CONNECTION) =
   Conn.find query_connection_count
 
 let query_lock_count =
-  Caqti_request.find Caqti_type.unit Caqti_type.int64
+  Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
     {sql| SELECT count(*) FROM pg_locks
               WHERE mode = 'SIReadLock'
         |sql}
 
-let run_lock_count (module Conn : Caqti_async.CONNECTION) =
+let run_lock_count (module Conn : Mina_caqti.CONNECTION) =
   Conn.find query_lock_count
diff --git a/src/app/rosetta/lib/rosetta.ml b/src/app/rosetta/lib/rosetta.ml
index c1e675b34a..c1b616a71e 100644
--- a/src/app/rosetta/lib/rosetta.ml
+++ b/src/app/rosetta/lib/rosetta.ml
@@ -4,7 +4,7 @@ open Rosetta_lib
 
 let router ~graphql_uri
     ~(pool :
-       ( (Caqti_async.connection, [> Caqti_error.connect ]) Caqti_async.Pool.t
+       ( (Caqti_async.connection, [> Caqti_error.connect ]) Mina_caqti.Pool.t
        , [ `App of Errors.t ] )
        Deferred.Result.t
        lazy_t ) ~logger route body =
@@ -18,7 +18,7 @@ let router ~graphql_uri
   in
   let with_db f =
     let%bind pool = Lazy.force pool in
-    Caqti_async.Pool.use (fun db -> f ~db) pool
+    Mina_caqti.Pool.use (fun db -> f ~db) pool
     |> Deferred.Result.map_error ~f:(function
          | `App e ->
              `App e
@@ -62,7 +62,7 @@ let pg_log_data ~logger ~pool : unit Deferred.t =
   match%bind Lazy.force pool with
   | Ok pool ->
       let get_logs () : (unit, _) Deferred.Result.t =
-        Caqti_async.Pool.use
+        Mina_caqti.Pool.use
           (fun db ->
             let open Deferred.Result.Let_syntax in
             let%bind num_conns = Pg_data.run_connection_count db () in
@@ -187,7 +187,7 @@ let command =
               "MINA_ROSETTA_MAX_DB_POOL_SIZE not set or invalid. Please set \
                this to a number (try 64 or 128)"
         in
-        match Caqti_async.connect_pool ~max_size:max_pool_size archive_uri with
+        match Mina_caqti.connect_pool ~max_size:max_pool_size archive_uri with
         | Error e ->
             [%log error]
               ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/swap_bad_balances/sql.ml b/src/app/swap_bad_balances/sql.ml
index 82ec136a10..bd85672b7e 100644
--- a/src/app/swap_bad_balances/sql.ml
+++ b/src/app/swap_bad_balances/sql.ml
@@ -5,8 +5,8 @@ open Async
 module Receiver_balances = struct
   (* find receiver balances for combined fee transfer *)
   let query_ids_from_fee_transfer =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int)
       Caqti_type.(int)
       {sql| SELECT bic.receiver_balance
             FROM blocks_internal_commands bic
@@ -15,18 +15,17 @@ module Receiver_balances = struct
             WHERE b.state_hash = $1 AND bic.sequence_no = $2
       |sql}
 
-  let run_ids_from_fee_transfer (module Conn : Caqti_async.CONNECTION)
-      state_hash seq_no =
+  let run_ids_from_fee_transfer (module Conn : Mina_caqti.CONNECTION) state_hash
+      seq_no =
     Conn.collect_list query_ids_from_fee_transfer (state_hash, seq_no)
 
-  let add_if_doesn't_exist (module Conn : Caqti_async.CONNECTION) (pk, balance)
-      =
+  let add_if_doesn't_exist (module Conn : Mina_caqti.CONNECTION) (pk, balance) =
     let open Deferred.Result.Let_syntax in
     (* if duplicates, any is acceptable *)
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup2 int int64)
+        (Mina_caqti.find_opt_req
+           Caqti_type.(t2 int int64)
            Caqti_type.int
            {sql| SELECT id
                           FROM balances
@@ -40,18 +39,18 @@ module Receiver_balances = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find
-             Caqti_type.(tup2 int int64)
+          (Mina_caqti.find_req
+             Caqti_type.(t2 int int64)
              Caqti_type.int
              "INSERT INTO balances (public_key_id,balance) VALUES ($1,$2) \
               RETURNING id" )
           (pk, balance)
 
-  let load (module Conn : Caqti_async.CONNECTION) id =
+  let load (module Conn : Mina_caqti.CONNECTION) id =
     Conn.find
-      (Caqti_request.find
+      (Mina_caqti.find_req
          Caqti_type.(int)
-         Caqti_type.(tup2 int int64)
+         Caqti_type.(t2 int int64)
          {sql| SELECT public_key_id,balance
             FROM balances
             WHERE id = $1
@@ -59,8 +58,8 @@ module Receiver_balances = struct
       id
 
   let query_swap_in_new_balance =
-    Caqti_request.exec
-      Caqti_type.(tup4 string int int int)
+    Mina_caqti.exec_req
+      Caqti_type.(t4 string int int int)
       {sql| UPDATE blocks_internal_commands bic SET receiver_balance = $4
             FROM blocks b
             WHERE b.id = bic.block_id
@@ -69,7 +68,7 @@ module Receiver_balances = struct
             AND bic.receiver_balance = $3
       |sql}
 
-  let swap_in_new_balance (module Conn : Caqti_async.CONNECTION) state_hash
+  let swap_in_new_balance (module Conn : Mina_caqti.CONNECTION) state_hash
       seq_no old_balance_id new_balance_id =
     Conn.exec query_swap_in_new_balance
       (state_hash, seq_no, old_balance_id, new_balance_id)
diff --git a/src/app/swap_bad_balances/swap_bad_balances.ml b/src/app/swap_bad_balances/swap_bad_balances.ml
index a01bb86938..5ff0d88e9f 100644
--- a/src/app/swap_bad_balances/swap_bad_balances.ml
+++ b/src/app/swap_bad_balances/swap_bad_balances.ml
@@ -4,7 +4,7 @@ open Core_kernel
 open Async
 
 let query_db pool ~f ~item =
-  match%bind Caqti_async.Pool.use f pool with
+  match%bind Mina_caqti.Pool.use f pool with
   | Ok v ->
       return v
   | Error msg ->
@@ -14,7 +14,7 @@ let query_db pool ~f ~item =
 let main ~archive_uri ~state_hash ~sequence_no () =
   let archive_uri = Uri.of_string archive_uri in
   let logger = Logger.create () in
-  match Caqti_async.connect_pool archive_uri with
+  match Mina_caqti.connect_pool archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/lib/genesis_ledger_helper/genesis_ledger_helper.ml b/src/lib/genesis_ledger_helper/genesis_ledger_helper.ml
index 20b64dcbf1..667689fc29 100644
--- a/src/lib/genesis_ledger_helper/genesis_ledger_helper.ml
+++ b/src/lib/genesis_ledger_helper/genesis_ledger_helper.ml
@@ -75,10 +75,10 @@ let assert_filehash_equal ~file ~hash ~logger =
   else
     let%map () = Unix.rename ~src:file ~dst:(file ^ ".incorrect-hash") in
     [%log error]
-      "Verification failure: downloaded $file and expected SHA3-256 = $hash \
-       but it had $computed_hash"
+      "Verification failure: downloaded $file and expected SHA3-256 = \
+       $expected_hash but it had $computed_hash"
       ~metadata:
-        [ ("path", `String file)
+        [ ("file", `String file)
         ; ("expected_hash", `String hash)
         ; ("computed_hash", `String computed_hash)
         ] ;
diff --git a/src/lib/mina_caqti/mina_caqti.ml b/src/lib/mina_caqti/mina_caqti.ml
index b1e49d9bcb..d70a04fcba 100644
--- a/src/lib/mina_caqti/mina_caqti.ml
+++ b/src/lib/mina_caqti/mina_caqti.ml
@@ -2,17 +2,67 @@
 
 open Async
 open Core_kernel
-open Caqti_async
 open Mina_base
 
-type _ Caqti_type.field +=
-  | Array_nullable_int : int option array Caqti_type.field
+let find_req t u s = Caqti_request.Infix.(t ->! u) s
 
-type _ Caqti_type.field +=
-  | Array_nullable_int64 : int64 option array Caqti_type.field
+let find_opt_req t u s = Caqti_request.Infix.(t ->? u) s
 
-type _ Caqti_type.field +=
-  | Array_nullable_string : string option array Caqti_type.field
+let collect_req t u s = Caqti_request.Infix.(t ->* u) s
+
+let exec_req t s = Caqti_request.Infix.(t ->. Caqti_type.unit) s
+
+module type CONNECTION = sig
+  include Caqti_async.CONNECTION
+
+  (** Code expects any queries to differing sources to never interfere. *)
+  val source : Uri.t
+end
+
+module Wrap
+    (Conn : Caqti_async.CONNECTION) (Arg : sig
+      val source : Uri.t
+    end) : CONNECTION = struct
+  include Conn
+  include Arg
+end
+
+let wrap_conn (module Conn : Caqti_async.CONNECTION) ~source =
+  let module Conn =
+    Wrap
+      (Conn)
+      (struct
+        let source = source
+      end)
+  in
+  (module Conn : CONNECTION)
+
+module Pool = struct
+  type ('a, 'e) t = { source : Uri.t; pool : ('a, 'e) Caqti_async.Pool.t }
+
+  let wrap ~source pool = { source; pool }
+
+  let use (f : (module CONNECTION) -> 'a) pool =
+    Caqti_async.Pool.use
+      (fun (module Conn : Caqti_async.CONNECTION) ->
+        f (wrap_conn (module Conn) ~source:pool.source) )
+      pool.pool
+end
+
+let connect_pool ?max_size uri =
+  let size = max_size in
+  let%map.Result pool =
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ?max_size:size ()))
+      uri
+  in
+  Pool.wrap ~source:uri pool
+
+let connect uri =
+  let%map.Deferred.Result conn = Caqti_async.connect uri in
+  wrap_conn ~source:uri conn
 
 module Type_spec = struct
   type (_, _) t =
@@ -25,7 +75,7 @@ module Type_spec = struct
      | [] ->
          (Caqti_type.unit : tuple Caqti_type.t)
      | rep :: spec ->
-         Caqti_type.tup2 rep (to_rep spec)
+         Caqti_type.t2 rep (to_rep spec)
 
   let rec hlist_to_tuple :
             'hlist 'tuple.
@@ -93,59 +143,14 @@ let make_coding (type a) ~(elem_to_string : a -> string)
   in
   (encode, decode)
 
-(* register coding for nullable int arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
+(** this type may require type annotations in queries, eg.
+   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
+*)
+let array_nullable_int_typ =
   let encode, decode =
     make_coding ~elem_to_string:Int.to_string ~elem_of_string:Int.of_string
   in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_int ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_int { get_coding }
-
-(* register coding for nullable int64 arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
-  let encode, decode =
-    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
-  in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_int64 ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_int64 { get_coding }
-
-(* register coding for nullable string arrays *)
-let () =
-  let open Caqti_type.Field in
-  let rep = Caqti_type.String in
-  let encode, decode =
-    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
-  in
-  let get_coding : type a. _ -> a t -> a coding =
-   fun _ -> function
-    | Array_nullable_string ->
-        Coding { rep; encode; decode }
-    | _ ->
-        assert false
-  in
-  define_coding Array_nullable_string { get_coding }
-
-(* this type may require type annotations in queries, eg.
-   `SELECT id FROM zkapp_states WHERE element_ids = ?::int[]`
-*)
-let array_nullable_int_typ : int option array Caqti_type.t =
-  Caqti_type.field Array_nullable_int
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_int_typ : int array Caqti_type.t =
   let open Result.Let_syntax in
@@ -158,11 +163,14 @@ let array_int_typ : int array Caqti_type.t =
   in
   Caqti_type.custom array_nullable_int_typ ~encode ~decode
 
-(* this type may require type annotations in queries, eg.
+(** this type may require type annotations in queries, eg.
    `SELECT id FROM zkapp_states WHERE element_ids = ?::bigint[]`
 *)
-let array_nullable_int64_typ : int64 option array Caqti_type.t =
-  Caqti_type.field Array_nullable_int64
+let array_nullable_int64_typ =
+  let encode, decode =
+    make_coding ~elem_to_string:Int64.to_string ~elem_of_string:Int64.of_string
+  in
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_int64_typ : int64 array Caqti_type.t =
   let open Result.Let_syntax in
@@ -175,11 +183,14 @@ let array_int64_typ : int64 array Caqti_type.t =
   in
   Caqti_type.custom array_nullable_int64_typ ~encode ~decode
 
-(* this type may require type annotations in queries, e.g.
+(** this type may require type annotations in queries, e.g.
    `SELECT id FROM zkapp_states WHERE element_ids = ?::string[]`
 *)
-let array_nullable_string_typ : string option array Caqti_type.t =
-  Caqti_type.field Array_nullable_string
+let array_nullable_string_typ =
+  let encode, decode =
+    make_coding ~elem_to_string:Fn.id ~elem_of_string:Fn.id
+  in
+  Caqti_type.custom ~encode ~decode Caqti_type.string
 
 let array_string_typ : string array Caqti_type.t =
   let open Result.Let_syntax in
@@ -278,12 +289,24 @@ let insert_into_cols ~(returning : string) ~(table_name : string)
     (String.concat ~sep:", " cols)
     values returning
 
+let insert_assuming_new ~(select : string * 'select Caqti_type.t)
+    ~(table_name : string) ?tannot ~(cols : string list * 'cols Caqti_type.t)
+    (module Conn : CONNECTION) (value : 'cols) =
+  Conn.find
+    ( find_req (snd cols) (snd select)
+    @@ insert_into_cols ~returning:(fst select) ~table_name ?tannot
+         ~cols:(fst cols) () )
+    value
+
+(* run `select_cols` and return the result, if found
+   if not found, run `insert_into_cols` and return the result
+*)
 let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
     ~(table_name : string) ?tannot ~(cols : string list * 'cols Caqti_type.t)
     (module Conn : CONNECTION) (value : 'cols) =
   let open Deferred.Result.Let_syntax in
   Conn.find_opt
-    ( Caqti_request.find_opt (snd cols) (snd select)
+    ( Caqti_request.Infix.(snd cols ->? snd select)
     @@ select_cols ~select:(fst select) ~table_name ?tannot ~cols:(fst cols) ()
     )
     value
@@ -292,7 +315,7 @@ let select_insert_into_cols ~(select : string * 'select Caqti_type.t)
       return id
   | None ->
       Conn.find
-        ( Caqti_request.find (snd cols) (snd select)
+        ( Caqti_request.Infix.(snd cols ->! snd select)
         @@ insert_into_cols ~returning:(fst select) ~table_name ?tannot
              ~cols:(fst cols) () )
         value
@@ -314,7 +337,11 @@ let insert_multi_into_col ~(table_name : string)
       (sep_by_comma ~parenthesis:true values)
       (fst col)
   in
-  let%bind () = Conn.exec (Caqti_request.exec Caqti_type.unit insert) () in
+  let%bind () =
+    Conn.exec
+      (Caqti_request.Infix.(Caqti_type.unit ->. Caqti_type.unit) insert)
+      ()
+  in
   let search =
     sprintf
       {sql| SELECT %s, id FROM %s
@@ -322,13 +349,12 @@ let insert_multi_into_col ~(table_name : string)
       (fst col) table_name (fst col) (sep_by_comma values)
   in
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (snd col) int)
-       search )
+    Caqti_request.Infix.(
+      (Caqti_type.unit ->* Caqti_type.(t2 (snd col) int)) search)
     ()
 
 let query ~f pool =
-  match%bind Caqti_async.Pool.use f pool with
+  match%bind Pool.use f pool with
   | Ok v ->
       return v
   | Error msg ->
diff --git a/src/lib/runtime_config/runtime_config.ml b/src/lib/runtime_config/runtime_config.ml
index a71ec6c5f8..711415c4bc 100644
--- a/src/lib/runtime_config/runtime_config.ml
+++ b/src/lib/runtime_config/runtime_config.ml
@@ -50,9 +50,13 @@ let result_opt ~f x =
   | None ->
       Result.return None
 
+let truncate_long_string s =
+  if String.length s > 100_000 then "... too long ..." else s
+
 let dump_on_error yojson x =
   Result.map_error x ~f:(fun str ->
-      str ^ "\n\nCould not parse JSON:\n" ^ Yojson.Safe.pretty_to_string yojson )
+      str ^ "\n\nCould not parse JSON:\n" ^ truncate_long_string
+      @@ Yojson.Safe.pretty_to_string yojson )
 
 let of_yojson_generic ~fields of_yojson json =
   dump_on_error json @@ of_yojson
