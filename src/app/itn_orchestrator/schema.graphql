schema {
  query: query
  mutation: mutation
}

"""uint64 encoded as a json string representing an ammount of currency"""
scalar CurrencyAmount

"""uint64 encoded as a json string representing a fee"""
scalar Fee

"""Update to gating config and added peers"""
input GatingUpdate {
  """Peers to connect to"""
  addedPeers: [NetworkPeer!]!

  """If true, resets added peers to an empty list (including seeds)"""
  cleanAddedPeers: Boolean!

  """
  If true, no connections will be allowed unless they are from a trusted peer
  """
  isolate: Boolean!

  """
  Peers we will never allow connections from (unless they are also trusted!)
  """
  bannedPeers: [NetworkPeer!]!

  """Peers we will always allow connections from"""
  trustedPeers: [NetworkPeer!]!
}

type ItnAuth {
  """Uuid of the ITN GraphQL server"""
  serverUuid: String!

  """Sequence number for the signer of the auth query"""
  signerSequenceNumber: UInt16!

  """Libp2p port"""
  libp2pPort: UInt16!

  """Peer id"""
  peerId: String!

  """Is the node a block producer"""
  isBlockProducer: Boolean!
}

type ItnLog {
  """the log ID"""
  id: Int!

  """timestamp of the log"""
  timestamp: String!

  """the log message"""
  message: String!

  """metadata for the log"""
  metadata: [logMetadatum!]!

  """if not the daemon, which process sent the log (prover or verifier)"""
  process: String
}

"""Arbitrary JSON"""
scalar JSON

type logMetadatum {
  """metadatum item"""
  item: String!

  """metadatum value"""
  value: JSON!
}

type mutation {
  schedulePayments(
    """Payments details"""
    input: PaymentsDetails!
  ): String!
  scheduleZkappCommands(
    """Zkapp commands details"""
    input: ZkappCommandsDetails!
  ): String!
  stopScheduledTransactions(
    """Transaction scheduler handle"""
    handle: String!
  ): String!
  updateGating(
    """Gating update"""
    input: GatingUpdate!
  ): String!

  """Returns number of logs deleted from queue"""
  flushInternalLogs(
    """Greatest log ID to be deleted"""
    endLogId: Int!
  ): String!
}

"""Network identifiers for another protocol participant"""
input NetworkPeer {
  libp2pPort: Int!

  """IP address of the remote host"""
  host: String!

  """base58-encoded peer ID"""
  peerId: String!
}

"""Keys and other information for scheduling payments"""
input PaymentsDetails {
  """Length of scheduler run, in minutes"""
  durationMin: Int!

  """Frequency of transactions (transactions per second)"""
  tps: Float!

  """Memo, up to 32 characters"""
  memoPrefix: String!

  """Maximum fee"""
  maxFee: Fee!

  """Minimum fee"""
  minFee: Fee!

  """Amount for payments"""
  amount: CurrencyAmount!

  """Public key of receiver of payments"""
  receiver: PublicKey!

  """Private keys of accounts to send from"""
  senders: [PrivateKey!]!
}

"""Base58Check-encoded private key"""
scalar PrivateKey

"""Public key in Base58Check format"""
scalar PublicKey

type query {
  """Uuid for GraphQL server, sequence number for signing public key"""
  auth: ItnAuth!

  """Slots won by a block producer for current epoch"""
  slotsWon: [Int!]!

  """Internal logs generated by the daemon"""
  internalLogs(
    """Least log ID to start with"""
    startLogId: Int!
  ): [ItnLog!]!
}

"""String representing a uint16 number in base 10"""
scalar UInt16

"""Keys and other information for scheduling zkapp commands"""
input ZkappCommandsDetails {
  """Generate max cost zkApp command"""
  maxCost: Boolean!

  """The size of queue for recently used accounts"""
  accountQueueSize: Int!

  """Fee for the initial deployment of zkApp accounts"""
  deploymentFee: Fee!

  """Maximum fee"""
  maxFee: Fee!

  """Minimum fee"""
  minFee: Fee!

  """
  Initial balance for zkApp accounts that we initially deploy for the purpose of test
  """
  initBalance: CurrencyAmount!

  """Maximum balance change"""
  maxBalanceChange: CurrencyAmount!

  """Minimum balance change"""
  minBalanceChange: CurrencyAmount!

  """Disable the precondition in account updates"""
  noPrecondition: Boolean!

  """Prefix of memo"""
  memoPrefix: String!

  """Length of scheduler run, in minutes"""
  durationMin: Int!

  """Frequency of transactions (transactions per seconds)"""
  tps: Float!

  """Number of zkapp accounts that the scheduler generates during the test"""
  numNewAccounts: Int!

  """
  Number of zkApp accounts that we initially deploy for the purpose of test
  """
  numZkappsToDeploy: Int!

  """
  Private keys of fee payers (fee payers also function as the account creators)
  """
  feePayers: [PrivateKey!]!
}
