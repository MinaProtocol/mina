open Utils
module StringMap = Map.Make (String)

(** A mapping from filename to coverage *)
module Coverage = struct
  type t = int StringMap.t

  let of_string coverage_string =
    let add_line_to_map map line =
      match words line with
      | [ coverage; _percent_symnbole; _lines_covered; file ] ->
          StringMap.add file (int_of_float @@ float_of_string coverage) map
      | _ ->
          map
      (* last line with the global coverage *)
    in
    List.fold_left add_line_to_map StringMap.empty
      (String.split_on_char '\n' coverage_string)

  (** Reads from the summary file, generated by [bisect_ppx summary --per-file] *)
  let read_from_file filename = of_string (read_whole_file filename)
end

(** ocaml files sorted by lines added in the develop branch *)
module Modified_in_develop = struct
  type t = (int * string) list

  let get_str () =
    run_string "bash"
      [| "bash"
       ; "-c"
       ; {| git diff origin/compatible origin/develop --numstat | sort -k1 -n -r | grep "\.ml" | grep -v "=>" | awk '{print $1" "$3}' |}
      |]

  let parse_modified_files string =
    List.map
      (fun line ->
        Scanf.sscanf line "%d %s" (fun lines_added filename ->
            (lines_added, filename) ) )
      (lines string)

  let get () = get_str () |> parse_modified_files
end

(** Builds the output by adding a coverage column to the Modified_in_develop.t *)
module Report = struct
  (** lines added, filename, coverage *)
  type t = (int * string * string) list

  let make coverage_map modified_files : t =
    List.map
      (fun (lines_added, filename) ->
        let percent =
          match StringMap.find_opt filename coverage_map with
          | None ->
              "NA"
          | Some p ->
              string_of_int p
        in
        (lines_added, filename, percent) )
      modified_files

  let pp fmt report =
    List.iter
      (fun (lines_added, filename, coverage) ->
        Format.fprintf fmt "%d %s %s@." lines_added filename coverage )
      report
end
