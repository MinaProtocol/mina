(library
 (name plonk_checks)
 (public_name pickles.plonk_checks)
 (instrumentation
  (backend bisect_ppx))
 (flags
  (:standard -w +a-40..42-44 -warn-error +a-4-70)
  -open
  Core_kernel)
 (preprocess
  (pps ppx_deriving.std ppx_deriving_yojson ppx_jane ppx_mina ppx_version))
 (libraries
  ;; opam libraries
  base.base_internalhash_types
  core_kernel
  ocaml-migrate-parsetree
  ppxlib.ast
  sexplib0
  ;; local libraries
  kimchi_backend
  kimchi_types
  pickles.composition_types
  pickles_base
  pickles_types
  snarky.backendless
  tuple_lib))

(rule
 (target scalars.ml)
 (mode promote)
 (deps
  (:< gen_scalars/gen_scalars.exe))
 (action
  (progn
   (run %{<} %{target})
   (run ocamlformat -i scalars.ml))))