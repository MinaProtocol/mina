(library
 (name plonk_checks)
 (public_name pickles.plonk_checks)
 (instrumentation (backend bisect_ppx))
 (flags
  (:standard
    -w +a-40..42-44
    -warn-error +a-4-70)
  -open Core_kernel)
 (preprocess (pps ppx_mina ppx_version ppx_jane ppx_deriving.std ppx_deriving_yojson))
 (libraries
   ;; opam libraries
   sexplib0
   ppxlib.ast
   core_kernel
   ocaml-migrate-parsetree
   base.base_internalhash_types
   ;; local libraries
   pickles_types
   pickles_base
   pickles.composition_types
   kimchi_backend
   kimchi_types
   snarky.backendless
   tuple_lib
 ))

(rule
 (target scalars.ml)
 (mode promote)
 (deps
  (:< gen_scalars/gen_scalars.exe))
 (action
  (progn
   (run %{<} %{target})
   (run ocamlformat -i scalars.ml))))
