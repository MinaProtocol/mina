(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type signaturetype =
  [ `Ecdsa
    [@printer fun fmt _ -> Format.pp_print_string fmt "ecdsa"]
    [@name "ecdsa"]
  | `Ecdsa_recovery
    [@printer fun fmt _ -> Format.pp_print_string fmt "ecdsa_recovery"]
    [@name "ecdsa_recovery"]
  | `Ed25519
    [@printer fun fmt _ -> Format.pp_print_string fmt "ed25519"]
    [@name "ed25519"]
  | `Schnorr_1
    [@printer fun fmt _ -> Format.pp_print_string fmt "schnorr_1"]
    [@name "schnorr_1"]
  | `Schnorr_poseidon
    [@printer fun fmt _ -> Format.pp_print_string fmt "schnorr_poseidon"]
    [@name "schnorr_poseidon"] ]
[@@deriving yojson, show { with_path = false }, eq]

let signaturetype_of_yojson json = signaturetype_of_yojson (`List [ json ])

let signaturetype_to_yojson e =
  match signaturetype_to_yojson e with `List [ json ] -> json | json -> json

type direction =
  [ `Forward
    [@printer fun fmt _ -> Format.pp_print_string fmt "forward"]
    [@name "forward"]
  | `Backward
    [@printer fun fmt _ -> Format.pp_print_string fmt "backward"]
    [@name "backward"] ]
[@@deriving yojson, show { with_path = false }, eq]

let direction_of_yojson json = direction_of_yojson (`List [ json ])

let direction_to_yojson e =
  match direction_to_yojson e with `List [ json ] -> json | json -> json

type blockeventtype =
  [ `Block_added
    [@printer fun fmt _ -> Format.pp_print_string fmt "block_added"]
    [@name "block_added"]
  | `Block_removed
    [@printer fun fmt _ -> Format.pp_print_string fmt "block_removed"]
    [@name "block_removed"] ]
[@@deriving yojson, show { with_path = false }, eq]

let blockeventtype_of_yojson json = blockeventtype_of_yojson (`List [ json ])

let blockeventtype_to_yojson e =
  match blockeventtype_to_yojson e with `List [ json ] -> json | json -> json

type case =
  [ `Upper_case
    [@printer fun fmt _ -> Format.pp_print_string fmt "upper_case"]
    [@name "upper_case"]
  | `Lower_case
    [@printer fun fmt _ -> Format.pp_print_string fmt "lower_case"]
    [@name "lower_case"]
  | `Case_sensitive
    [@printer fun fmt _ -> Format.pp_print_string fmt "case_sensitive"]
    [@name "case_sensitive"]
  | `Null
    [@printer fun fmt _ -> Format.pp_print_string fmt "null"]
    [@name "null"] ]
[@@deriving yojson, show { with_path = false }, eq]

let case_of_yojson json = case_of_yojson (`List [ json ])

let case_to_yojson e =
  match case_to_yojson e with `List [ json ] -> json | json -> json

type exemptiontype =
  [ `Greater_or_equal
    [@printer fun fmt _ -> Format.pp_print_string fmt "greater_or_equal"]
    [@name "greater_or_equal"]
  | `Less_or_equal
    [@printer fun fmt _ -> Format.pp_print_string fmt "less_or_equal"]
    [@name "less_or_equal"]
  | `Dynamic
    [@printer fun fmt _ -> Format.pp_print_string fmt "dynamic"]
    [@name "dynamic"] ]
[@@deriving yojson, show { with_path = false }, eq]

let exemptiontype_of_yojson json = exemptiontype_of_yojson (`List [ json ])

let exemptiontype_to_yojson e =
  match exemptiontype_to_yojson e with `List [ json ] -> json | json -> json

type operator =
  [ `_or [@printer fun fmt _ -> Format.pp_print_string fmt "or"] [@name "or"]
  | `_and [@printer fun fmt _ -> Format.pp_print_string fmt "and"] [@name "and"]
  ]
[@@deriving yojson, show { with_path = false }, eq]

let operator_of_yojson json = operator_of_yojson (`List [ json ])

let operator_to_yojson e =
  match operator_to_yojson e with `List [ json ] -> json | json -> json

type curvetype =
  [ `Secp256k1
    [@printer fun fmt _ -> Format.pp_print_string fmt "secp256k1"]
    [@name "secp256k1"]
  | `Secp256r1
    [@printer fun fmt _ -> Format.pp_print_string fmt "secp256r1"]
    [@name "secp256r1"]
  | `Edwards25519
    [@printer fun fmt _ -> Format.pp_print_string fmt "edwards25519"]
    [@name "edwards25519"]
  | `Tweedle
    [@printer fun fmt _ -> Format.pp_print_string fmt "tweedle"]
    [@name "tweedle"]
  | `Pallas
    [@printer fun fmt _ -> Format.pp_print_string fmt "pallas"]
    [@name "pallas"] ]
[@@deriving yojson, show { with_path = false }, eq]

let curvetype_of_yojson json = curvetype_of_yojson (`List [ json ])

let curvetype_to_yojson e =
  match curvetype_to_yojson e with `List [ json ] -> json | json -> json

type coinaction =
  [ `Coin_created
    [@printer fun fmt _ -> Format.pp_print_string fmt "coin_created"]
    [@name "coin_created"]
  | `Coin_spent
    [@printer fun fmt _ -> Format.pp_print_string fmt "coin_spent"]
    [@name "coin_spent"] ]
[@@deriving yojson, show { with_path = false }, eq]

let coinaction_of_yojson json = coinaction_of_yojson (`List [ json ])

let coinaction_to_yojson e =
  match coinaction_to_yojson e with `List [ json ] -> json | json -> json
