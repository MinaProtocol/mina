(library
 (name node_backend)
 (public_name bindings_js.node_backend)
 (js_of_ocaml
  (flags
   (:include flags.sexp))
  (javascript_files node_backend.js))
 (instrumentation
  (backend bisect_ppx))
 (preprocess
  (pps ppx_version js_of_ocaml-ppx)))

(rule
 (targets
  plonk_wasm_bg.wasm.d.ts
  plonk_wasm_bg.wasm
  plonk_wasm.d.ts
  plonk_wasm.js
  flags.sexp)
 (deps
  build.sh
  ../../../../../../rust-toolchain.toml
  ../../../../../../Cargo.toml
  ../../../../../../Cargo.lock
  (source_tree ../../../mina-rust-dependencies)
  (source_tree ../../../proof-systems)
  (source_tree ../../../../../.cargo)
  ;; Required as we use Cargo workspace, and the build requires the Cargo.toml
  ;; and sources for each members
  ../../stubs/Cargo.toml
  (source_tree ../../stubs/src)
  ;; Required as we use Cargo workspace, and the build requires the Cargo.toml
  ;; and sources for each members
  ../../wasm/Cargo.toml
  (source_tree ../../wasm/src))
 (locks /cargo-lock) ; lock for rustup
 (action
  (progn
   (run chmod -R +w ../../wasm .)
   (setenv
    CARGO_TARGET_DIR
    "%{read:../../dune-build-root}/cargo_kimchi_wasm"
    (run bash build.sh))
   (write-file flags.sexp "()"))))
