;;
;; Rules to set the optimisation flags for the rust compiler.
;;
;; By default, we compile with optimisations enabled. The instructions that
;; these generate may not be available on all CPU architectures; to build a
;; slower version that does not use these instructions, set the environment
;; variable `RUST_TARGET_FEATURE_OPTIMISATIONS=n`.
;;

(rule
 (enabled_if
  (<> %{env:RUST_TARGET_FEATURE_OPTIMISATIONS=y} n))
 (targets rustflags.sexp)
 (action
  (with-stdout-to
   rustflags.sexp
   (echo "-C target-feature=+bmi2,+adx"))))

(rule
 (enabled_if
  (= %{env:RUST_TARGET_FEATURE_OPTIMISATIONS=y} n))
 (targets rustflags.sexp)
 (action
  (with-stdout-to
   rustflags.sexp
   (echo "-C target-feature=-bmi2,-adx"))))

;;
;; rules to build the static library for kimchi
;;

;; note: to build Mina, nix will set `MARLIN_PLONK_STUBS` and ignore this rule

(rule
 (enabled_if
  (= %{env:MARLIN_PLONK_STUBS=n} n))
 (targets libwires_15_stubs.a)
 (deps
  ../../../../../Cargo.toml
  ../../../../../Cargo.lock
  ./Cargo.toml
  ../../../../../rust-toolchain.toml
  (source_tree src)
  (source_tree .cargo)
  (source_tree ../../mina-rust-dependencies)
  (source_tree ../../proof-systems)
  ;; Required as Cargo asks for all members of the workspace.
  ;; This is temporary until we move into proof-systems
  ../wasm/Cargo.toml
  (source_tree ../wasm/src)
  (env_var MARLIN_PLONK_STUBS))
 (locks /cargo-lock) ;; lock for rustup
 (action
  (progn
   (setenv
    RUSTFLAGS
    %{read:rustflags.sexp}
    (run
     cargo
     build
     --release
     -p
     wires_15_stubs
     --offline
     --target-dir
     %{workspace_root}/target))
   (run cp %{workspace_root}/target/release/libwires_15_stubs.a .))))

;; this is used by nix

(rule
 (enabled_if
  (<> %{env:MARLIN_PLONK_STUBS=n} n))
 (targets libwires_15_stubs.a)
 (deps
  (env_var MARLIN_PLONK_STUBS))
 (action
  (progn
   (copy
    %{env:MARLIN_PLONK_STUBS=n}/lib/libwires_15_stubs.a
    libwires_15_stubs.a))))

;;
;; declare the libraries we're going to generate to match the bindings
;;

(library
 (public_name kimchi_types)
 (name kimchi_types)
 (modules kimchi_types)
 (instrumentation
  (backend bisect_ppx))
 (libraries bounded_types)
 (inline_tests
  (flags -verbose -show-counts))
 (preprocess
  (pps ppx_version ppx_inline_test)))

(library
 (public_name pasta_bindings)
 (name pasta_bindings)
 (modules pasta_bindings)
 (libraries kimchi_types pasta_bindings.backend bounded_types)
 (instrumentation
  (backend bisect_ppx))
 (inline_tests
  (flags -verbose -show-counts))
 (preprocess
  (pps ppx_version ppx_inline_test)))

(library
 (public_name kimchi_bindings)
 (name kimchi_bindings)
 (modules kimchi_bindings)
 (libraries pasta_bindings kimchi_types bounded_types)
 (instrumentation
  (backend bisect_ppx))
 (inline_tests
  (flags -verbose -show-counts))
 (preprocess
  (pps ppx_version ppx_inline_test)))

(library
 (public_name pasta_bindings.backend.native)
 (name pasta_bindings_backend_native)
 (modules pasta_bindings_backend)
 (foreign_archives wires_15_stubs)
 (no_dynlink)
 ; ^ Required for compilation of this library separately
 ; from libraries that depend on it
 (c_library_flags :standard "-lpthread")
 (libraries bounded_types)
 (instrumentation
  (backend bisect_ppx))
 (inline_tests
  (flags -verbose -show-counts))
 (preprocess
  (pps ppx_version ppx_inline_test))
 (implements pasta_bindings.backend))

;;
;; generate the OCaml bindings
;;

;; note: to build Mina, nix will set `MARLIN_PLONK_STUBS` and ignore this rule

(rule
 (targets kimchi_types.ml pasta_bindings.ml kimchi_bindings.ml)
 (enabled_if
  (= %{env:MARLIN_PLONK_STUBS=n} n))
 (mode promote)
 (deps
  ../../../../../Cargo.toml
  ../../../../../Cargo.lock
  ./Cargo.toml
  ../../../../../rust-toolchain.toml
  ../../../../.ocamlformat
  (source_tree ../../mina-rust-dependencies)
  (source_tree ../../proof-systems)
  (source_tree src)
  (source_tree .cargo)
  ;; Required as Cargo asks for all members of the workspace.
  ;; This is temporary until we move into proof-systems
  ../wasm/Cargo.toml
  (source_tree ../wasm/src)
  (source_tree ../wasm/.cargo)
  (env_var MARLIN_PLONK_STUBS))
 (locks /cargo-lock) ;; lock for rustup
 (action
  ;; Not using --release to speed up the build
  (progn
   (run
    cargo
    run
    --offline
    %{targets}
    -p
    wires_15_stubs
    --target-dir
    %{workspace_root}/target)
   (run ocamlformat -i %{targets}))))

;; this is used by nix

(rule
 (targets kimchi_types.ml pasta_bindings.ml kimchi_bindings.ml)
 (enabled_if
  (<> %{env:MARLIN_PLONK_STUBS=n} n))
 (mode promote)
 (deps
  ../../../../.ocamlformat
  (env_var MARLIN_PLONK_STUBS))
 (action
  (progn
   (run %{env:MARLIN_PLONK_STUBS=n}/bin/wires_15_stubs %{targets})
   (run ocamlformat -i %{targets}))))
