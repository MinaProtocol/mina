apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        component: frontend
    spec:
      containers:
        - name: main
          image: {{ .Values.frontend.image }}
          command: ["sh", "-ce"]
          args:
            - |
              ENV=$(echo $ENV) envsubst < /usr/share/nginx/html/assets/env.template.js > /usr/share/nginx/html/assets/env.js
              exec nginx -c /nginx-conf/nginx.conf -g 'daemon off;'
          env:
            - name: ENV
              valueFrom:
                configMapKeyRef:
                  name: frontend-app-conf
                  key: runtime-config
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /nginx-conf
      volumes:
        - name: nginx-conf
          configMap:
            name: frontend-nginx-conf

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-conf
data:
  nginx.conf: |
    {{ include "frontend-nginx-conf" (dict "nodes" $.Values.frontend.nodes "namespace" $.Release.Namespace) | nindent 4 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-app-conf
data:
  runtime-config: >-
    {
      "production": true,
      "aggregator": "/aggregator",
      "isVanilla": {{ $.Values.isVanilla | default "false" }},
      "configs": [
        {{ range $i, $node := $.Values.frontend.nodes  }}
        {{ include "frontend-app-config-entry" (dict "name" $node "first" (eq $i 0) "debugger" "bpf-debugger" ) }}
        {{ end }}
      ]
    }
