{{ range $config := $.Values.seedConfigs}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $config.name }}
  labels:
    app: {{ $config.name }}
  annotations:
  {{- with $.Values.annotations }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $config.name }}
  template:
    metadata:
      labels:
        app: {{ $config.name }}
        testnet: {{ $.Values.testnetName }}
        role: seed
        class: {{ default "undefined" $config.class }}
        version: {{ trunc 6 (split ":" $.Values.mina.image)._1 | trimSuffix "-" }}
        syncStatus: INIT
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ $.Values.mina.ports.metrics | quote }}
        prometheus.io/path: '/metrics'
    spec:
      {{- if $.Values.priorityClass }}
      priorityClassName: {{ $.Values.priorityClass }}
      {{- end }}
      initContainers:
      {{ if $config.libp2pSecret -}}
      - name: libp2p-perms
        image: {{ $.Values.mina.image | quote }}
        command:
        - bash
        - -c
        - /bin/cp /libp2p-keys/* /root/libp2p-keys && /bin/chmod -R 0700 /root/libp2p-keys/
        volumeMounts:
        - name: libp2p-keys
          mountPath: /libp2p-keys
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        env:
        - name: MINA_LIBP2P_PASS
          value: {{ $config.libp2pSecretPassword | quote }}
      {{- else -}}
      - name: libp2p-perms
        image: {{ $.Values.mina.image | quote }}
        command:
        - bash
        - -c
        - mina libp2p generate-keypair --privkey-path /root/libp2p-keys/key && /bin/chmod -R 0700 /root/libp2p-keys/
        volumeMounts:
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        env:
          - name: MINA_LIBP2P_PASS
            value: {{ $config.libp2pSecretPassword | quote }}
      {{- end }}
      {{- if $.Values.mina.runtimeConfig.enabled }}
      - name: daemon-config
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Downloading genesis ledger:";
            wget -O /root/config/genesis_ledger.json {{ $.Values.mina.runtimeConfig.genesisLedgerURL }};

            echo "Replacing baked ledger with {{ $.Values.mina.runtimeConfig.genesisLedgerURL }}";
            cp /root/config/genesis_ledger.json /root/.mina-config/daemon.json && chmod a+r /root/.mina-config/daemon.json || echo "Failed to copy file or set permissions. Check permissions or file existence.";
        volumeMounts:
          - name: {{ $.Release.Name }}-daemon-config-dir
            mountPath: /root/config
          - name: config-dir
            mountPath: /root/.mina-config/
      {{- end }}
      containers:
      - name: mina
        resources:
          limits:
          requests:
            memory: {{ $.Values.mina.memRequest }}
            cpu: {{ $.Values.mina.cpuRequest }}
        image: {{ $.Values.mina.image }}
        {{ if $.Values.mina.useCustomEntrypoint -}}
        command: [{{ $.Values.mina.customEntrypoint }}]
        {{- end }}
        args: [ "daemon",
          "-log-level", "Debug",
          "-log-json",
          "-log-snark-work-gossip", "true",
          "-config-directory", "/root/.mina-config",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          {{- if $.Values.mina.exposeGraphql }}
          "-insecure-rest-server",
          {{- end -}}
          {{- if $.Values.mina.exposeItnGraphql }}
          "--itn-graphql-port", "$(DAEMON_ITN_REST_PORT)",
          "--itn-keys", "$(DAEMON_ITN_KEYS)",
          {{- end -}}
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-enable-peer-exchange", "true",
          {{- if $.Values.mina.logPrecomputedBlocks }}
          "-log-precomputed-blocks", "true",
          {{- end -}}
          {{- if $.Values.mina.logTxnPoolGossip }}
          "-log-txn-pool-gossip", "true",
          {{- end -}}
          {{- if $.Values.mina.maxConnections }}
          "--max-connections", {{ $.Values.mina.maxConnections | quote }},
          {{- end -}}
          {{- if $.Values.mina.seedPeersURL }}
          "-peer-list-url", {{ $.Values.mina.seedPeersURL | quote }},
          {{- end -}}
          {{- if $.Values.mina.runtimeConfig.enabled }}
          "-config-file", "/root/config/genesis_ledger.json",
          {{- end }}
          "-libp2p-keypair", "/root/libp2p-keys/key",
          {{- range $.Values.mina.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
          "-generate-genesis-proof", {{ $.Values.mina.generateGenesisProof | quote }},
          {{- if $.Values.mina.uploadBlocksToGCloud }}
          "-upload-blocks-to-gcloud", "true",
          {{- end }}
          {{- if $config.enableArchive }}
          "-archive-address", {{ $config.archiveAddress }},
          {{- end }}
          "-seed"
        ]
        env:
        - name: "RAYON_NUM_THREADS"
          value: "6"
        - name: DAEMON_REST_PORT
          value: {{ $.Values.mina.ports.graphql | quote }}
        - name: DAEMON_ITN_REST_PORT
          value: {{ $.Values.mina.itn.port | quote }}
        - name: DAEMON_ITN_KEYS
          value: {{ $.Values.mina.itn.keys | quote }}
        - name: DAEMON_CLIENT_PORT
          value: {{ $.Values.mina.ports.client | quote }}
        - name: DAEMON_METRICS_PORT
          value: {{ $.Values.mina.ports.metrics | quote }}
        - name: MINA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        - name: GCLOUD_KEYFILE
          value: "/gcloud/keyfile.json"
        - name: NETWORK_NAME
          value: {{ $.Values.testnetName }}
        - name: GCLOUD_BLOCK_UPLOAD_BUCKET
          value: "mina_network_block_data"
        - name: DAEMON_EXTERNAL_PORT
          value: {{ $.Values.mina.ports.p2p | quote }}
        # {{- if $config.libp2pSecret }}
        - name: MINA_LIBP2P_PASS
          value: {{ $config.libp2pSecretPassword | quote }}
        # {{- end }}
        ports:
        - name: client-port
          protocol: TCP
          containerPort: {{ $.Values.mina.ports.client }}
        - name: graphql-port
          protocol: TCP
          containerPort: {{ $.Values.mina.ports.graphql }}
        - name: metrics-port
          protocol: TCP
          containerPort: {{ $.Values.mina.ports.metrics }}
        - name: external-port
          protocol: TCP
          containerPort: {{ $.Values.mina.ports.p2p }}
          hostPort: {{ $.Values.mina.ports.p2p }}
        {{- if $.Values.mina.exposeItnGraphql }}
        - name: itn-port
          protocol: TCP
          containerPort: {{ $.Values.mina.itn.port }}
        {{- end }} 
        
{{$data := dict "name" $config.name "healthcheck" $.Values.healthcheck }}
{{- include "healthcheck.seed.allChecks" $data | indent 8 }}
        imagePullPolicy: Always
        volumeMounts:
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        {{- if $.Values.mina.uploadBlocksToGCloud }}
        - name: gcloud-keyfile
          mountPath: "/gcloud/"
        {{- end }}
        - name: config-dir
          mountPath: /root/.mina-config/
        {{- if $.Values.mina.runtimeConfig.enabled }}
        - name: {{ $.Release.Name }}-daemon-config-dir
          mountPath: /root/config
        {{- end }}
      volumes:
      - name: config-dir
      {{- if $.Values.persist_working_dir }}
        persistentVolumeClaim:
          claimName: pvc-{{ $config.name }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if $.Values.mina.runtimeConfig.enabled }}
      - name: {{ $.Release.Name }}-daemon-config-dir
        emptyDir: {}
      {{- end }}
      {{- if $config.privateKeySecret }}
      - name: private-keys
        secret:
          secretName: {{ $config.privateKeySecret }}
          defaultMode: 256
          items:
          - key: key
            path: key
          - key: pub
            path: key.pub
      {{- end }}
      {{- if $config.libp2pSecret }}
      - name: libp2p-keys
        secret:
          secretName: {{ $config.libp2pSecret }}
          defaultMode: 0700
          items:
          - key: key
            path: key
          - key: pub
            path: key.pub
      {{- end }}
      {{- if $.Values.mina.uploadBlocksToGCloud }}
      - name: gcloud-keyfile
        secret:
          secretName: gcloud-keyfile
          defaultMode: 256
          items:
          - key: keyfile
            path: keyfile.json
      {{- end }}
      - name: actual-libp2p
        emptyDir: {}
{{- include "nodeSelector.preemptible" $.Values | indent 6 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $config.name }}
  labels:
    app: {{ $config.name }}
    testnet: {{ $.Values.testnetName }}
    role: seed
  annotations:
  {{- with $config.service.annotations }}
  {{- toYaml . | nindent 4 }}
  {{- if $config.service.external }}
    external-dns.alpha.kubernetes.io/hostname: {{ $config.service.subDomain }}.{{ $.Values.testnetName }}.gcp.o1test.net
  {{- end }}
  {{- end }}
spec:
  {{- if $config.service.external }}
  type: LoadBalancer
  {{- else }}
  type: ClusterIP
  {{- end }}
  # We want all pods to have their addresses published for the sake of the
  # other testnet pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  selector:
    app: {{ $config.name }}
  ports:
  - name: tcp-p2p
    port: {{ $.Values.mina.ports.p2p }}
    targetPort: external-port
  - name: metrics-port
    port: {{ $.Values.mina.ports.metrics }}
    targetPort: {{ $.Values.mina.ports.metrics }}
---
{{- if $.Values.mina.exposeGraphql }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $config.name }}-graphql
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  selector:
    app: {{ $config.name }}
  ports:
  - name: http-graphql
    protocol: TCP
    port: 80
    targetPort: {{ $.Values.mina.ports.graphql }}
  {{- if $.Values.mina.exposeItnGraphql }}
  - name: http-itn-graphql
    protocol: TCP
    port: {{ $.Values.mina.itn.port }}
    targetPort: {{ $.Values.mina.itn.port }}
  {{- end }}  
{{- end }}
---
{{- if $.Values.persist_working_dir }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-{{ $config.name }}
spec:
  accessModes:
      - {{ $.Values.storage.accessMode | quote }}
  resources:
    requests:
      storage: {{ $.Values.storage.size | quote }}
  storageClassName: "{{ $.Values.storage.storageClass }}"
---
{{ end }}
---
{{ end }}
---
