apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{$.Values.coordinatorName }}
  labels:
    app: {{$.Values.coordinatorName}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{$.Values.coordinatorName }}
  template:
    metadata:
      labels:
        app: {{$.Values.coordinatorName}}
        testnet: {{ $.Values.testnetName }}
        role: snark-coordinator
        version: {{ trunc 6 (split ":" $.Values.mina.image)._1 | trimSuffix "-" }}
        syncStatus: INIT
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ $.Values.mina.ports.metrics | quote }}
        prometheus.io/path: '/metrics'
    spec:
      initContainers:
      - name: libp2p-perms
        image: {{ $.Values.mina.image | quote }}
        command:
        - bash
        - -c
        - mina libp2p generate-keypair --privkey-path /root/libp2p-keys/key && /bin/chmod -R 0700 /root/libp2p-keys/
        volumeMounts:
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        env:
          - name: MINA_LIBP2P_PASS
            value: {{ $.Values.mina.privkeyPass | quote }}
      containers:
      - name: mina
        resources:
          limits:
          requests:
            memory: {{ $.Values.mina.memRequest }}
            cpu: {{ $.Values.mina.cpuRequest }}
        image: {{ $.Values.mina.image }}
        {{ if $.Values.mina.useCustomEntrypoint -}}
        command: [{{ $.Values.mina.customEntrypoint }}]
        {{- end }}
        args: [ "daemon",
          "-log-level", "Debug",
          "-log-json",
          "-config-directory", "/root/.mina-config",
          "-log-snark-work-gossip", "true",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-run-snark-coordinator", "$(CODA_SNARK_KEY)",
          "-snark-worker-fee", "$(CODA_SNARK_FEE)",
          "-work-selection", "$(WORK_SELECTION)",
          "-enable-peer-exchange", "true",
          "-libp2p-keypair", "/root/libp2p-keys/key",
          {{- if $.Values.mina.logTxnPoolGossip }}
          "-log-txn-pool-gossip", "true",
          {{- end -}}
          {{- if $.Values.mina.runtimeConfig }}
          "-config-file", "/root/config/daemon.json",
          {{- end }}
          {{- range $.Values.mina.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
          {{- if $.Values.mina.seedPeersURL }}
          "-peer-list-url", {{ $.Values.mina.seedPeersURL | quote }},
          {{- end }}
          "-generate-genesis-proof", {{ $.Values.mina.generateGenesisProof | quote }},
          {{- if $.Values.mina.enableArchive }}
          "-archive-address", {{ $.Values.mina.archiveAddress }}
          {{- end -}}
          {{- if $.Values.mina.exposeGraphql }}
          "-insecure-rest-server",
          {{- end -}}
        ]
        env:
        - name: "RAYON_NUM_THREADS"
          value: "7"
        - name: DAEMON_REST_PORT
          value: {{ $.Values.mina.ports.graphql | quote }}
        - name: DAEMON_CLIENT_PORT
          value: {{ $.Values.mina.ports.client | quote }}
        - name: DAEMON_METRICS_PORT
          value: {{ $.Values.mina.ports.metrics | quote }}
        - name: MINA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        - name: CODA_SNARK_KEY
          value: {{ $.Values.publicKey | quote }}
        - name: CODA_SNARK_FEE
          value: {{ $.Values.snarkFee | quote }}
        - name: DAEMON_EXTERNAL_PORT
          value: {{ $.Values.mina.ports.p2p | quote }}
        - name: WORK_SELECTION
          value: {{$.Values.workSelectionAlgorithm | quote }}
        - name: MINA_LIBP2P_PASS
          value: {{ $.Values.mina.privkeyPass | quote }}
        ports:
        - name: client-port
          protocol: TCP 
          containerPort: {{ $.Values.mina.ports.client }}
        - name: graphql-port
          protocol: TCP 
          containerPort: {{ $.Values.mina.ports.graphql }}
        - name: metrics-port
          protocol: TCP 
          containerPort: {{ $.Values.mina.ports.metrics }}
        - name: external-port
          protocol: TCP 
          containerPort: {{ $.Values.mina.ports.p2p }}
          hostPort: {{ $.Values.mina.ports.p2p }}
{{$name := $.Values.coordinatorName }}
{{$data := dict "name" $name "healthcheck" $.Values.healthcheck }}
{{- include "healthcheck.snarkCoordinator.allChecks" $data | indent 8 }}
        imagePullPolicy: Always
        volumeMounts:
        {{- if $.Values.mina.runtimeConfig }}
        - name: daemon-config
          mountPath: "/root/config/"
        {{- end }}
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        - name: config-dir
          mountPath: /root/.mina-config/
      volumes:
      {{- if $.Values.mina.runtimeConfig }}
      - name: daemon-config
        configMap:
          name: {{$.Values.coordinatorName }}-daemon-config
      {{- end }}
      - name: actual-libp2p
        emptyDir: {}
      - name: config-dir
      {{- if $.Values.persist_working_dir }}
        persistentVolumeClaim:
           claimName: pvc-{{ $.Values.coordinatorName }}
      {{- else }} 
        emptyDir: {}
      {{ end }}
{{- include "nodeSelector.preemptible" $.Values | indent 6 }}

---
{{- if $.Values.persist_working_dir }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-{{ $.Values.coordinatorName }}
spec:
  accessModes:
    - {{ $.Values.storage.accessMode | quote }}
  resources:
    requests:
      storage: {{ $.Values.storage.size | quote }}
  storageClassName: "{{ $.Values.storage.storageClass }}"
---
{{ end }}
