apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "archive-node.fullname" . }}
  labels:
    app: {{ template "archive-node.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "archive-node.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "archive-node.fullname" . }}
        testnet: {{ .Values.testnetName }}
        role: archive-node
        version: {{ trunc 6 (split ":" .Values.mina.image)._1 | trimSuffix "-" }}
        {{- if .Values.archive.enableLocalDaemon }}
        syncStatus: INIT
        {{- end }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ .Values.archive.ports.metrics | quote }}
        prometheus.io/path: '/metrics'
    spec:
      containers:
{{- if .Values.archive.enableLocalDaemon }}
      - name: mina
        resources:
          limits:
          requests:
            memory: 8.0Gi
            cpu: 4.0
        image: {{ $.Values.mina.image }}
        {{ if $.Values.mina.useCustomEntrypoint -}}
        command: [{{ $.Values.mina.customEntrypoint }}]
        {{- end }}
        args: [ "daemon",
          "-log-level", {{ .Values.mina.logLevel }},
          "-log-json",
          {{- if .Values.mina.logSnarkWorkGossip }}
          "-log-snark-work-gossip", "true",
          {{- end -}}
          {{- if $.Values.mina.logTxnPoolGossip }}
          "-log-txn-pool-gossip", "true",
          {{- end -}}
          {{- range .Values.mina.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end -}}
          {{- if .Values.mina.enableFlooding }}
          "-enable-flooding true"
          {{- end -}}
          {{- if .Values.mina.peerExchange }}
          "-peer-exchange true"
          {{- end -}}
          {{- range .Values.mina.directPeers }}
          "-direct-peers", {{ . | quote }},
          {{- end -}}
          {{- if .Values.mina.seedPeersURL }}
          "-peer-list-url", {{ .Values.mina.seedPeersURL | quote }},
          {{- end -}}
          "-config-directory", "/root/.mina-config",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-insecure-rest-server",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-archive-address", "$(DAEMON_ARCHIVE_PORT)",
          {{- if .Values.mina.runtimeConfig }}
          "-config-file", "/config/daemon.json",
          {{- end -}}
          "-generate-genesis-proof", {{ .Values.mina.generateGenesisProof | quote }}
        ]
        env:
        - name: DAEMON_REST_PORT
          value: {{ .Values.mina.ports.graphql | quote }}
        - name: DAEMON_ARCHIVE_PORT
          value: {{ .Values.archive.ports.server | quote }}
        - name: DAEMON_CLIENT_PORT
          value: {{ .Values.mina.ports.client | quote }}
        - name: DAEMON_METRICS_PORT
          value: {{ .Values.mina.ports.metrics | quote }}
        - name: DAEMON_EXTERNAL_PORT
          value: {{ .Values.mina.ports.p2p | quote }}
        - name: MINA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        ports:
        - name: client-port
          protocol: TCP 
          containerPort: {{ .Values.mina.ports.client }}
        - name: graphql-port
          protocol: TCP 
          containerPort: {{ .Values.mina.ports.graphql }}
        - name: metrics-port
          protocol: TCP 
          containerPort: {{ .Values.mina.ports.metrics }}
        - name: external-port
          protocol: TCP 
          containerPort: {{ .Values.mina.ports.p2p }}
          hostPort: {{ .Values.mina.ports.p2p }}
{{$name := include "archive-node.fullname" . }}
{{$data := dict "name" $name "healthcheck" $.Values.healthcheck }}
{{- include "healthcheck.daemon.allChecks" $data | indent 8 }}
        imagePullPolicy: Always
        volumeMounts: 
        - name: config-dir
          mountPath: /root/.mina-config
        {{- if .Values.mina.runtimeConfig }}
        - name: daemon-config
          mountPath: "/config/"
        {{- end }}
{{- end }}
      # Archive Process
      - name: archive
        image: {{ .Values.archive.image }}
        args: [ 
          "mina-archive",
          "run",
          "-metrics-port", "{{ .Values.archive.ports.metrics }}",
          "-postgres-uri", "{{ tpl .Values.archive.postgresUri . }}",
          {{- if .Values.mina.runtimeConfig }}
          "-config-file", "/config/daemon.json",
          {{- end }}
          "-server-port", "{{ .Values.archive.ports.server }}"
        ]
        env:
        imagePullPolicy: Always
        {{- if .Values.mina.runtimeConfig }}
        volumeMounts:
        - name: daemon-config
          mountPath: "/config/"
        {{- end }}
        ports:
        - name: archive-port
          protocol: TCP
          containerPort: {{ .Values.archive.ports.server }}
        - name: postgres-port
          protocol: TCP
          containerPort: {{ .Values.archive.ports.postgres }}
        - name: metrics-port
          protocol: TCP 
          containerPort: {{ .Values.archive.ports.metrics }}
{{- include "healthcheck.archive.allChecks" . | indent 8 }}
{{- include "nodeSelector.preemptible" .Values | indent 6 }}
      volumes:
      - name: config-dir
        emptyDir: {}
      {{- if .Values.mina.runtimeConfig }}
      - name: daemon-config
        configMap:
          name: "{{ template "archive-node.fullname" . }}-daemon-config"
      {{- end }}
