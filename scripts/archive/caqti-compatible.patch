diff --git a/opam.export b/opam.export
index c532c30d0a7..390ba09bcb6 100644
--- a/opam.export
+++ b/opam.export
@@ -7,7 +7,6 @@ roots: [
   "bitstring.4.1.0"
   "camlp4.4.14+1"
   "capnp.3.4.0"
-  "check_opam_switch.~dev"
   "cohttp-async.5.0.0"
   "core_extended.v0.14.0"
   "extlib.1.7.8"
@@ -64,11 +63,10 @@ installed: [
   "camlp4.4.14+1"
   "camomile.1.0.2"
   "capnp.3.4.0"
-  "caqti.1.5.0"
-  "caqti-async.1.3.0"
-  "caqti-driver-postgresql.1.5.1"
+  "caqti.2.0.1"
+  "caqti-async.2.0.1"
+  "caqti-driver-postgresql.2.0.1"
   "charInfo_width.1.1.0"
-  "check_opam_switch.~dev"
   "cmdliner.1.0.3"
   "cohttp.5.0.0"
   "cohttp-async.5.0.0"
@@ -131,6 +129,7 @@ installed: [
   "lens.1.2.5"
   "logs.0.7.0"
   "lwt.5.4.0"
+  "lwt-dllist.1.0.1"
   "lwt_log.1.1.1"
   "lwt_react.1.1.2"
   "macaddr.5.0.1"
@@ -144,6 +143,7 @@ installed: [
   "mew_vi.0.5.0"
   "minicli.5.0.2"
   "mmap.1.1.0"
+  "mtime.2.0.0"
   "num.1.1"
   "ocaml.4.14.0"
   "ocaml-base-compiler.4.14.0"
@@ -247,43 +247,8 @@ installed: [
   "zed.3.1.0"
 ]
 pinned: [
-  "check_opam_switch.~dev"
   "graphql_ppx.1.2.2"
 ]
-package "check_opam_switch" {
-  opam-version: "2.0"
-  version: "~dev"
-  synopsis:
-    "A tool to check that the current opam environment is up to date with an opam.export file"
-  description:
-    "A tool to check that the current opam environment is up to date with an opam.export file"
-  maintainer: "yves.stan.lecornec@tweag.io"
-  depends: [
-    "dune" {>= "3.3"}
-    "opam-core" {>= "2.0.0"}
-    "opam-format" {>= "2.0.0"}
-    "minicli" {>= "5.0.0"}
-    "odoc" {with-doc}
-  ]
-  build: [
-    ["dune" "subst"] {dev}
-    [
-      "dune"
-      "build"
-      "-p"
-      name
-      "-j"
-      jobs
-      "@install"
-      "@runtest" {with-test}
-      "@doc" {with-doc}
-    ]
-  ]
-  url {
-    src: "https://github.com/tweag/check_opam_switch/archive/d0aa49884e0f9fd4bbb2cd1a32b798a12f84b603.tar.gz"
-    checksum: "sha256=24ab29ea4aff9da9d649f0b577c5d4e27ce2bef51058e139965cc9be25494a46"
-  }
-}
 package "graphql_ppx" {
   opam-version: "2.0"
   version: "1.2.2"
diff --git a/scripts/pin-external-packages.sh b/scripts/pin-external-packages.sh
index 02550402082..34b378fb4e3 100755
--- a/scripts/pin-external-packages.sh
+++ b/scripts/pin-external-packages.sh
@@ -10,3 +10,5 @@ for pkg in $PACKAGES; do
     echo "Pinning package" $pkg
     opam pin -y add src/external/$pkg
 done
+
+opam pin add -y https://github.com/tweag/check_opam_switch.git#d0aa49884e0f9fd4bbb2cd1a32b798a12
\ No newline at end of file
diff --git a/src/app/archive/archive_lib/dune b/src/app/archive/archive_lib/dune
index 15caafed7ec..a78b783a65f 100644
--- a/src/app/archive/archive_lib/dune
+++ b/src/app/archive/archive_lib/dune
@@ -56,6 +56,7 @@
    quickcheck_lib
    snark_params
    protocol_version
+   mina_caqti
  )
  (inline_tests)
  (modes native)
diff --git a/src/app/archive/archive_lib/metrics.ml b/src/app/archive/archive_lib/metrics.ml
index c69e1805d1d..aac3552028a 100644
--- a/src/app/archive/archive_lib/metrics.ml
+++ b/src/app/archive/archive_lib/metrics.ml
@@ -14,7 +14,7 @@ let default_missing_blocks_width = 2000
 
 module Max_block_height = struct
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       "SELECT GREATEST(0, MAX(height)) FROM blocks"
 
   let update (module Conn : Caqti_async.CONNECTION) metric_server =
@@ -30,7 +30,7 @@ end
 module Missing_blocks = struct
   (*A block is missing if there is no entry for a specific height. However, if there is an entry then it doesn't necessarily mean that it is part of the main chain. Unparented_blocks will show value > 1 in that case. Look for the last 2000 blocks*)
   let query missing_blocks_width =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       (Core_kernel.sprintf
          {sql| 
         SELECT COUNT( * )
@@ -55,7 +55,7 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Caqti_request.Infix.(Caqti_type.unit ->! Caqti_type.int)
       {sql|
            SELECT COUNT( * ) FROM blocks
            WHERE parent_id IS NULL
diff --git a/src/app/archive/archive_lib/processor.ml b/src/app/archive/archive_lib/processor.ml
index ba66716de8e..05b397f08ee 100644
--- a/src/app/archive/archive_lib/processor.ml
+++ b/src/app/archive/archive_lib/processor.ml
@@ -22,7 +22,7 @@ module Caqti_type_spec = struct
      | [] ->
          (Caqti_type.unit : tuple Caqti_type.t)
      | rep :: spec ->
-         Caqti_type.tup2 rep (to_rep spec)
+         Caqti_type.t2 rep (to_rep spec)
 
   let rec hlist_to_tuple :
             'hlist 'tuple.
@@ -56,7 +56,7 @@ let rec vector :
         ~decode:(fun () -> Ok Vector.[])
   | S n ->
       let r = vector n t in
-      Caqti_type.(custom (tup2 t r))
+      Caqti_type.(custom (t2 t r))
         ~encode:(fun Vector.(x :: xs) -> Ok (x, xs))
         ~decode:(fun (x, xs) -> Ok (x :: xs))
 
@@ -86,20 +86,20 @@ module Public_key = struct
   let find (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
     let public_key = Public_key.Compressed.to_base58_check t in
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (Mina_caqti.find_req Caqti_type.string Caqti_type.int
          "SELECT id FROM public_keys WHERE value = ?" )
       public_key
 
   let find_opt (module Conn : CONNECTION) (t : Public_key.Compressed.t) =
     let public_key = Public_key.Compressed.to_base58_check t in
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+      (Mina_caqti.find_req_opt Caqti_type.string Caqti_type.int
          "SELECT id FROM public_keys WHERE value = ?" )
       public_key
 
   let find_by_id (module Conn : CONNECTION) id =
     Conn.find
-      (Caqti_request.find Caqti_type.int Caqti_type.string
+      (Mina_caqti.find_req Caqti_type.int Caqti_type.string
          "SELECT value FROM public_keys WHERE id = ?" )
       id
 
@@ -112,7 +112,7 @@ module Public_key = struct
     | None ->
         let public_key = Public_key.Compressed.to_base58_check t in
         Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
+          (Mina_caqti.find_req Caqti_type.string Caqti_type.int
              "INSERT INTO public_keys (value) VALUES (?) RETURNING id" )
           public_key
 end
@@ -143,7 +143,7 @@ module Timing_info = struct
     let open Deferred.Result.Let_syntax in
     let%bind pk_id = Public_key.find (module Conn) acc.public_key in
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (Mina_caqti.find_req Caqti_type.int typ
          {sql| SELECT public_key_id, token, initial_balance,
                       initial_minimum_balance, cliff_time, cliff_amount,
                       vesting_period, vesting_increment
@@ -159,7 +159,7 @@ module Timing_info = struct
         return None
     | Some pk_id ->
         Conn.find_opt
-          (Caqti_request.find_opt Caqti_type.int typ
+          (Mina_caqti.find_req_opt Caqti_type.int typ
              {sql| SELECT public_key_id, token, initial_balance,
                         initial_minimum_balance, cliff_time, cliff_amount,
                         vesting_period, vesting_increment
@@ -182,7 +182,7 @@ module Timing_info = struct
     in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.int Caqti_type.int
+        (Mina_caqti.find_req_opt Caqti_type.int Caqti_type.int
            "SELECT id FROM timing_info WHERE public_key_id = ?" )
         public_key_id
     with
@@ -218,7 +218,7 @@ module Timing_info = struct
               }
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (Mina_caqti.find_req typ Caqti_type.int
              {sql| INSERT INTO timing_info
                     (public_key_id,token,initial_balance,initial_minimum_balance,
                      cliff_time, cliff_amount, vesting_period, vesting_increment)
@@ -232,7 +232,7 @@ module Snarked_ledger_hash = struct
   let find (module Conn : CONNECTION) (t : Frozen_ledger_hash.t) =
     let hash = Frozen_ledger_hash.to_base58_check t in
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (Mina_caqti.find_req Caqti_type.string Caqti_type.int
          "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
       hash
 
@@ -242,7 +242,7 @@ module Snarked_ledger_hash = struct
     let hash = Frozen_ledger_hash.to_base58_check t in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (Mina_caqti.find_req_opt Caqti_type.string Caqti_type.int
            "SELECT id FROM snarked_ledger_hashes WHERE value = ?" )
         hash
     with
@@ -250,7 +250,7 @@ module Snarked_ledger_hash = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find Caqti_type.string Caqti_type.int
+          (Mina_caqti.find_req Caqti_type.string Caqti_type.int
              "INSERT INTO snarked_ledger_hashes (value) VALUES (?) RETURNING id" )
           hash
 end
@@ -261,7 +261,7 @@ module Epoch_data = struct
   let typ =
     let encode t = Ok (t.seed, t.ledger_hash_id) in
     let decode (seed, ledger_hash_id) = Ok { seed; ledger_hash_id } in
-    let rep = Caqti_type.(tup2 string int) in
+    let rep = Caqti_type.(t2 string int) in
     Caqti_type.custom ~encode ~decode rep
 
   (* for extensional blocks, we have just the seed and ledger hash *)
@@ -271,7 +271,7 @@ module Epoch_data = struct
     let seed = Epoch_seed.to_base58_check seed in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt typ Caqti_type.int
+        (Mina_caqti.find_req_opt typ Caqti_type.int
            "SELECT id FROM epoch_data WHERE seed = ? AND ledger_hash_id = ?" )
         { seed; ledger_hash_id }
     with
@@ -279,7 +279,7 @@ module Epoch_data = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (Mina_caqti.find_req typ Caqti_type.int
              {sql| INSERT INTO epoch_data (seed, ledger_hash_id) VALUES (?, ?)
                    RETURNING id
              |sql} )
@@ -343,13 +343,13 @@ module User_command = struct
     let find (module Conn : CONNECTION) ~(transaction_hash : Transaction_hash.t)
         =
       Conn.find_opt
-        (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+        (Mina_caqti.find_req_opt Caqti_type.string Caqti_type.int
            "SELECT id FROM user_commands WHERE hash = ?" )
         (Transaction_hash.to_base58_check transaction_hash)
 
     let load (module Conn : CONNECTION) ~(id : int) =
       Conn.find
-        (Caqti_request.find Caqti_type.int typ
+        (Mina_caqti.find_req Caqti_type.int typ
            {sql| SELECT type,fee_payer_id,source_id,receiver_id,
                  fee_token,token,
                  nonce,amount,fee,valid_until,memo,hash
@@ -403,7 +403,7 @@ module User_command = struct
           in
           (* TODO: Converting these uint64s to int64 can overflow; see #5419 *)
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (Mina_caqti.find_req typ Caqti_type.int
                {sql| INSERT INTO user_commands (type, fee_payer_id, source_id,
                       receiver_id, fee_token, token, nonce, amount, fee,
                       valid_until, memo, hash)
@@ -502,7 +502,7 @@ module User_command = struct
       Public_key.add_if_doesn't_exist (module Conn) user_cmd.receiver
     in
     Conn.find
-      (Caqti_request.find Signed_command.typ Caqti_type.int
+      (Mina_caqti.find_req Signed_command.typ Caqti_type.int
          {sql| INSERT INTO user_commands (type, fee_payer_id, source_id,
                       receiver_id, fee_token, token, nonce, amount, fee,
                       valid_until, memo, hash)
@@ -554,14 +554,14 @@ module Internal_command = struct
     let decode ((typ, receiver_id, fee, token), hash) =
       Ok { typ; receiver_id; fee; token; hash }
     in
-    let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
+    let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
     Caqti_type.custom ~encode ~decode rep
 
   let find (module Conn : CONNECTION) ~(transaction_hash : Transaction_hash.t)
       ~(typ : string) =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 string string)
+      (Mina_caqti.find_req_opt
+         Caqti_type.(t2 string string)
          Caqti_type.int
          "SELECT id FROM internal_commands WHERE hash = $1 AND type = \
           $2::internal_command_type" )
@@ -569,7 +569,7 @@ module Internal_command = struct
 
   let load (module Conn : CONNECTION) ~(id : int) =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (Mina_caqti.find_req Caqti_type.int typ
          {sql| SELECT type,receiver_id,fee,token,hash
                FROM internal_commands
                WHERE id = ?
@@ -591,7 +591,7 @@ module Internal_command = struct
           Public_key.add_if_doesn't_exist (module Conn) internal_cmd.receiver
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (Mina_caqti.find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (type, receiver_id, fee, token,hash)
                    VALUES (?::internal_command_type, ?, ?, ?, ?)
@@ -646,7 +646,7 @@ module Fee_transfer = struct
       in
       Ok { kind; receiver_id; fee; token; hash }
     in
-    let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
+    let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
     Caqti_type.custom ~encode ~decode rep
 
   let add_if_doesn't_exist (module Conn : CONNECTION)
@@ -667,7 +667,7 @@ module Fee_transfer = struct
             (Fee_transfer.Single.receiver_pk t)
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (Mina_caqti.find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (type, receiver_id, fee, token, hash)
                    VALUES (?::internal_command_type, ?, ?, ?, ?)
@@ -700,7 +700,7 @@ module Coinbase = struct
     let decode ((_, receiver_id, amount, _), hash) =
       Ok { receiver_id; amount; hash }
     in
-    let rep = Caqti_type.(tup2 (tup4 string int int64 int64) string) in
+    let rep = Caqti_type.(t2 (t4 string int int64 int64) string) in
     Caqti_type.custom ~encode ~decode rep
 
   let add_if_doesn't_exist (module Conn : CONNECTION) (t : Coinbase.t) =
@@ -716,7 +716,7 @@ module Coinbase = struct
           Public_key.add_if_doesn't_exist (module Conn) (Coinbase.receiver_pk t)
         in
         Conn.find
-          (Caqti_request.find typ Caqti_type.int
+          (Mina_caqti.find_req typ Caqti_type.int
              {sql| INSERT INTO internal_commands
                     (type, receiver_id, fee, token, hash)
                    VALUES (?::internal_command_type, ?, ?, ?, ?)
@@ -809,8 +809,8 @@ WITH RECURSIVE pending_chain_nonce AS (
         |> String.concat ~sep:","
       in
       Conn.collect_list
-        (Caqti_request.collect
-           Caqti_type.(tup2 int int)
+        (Mina_caqti.collect_req
+           Caqti_type.(t2 int int)
            typ
            (sql_template public_keys_sql_list) )
         (parent_id, List.length public_keys)
@@ -868,8 +868,8 @@ module Balance = struct
       ~block_secondary_sequence_no =
     (* TODO: Do we need to query with the nonce here? *)
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup2 (tup2 int int64) (tup4 int int64 int int))
+      (Mina_caqti.find_req_opt
+         Caqti_type.(t2 (t2 int int64) (t4 int int64 int int))
          Caqti_type.int
          {sql| SELECT id FROM balances
                WHERE public_key_id = $1
@@ -885,7 +885,7 @@ module Balance = struct
 
   let load (module Conn : CONNECTION) ~(id : int) =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (Mina_caqti.find_req Caqti_type.int typ
          {sql| SELECT id, public_key_id, balance,
                       block_id, block_height,
                       block_sequence_no, block_secondary_sequence_no, nonce
@@ -898,9 +898,9 @@ module Balance = struct
       ~(balance : Currency.Balance.t) ~block_id ~block_height ~block_sequence_no
       ~block_secondary_sequence_no ~nonce =
     Conn.find
-      (Caqti_request.find
+      (Mina_caqti.find_req
          Caqti_type.(
-           tup2 (tup2 int int64) (tup4 int int64 (tup2 int int) (option int64)))
+           t2 (t2 int int64) (t4 int int64 (t2 int int) (option int64)))
          Caqti_type.int
          {sql| INSERT INTO balances (public_key_id, balance,
                                      block_id, block_height, block_sequence_no, block_secondary_sequence_no, nonce)
@@ -953,7 +953,7 @@ module Block_and_internal_command = struct
       ~secondary_sequence_no ~receiver_account_creation_fee_paid
       ~receiver_balance_id =
     Conn.exec
-      (Caqti_request.exec typ
+      (Mina_caqti.exec_req typ
          {sql| INSERT INTO blocks_internal_commands
                 (block_id, internal_command_id, sequence_no, secondary_sequence_no,
                  receiver_account_creation_fee_paid,receiver_balance)
@@ -970,8 +970,8 @@ module Block_and_internal_command = struct
   let find (module Conn : CONNECTION) ~block_id ~internal_command_id
       ~sequence_no ~secondary_sequence_no =
     Conn.find_opt
-      (Caqti_request.find_opt
-         Caqti_type.(tup4 int int int int)
+      (Mina_caqti.find_req_opt
+         Caqti_type.(t4 int int int int)
          Caqti_type.string
          {sql| SELECT 'exists' FROM blocks_internal_commands
                WHERE block_id = $1
@@ -1057,7 +1057,7 @@ module Block_and_signed_command = struct
           Unsigned.UInt64.to_int64 (Token_id.to_uint64 tid) )
     in
     Conn.exec
-      (Caqti_request.exec typ
+      (Mina_caqti.exec_req typ
          {sql| INSERT INTO blocks_user_commands
                  (block_id,
                  user_command_id,
@@ -1179,8 +1179,8 @@ module Block_and_signed_command = struct
     let open Deferred.Result.Let_syntax in
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup3 int int int)
+        (Mina_caqti.find_req_opt
+           Caqti_type.(t3 int int int)
            Caqti_type.string
            {sql| SELECT 'exists' FROM blocks_user_commands
                  WHERE block_id = $1
@@ -1201,8 +1201,8 @@ module Block_and_signed_command = struct
 
   let load (module Conn : CONNECTION) ~block_id ~user_command_id =
     Conn.find
-      (Caqti_request.find
-         Caqti_type.(tup2 int int)
+      (Mina_caqti.find_req
+         Caqti_type.(t2 int int)
          typ
          {sql| SELECT block_id, user_command_id,
                sequence_no,
@@ -1265,19 +1265,19 @@ module Block = struct
 
   let find (module Conn : CONNECTION) ~(state_hash : State_hash.t) =
     Conn.find
-      (Caqti_request.find Caqti_type.string Caqti_type.int
+      (Mina_caqti.find_req Caqti_type.string Caqti_type.int
          "SELECT id FROM blocks WHERE state_hash = ?" )
       (State_hash.to_base58_check state_hash)
 
   let find_opt (module Conn : CONNECTION) ~(state_hash : State_hash.t) =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.string Caqti_type.int
+      (Mina_caqti.find_req_opt Caqti_type.string Caqti_type.int
          "SELECT id FROM blocks WHERE state_hash = ?" )
       (State_hash.to_base58_check state_hash)
 
   let load (module Conn : CONNECTION) ~(id : int) =
     Conn.find
-      (Caqti_request.find Caqti_type.int typ
+      (Mina_caqti.find_req Caqti_type.int typ
          {sql| SELECT state_hash, parent_id, parent_hash, creator_id,
                       block_winner_id, snarked_ledger_hash_id, staking_epoch_data_id,
                       next_epoch_data_id, ledger_hash, height, global_slot,
@@ -1377,7 +1377,7 @@ module Block = struct
         in
         let%bind block_id =
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (Mina_caqti.find_req typ Caqti_type.int
                {sql| INSERT INTO blocks (state_hash, parent_id, parent_hash,
                       creator_id, block_winner_id,
                       snarked_ledger_hash_id, staking_epoch_data_id,
@@ -1672,8 +1672,8 @@ module Block = struct
        see the comment explaining the design there
     *)
     let nonce_query =
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
+      Mina_caqti.find_req_opt
+        Caqti_type.(t2 string int64)
         Caqti_type.int64
         {sql| SELECT nonce
               FROM (WITH RECURSIVE chain AS (
@@ -1775,7 +1775,7 @@ module Block = struct
               ~seed:block.next_epoch_seed ~ledger_hash_id:next_ledger_hash_id
           in
           Conn.find
-            (Caqti_request.find typ Caqti_type.int
+            (Mina_caqti.find_req typ Caqti_type.int
                {sql| INSERT INTO blocks
                      (state_hash, parent_id, parent_hash,
                       creator_id, block_winner_id,
@@ -1925,8 +1925,8 @@ module Block = struct
   let set_parent_id_if_null (module Conn : CONNECTION) ~parent_hash
       ~(parent_id : int) =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 int string)
+      (Mina_caqti.exec_req
+         Caqti_type.(t2 int string)
          {sql| UPDATE blocks SET parent_id = ?
                WHERE parent_hash = ?
                AND parent_id IS NULL
@@ -1935,8 +1935,8 @@ module Block = struct
 
   let get_subchain (module Conn : CONNECTION) ~start_block_id ~end_block_id =
     Conn.collect_list
-      (Caqti_request.collect
-         Caqti_type.(tup2 int int)
+      (Mina_caqti.collect_req
+         Caqti_type.(t2 int int)
          typ
          {sql| WITH RECURSIVE chain AS (
               SELECT id,state_hash,parent_id,parent_hash,creator_id,block_winner_id,snarked_ledger_hash_id,staking_epoch_data_id,
@@ -1963,37 +1963,37 @@ module Block = struct
 
   let get_highest_canonical_block_opt (module Conn : CONNECTION) =
     Conn.find_opt
-      (Caqti_request.find_opt Caqti_type.unit
-         Caqti_type.(tup2 int int64)
+      (Mina_caqti.find_req_opt Caqti_type.unit
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' ORDER BY \
           height DESC LIMIT 1" )
 
   let get_nearest_canonical_block_above (module Conn : CONNECTION) height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (Mina_caqti.find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height > ? ORDER BY height ASC LIMIT 1" )
       height
 
   let get_nearest_canonical_block_below (module Conn : CONNECTION) height =
     Conn.find
-      (Caqti_request.find Caqti_type.int64
-         Caqti_type.(tup2 int int64)
+      (Mina_caqti.find_req Caqti_type.int64
+         Caqti_type.(t2 int int64)
          "SELECT id,height FROM blocks WHERE chain_status='canonical' AND \
           height < ? ORDER BY height DESC LIMIT 1" )
       height
 
   let mark_as_canonical (module Conn : CONNECTION) ~state_hash =
     Conn.exec
-      (Caqti_request.exec Caqti_type.string
+      (Mina_caqti.exec_req Caqti_type.string
          "UPDATE blocks SET chain_status='canonical' WHERE state_hash = ?" )
       state_hash
 
   let mark_as_orphaned (module Conn : CONNECTION) ~state_hash ~height =
     Conn.exec
-      (Caqti_request.exec
-         Caqti_type.(tup2 string int64)
+      (Mina_caqti.exec_req
+         Caqti_type.(t2 string int64)
          {sql| UPDATE blocks SET chain_status='orphaned'
                WHERE height = $2
                AND state_hash <> $1
@@ -2072,7 +2072,7 @@ module Block = struct
       | None, Some num_blocks -> (
           match%map
             Conn.find_opt
-              (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+              (Mina_caqti.find_req_opt Caqti_type.unit Caqti_type.int
                  "SELECT MAX(height) FROM blocks" )
               ()
           with
@@ -2088,8 +2088,8 @@ module Block = struct
       let%bind () =
         (* Delete user commands from old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (Mina_caqti.exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM user_commands\n\
               WHERE id IN\n\
               (SELECT user_command_id FROM blocks_user_commands\n\
@@ -2100,8 +2100,8 @@ module Block = struct
       let%bind () =
         (* Delete old blocks. *)
         Conn.exec
-          (Caqti_request.exec
-             Caqti_type.(tup2 int int64)
+          (Mina_caqti.exec_req
+             Caqti_type.(t2 int int64)
              "DELETE FROM blocks WHERE blocks.height < ? OR blocks.timestamp < \
               ?" )
           (height, timestamp)
@@ -2109,7 +2109,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned internal commands. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (Mina_caqti.exec_req Caqti_type.unit
              "DELETE FROM internal_commands\n\
               WHERE id NOT IN\n\
               (SELECT internal_commands.id FROM internal_commands\n\
@@ -2120,7 +2120,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned snarked ledger hashes. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (Mina_caqti.exec_req Caqti_type.unit
              "DELETE FROM snarked_ledger_hashes\n\
               WHERE id NOT IN\n\
               (SELECT snarked_ledger_hash_id FROM blocks)" )
@@ -2129,7 +2129,7 @@ module Block = struct
       let%bind () =
         (* Delete orphaned public keys. *)
         Conn.exec
-          (Caqti_request.exec Caqti_type.unit
+          (Mina_caqti.exec_req Caqti_type.unit
              "DELETE FROM public_keys\n\
               WHERE id NOT IN (SELECT fee_payer_id FROM user_commands)\n\
               AND id NOT IN (SELECT source_id FROM user_commands)\n\
@@ -2405,7 +2405,11 @@ let setup_server ~metrics_server_port ~constraint_constants ~logger
           Strict_pipe.Writer.write extensional_block_writer extensional_block )
     ]
   in
-  match Caqti_async.connect_pool ~max_size:30 postgres_address with
+  let pool_config =
+    Caqti_pool_config.(
+      merge_left (default_from_env ()) (create ~max_size:30 ()))
+  in
+  match Caqti_async.connect_pool ~pool_config postgres_address with
   | Error e ->
       [%log error]
         "Failed to create a Caqti pool for Postgresql, see error: $error"
diff --git a/src/app/delegation_compliance/delegation_compliance.ml b/src/app/delegation_compliance/delegation_compliance.ml
index 46f51e18a3d..aaa6bfd8a94 100644
--- a/src/app/delegation_compliance/delegation_compliance.ml
+++ b/src/app/delegation_compliance/delegation_compliance.ml
@@ -342,7 +342,13 @@ let main ~input_file ~csv_file ~preliminary_csv_file_opt ~archive_uri
         csv_datas
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/delegation_compliance/dune b/src/app/delegation_compliance/dune
index 41022a8b231..ca5c96e4ba9 100644
--- a/src/app/delegation_compliance/dune
+++ b/src/app/delegation_compliance/dune
@@ -34,6 +34,7 @@
    coda_runtime_config
    currency
    coda_genesis_ledger
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/delegation_compliance/sql.ml b/src/app/delegation_compliance/sql.ml
index 81e0b11560a..9bdbf5c3464 100644
--- a/src/app/delegation_compliance/sql.ml
+++ b/src/app/delegation_compliance/sql.ml
@@ -16,7 +16,7 @@ module Block_info = struct
 
   (* find all blocks, working back from block with given state hash *)
   let query =
-    Caqti_request.collect Caqti_type.string typ
+    Mina_caqti.collect_req Caqti_type.string typ
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id,global_slot,state_hash,ledger_hash FROM blocks b WHERE b.state_hash = ?
@@ -122,7 +122,7 @@ module User_command = struct
     Caqti_type.custom ~encode ~decode (to_rep spec)
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id,receiver_id,fee,fee_token,token,amount,valid_until,memo,nonce,
                    blocks.id,blocks.global_slot,parent.global_slot_since_genesis,
                    sequence_no,status,created_token,
@@ -148,8 +148,8 @@ module User_command = struct
     Conn.collect_list query user_cmd_id
 
   let query_payments_by_source_and_receiver =
-    Caqti_request.collect
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int int)
       typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
@@ -182,7 +182,7 @@ module User_command = struct
       (source_id, receiver_id)
 
   let query_payments_by_receiver =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id, receiver_id, fee,fee_token,
                token, amount, valid_until, memo, nonce, blocks.id, blocks.global_slot,
                parent.global_slot_since_genesis, sequence_no, status, created_token,
@@ -214,7 +214,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req_opt Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
@@ -223,7 +223,7 @@ module Public_key = struct
     Conn.find_opt query pk_id
 
   let query_for_id =
-    Caqti_request.find_opt Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req_opt Caqti_type.string Caqti_type.int
       {sql| SELECT id FROM public_keys
             WHERE value = ?
       |sql}
@@ -234,7 +234,7 @@ end
 
 module Block = struct
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT MAX(global_slot) FROM blocks
       |sql}
 
@@ -242,7 +242,7 @@ module Block = struct
     Conn.find max_slot_query ()
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot = $1
       |sql}
 
@@ -250,8 +250,8 @@ module Block = struct
     Conn.collect_list state_hashes_by_slot_query slot
 
   let creator_slot_bounds_query =
-    Caqti_request.collect
-      Caqti_type.(tup3 int int64 int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t3 int int64 int64)
       Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE creator_id = $1
@@ -268,7 +268,7 @@ module Coinbase_receivers_for_block_creator = struct
      with given creator_id, where the receiver distinct from the creator_id
   *)
   let query =
-    Caqti_request.collect Caqti_type.int Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.int Caqti_type.int
       {sql| SELECT DISTINCT ic.receiver_id
 
             FROM blocks b
diff --git a/src/app/extract_blocks/dune b/src/app/extract_blocks/dune
index 17a4614992b..9309e216149 100644
--- a/src/app/extract_blocks/dune
+++ b/src/app/extract_blocks/dune
@@ -24,6 +24,7 @@
    block_time
    mina_numbers
    mina_base
+   mina_caqti
    currency
    unsigned_extended
    error_json
diff --git a/src/app/extract_blocks/extract_blocks.ml b/src/app/extract_blocks/extract_blocks.ml
index 92f0c1ab7e2..9f88dc5dfec 100644
--- a/src/app/extract_blocks/extract_blocks.ml
+++ b/src/app/extract_blocks/extract_blocks.ml
@@ -324,7 +324,13 @@ let main ~archive_uri ~start_state_hash_opt ~end_state_hash_opt ~all_blocks () =
   (* sanity-check input state hashes *)
   check_state_hash ~logger start_state_hash_opt ;
   check_state_hash ~logger end_state_hash_opt ;
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/extract_blocks/sql.ml b/src/app/extract_blocks/sql.ml
index c03dc893925..b060a80295c 100644
--- a/src/app/extract_blocks/sql.ml
+++ b/src/app/extract_blocks/sql.ml
@@ -27,12 +27,12 @@ module Subchain = struct
       join_condition
 
   let query_unparented =
-    Caqti_request.collect Caqti_type.string Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.string Archive_lib.Processor.Block.typ
       (make_sql ~join_condition:"b.id = chain.parent_id")
 
   let query_from_start =
-    Caqti_request.collect
-      Caqti_type.(tup2 string string)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string string)
       Archive_lib.Processor.Block.typ
       (make_sql
          ~join_condition:
@@ -48,7 +48,7 @@ module Subchain = struct
     Conn.collect_list query_from_start (end_state_hash, start_state_hash)
 
   let query_all =
-    Caqti_request.collect Caqti_type.unit Archive_lib.Processor.Block.typ
+    Mina_caqti.collect_req Caqti_type.unit Archive_lib.Processor.Block.typ
       {sql| SELECT state_hash,parent_id,parent_hash,creator_id,block_winner_id,snarked_ledger_hash_id,staking_epoch_data_id,
                    next_epoch_data_id,ledger_hash,height,global_slot,global_slot_since_genesis,timestamp, chain_status
             FROM blocks
@@ -62,7 +62,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       "SELECT value from public_keys WHERE id = ?"
 
   let run (module Conn : Caqti_async.CONNECTION) id = Conn.find query id
@@ -70,7 +70,7 @@ end
 
 module Snarked_ledger_hashes = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       "SELECT value from snarked_ledger_hashes WHERE id = ?"
 
   let run (module Conn : Caqti_async.CONNECTION) id = Conn.find query id
@@ -78,8 +78,8 @@ end
 
 module Epoch_data = struct
   let query =
-    Caqti_request.find Caqti_type.int
-      Caqti_type.(tup2 string int)
+    Mina_caqti.find_req Caqti_type.int
+      Caqti_type.(t2 string int)
       "SELECT seed,ledger_hash_id from epoch_data WHERE id = ?"
 
   let run (module Conn : Caqti_async.CONNECTION) id = Conn.find query id
@@ -87,8 +87,8 @@ end
 
 module Blocks_and_user_commands = struct
   let query =
-    Caqti_request.collect Caqti_type.int
-      Caqti_type.(tup2 int int)
+    Mina_caqti.collect_req Caqti_type.int
+      Caqti_type.(t2 int int)
       {sql| SELECT user_command_id, sequence_no
             FROM blocks_user_commands
             WHERE block_id = ?
@@ -116,7 +116,7 @@ module Blocks_and_internal_commands = struct
     Caqti_type.custom ~encode ~decode (to_rep spec)
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT internal_command_id, sequence_no, secondary_sequence_no, receiver_account_creation_fee_paid, receiver_balance
             FROM (blocks_internal_commands
               INNER JOIN blocks
diff --git a/src/app/genesis_ledger_from_tsv/dune b/src/app/genesis_ledger_from_tsv/dune
index 53d3e878dcc..08be45e1a30 100644
--- a/src/app/genesis_ledger_from_tsv/dune
+++ b/src/app/genesis_ledger_from_tsv/dune
@@ -7,6 +7,8 @@
    base.caml
    base
    core_kernel
+   stdio
+   async.async_command
    async
    core
    ;;local libraries
@@ -17,6 +19,7 @@
    currency
    consensus
    logger
+   
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/migrate-balances-table/dune b/src/app/migrate-balances-table/dune
index 6b7d24506d8..3dbc1875b5f 100644
--- a/src/app/migrate-balances-table/dune
+++ b/src/app/migrate-balances-table/dune
@@ -17,6 +17,7 @@
    async.async_command
    ;; local libraries
    logger
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/migrate-balances-table/migrate_balances_table.ml b/src/app/migrate-balances-table/migrate_balances_table.ml
index 76d0549c2ac..ea8f83f8412 100644
--- a/src/app/migrate-balances-table/migrate_balances_table.ml
+++ b/src/app/migrate-balances-table/migrate_balances_table.ml
@@ -14,7 +14,13 @@ let query_db pool ~f ~item =
 let main ~archive_uri () =
   let logger = Logger.create () in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/migrate-balances-table/sql.ml b/src/app/migrate-balances-table/sql.ml
index 4c0a8c86dd1..256f1f721f5 100644
--- a/src/app/migrate-balances-table/sql.ml
+++ b/src/app/migrate-balances-table/sql.ml
@@ -4,7 +4,7 @@ open Core_kernel
 
 let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        {sql| CREATE TABLE IF NOT EXISTS balances_temp
            ( id                           serial PRIMARY KEY
            , public_key_id                int    NOT NULL REFERENCES public_keys(id)
@@ -19,7 +19,7 @@ let create_temp_balances_table (module Conn : Caqti_async.CONNECTION) =
 
 let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_temp AS (SELECT * FROM %s)
                 |sql}
@@ -27,7 +27,7 @@ let copy_table_to_temp_table (module Conn : Caqti_async.CONNECTION) table =
 
 let create_table_index (module Conn : Caqti_async.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
@@ -39,7 +39,7 @@ let create_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
 let create_table_named_index (module Conn : Caqti_async.CONNECTION) table col
     name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE INDEX IF NOT EXISTS idx_%s_%s ON %s(%s)
                 |sql}
@@ -51,7 +51,7 @@ let create_temp_table_named_index (module Conn : Caqti_async.CONNECTION) table
 
 let drop_table_index (module Conn : Caqti_async.CONNECTION) table col =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP INDEX IF EXISTS idx_%s_%s
           |sql} table col ) )
 
@@ -60,7 +60,7 @@ let drop_temp_table_index (module Conn : Caqti_async.CONNECTION) table col =
 
 let create_cursor (module Conn : Caqti_async.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| CREATE TABLE IF NOT EXISTS %s_cursor
                       ( value int NOT NULL)
@@ -69,7 +69,7 @@ let create_cursor (module Conn : Caqti_async.CONNECTION) name =
 
 let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| INSERT INTO %s_cursor (value) VALUES (0)
                 |sql}
@@ -77,13 +77,13 @@ let initialize_cursor (module Conn : Caqti_async.CONNECTION) name =
 
 let current_cursor (module Conn : Caqti_async.CONNECTION) name =
   Conn.find_opt
-    (Caqti_request.find_opt Caqti_type.unit Caqti_type.int
+    (Mina_caqti.find_req_opt Caqti_type.unit Caqti_type.int
        (sprintf {sql| SELECT value FROM %s_cursor
                 |sql} name ) )
 
 let update_cursor (module Conn : Caqti_async.CONNECTION) name ndx =
   Conn.exec
-    (Caqti_request.exec Caqti_type.int
+    (Mina_caqti.exec_req Caqti_type.int
        (sprintf
           {sql| UPDATE %s_cursor SET value = $1
                 |sql}
@@ -99,7 +99,7 @@ let drop_foreign_key_constraint (module Conn : Caqti_async.CONNECTION) table
       |sql}
       table foreign_key
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
     table col foreign_key =
@@ -112,7 +112,7 @@ let add_balances_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
     table col foreign_key =
@@ -125,14 +125,14 @@ let add_blocks_foreign_key_constraint (module Conn : Caqti_async.CONNECTION)
       |sql}
       table foreign_key col
   in
-  Conn.exec (Caqti_request.exec Caqti_type.unit sql)
+  Conn.exec (Mina_caqti.exec_req Caqti_type.unit sql)
 
 let find_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find_opt
-    (Caqti_request.find_opt
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_req_opt
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| SELECT id
             FROM balances_temp
@@ -152,8 +152,8 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
     ~balance ~block_id ~block_height ~block_sequence_no
     ~block_secondary_sequence_no =
   Conn.find
-    (Caqti_request.find
-       Caqti_type.(tup3 int int64 (tup4 int int int int))
+    (Mina_caqti.find_req
+       Caqti_type.(t3 int int64 (t4 int int int int))
        Caqti_type.int
        {sql| INSERT INTO balances_temp
             ( public_key_id
@@ -178,8 +178,8 @@ let insert_balance_entry (module Conn : Caqti_async.CONNECTION) ~public_key_id
 
 let get_internal_commands (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup4 int int64 (tup4 int int int int) int)
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t4 int int64 (t4 int int int int) int)
        {sql| SELECT bal.public_key_id,bal.balance,bic.block_id,blocks.height,bic.sequence_no,bic.secondary_sequence_no,
             internal_command_id
             FROM blocks_internal_commands bic
@@ -193,8 +193,8 @@ let update_internal_command_receiver_balance
     (module Conn : Caqti_async.CONNECTION) ~new_balance_id ~block_id
     ~internal_command_id ~block_sequence_no ~block_secondary_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup4 int int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t4 int int int int))
        {sql| UPDATE blocks_internal_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND internal_command_id = $3
@@ -209,8 +209,8 @@ let update_internal_command_receiver_balance
 
 let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_fee_payer.public_key_id,bal_fee_payer.balance
              FROM blocks_user_commands buc
@@ -222,8 +222,8 @@ let get_user_command_fee_payers (module Conn : Caqti_async.CONNECTION) =
 
 let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_source.public_key_id,bal_source.balance
              FROM blocks_user_commands buc
@@ -236,8 +236,8 @@ let get_user_command_sources (module Conn : Caqti_async.CONNECTION) =
 
 let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
   Conn.collect_list
-    (Caqti_request.collect Caqti_type.unit
-       Caqti_type.(tup2 (tup4 int int int int) (tup2 int int64))
+    (Mina_caqti.collect_req Caqti_type.unit
+       Caqti_type.(t2 (t4 int int int int) (t2 int int64))
        {sql| SELECT buc.block_id,blocks.height,buc.sequence_no,user_command_id,
                     bal_receiver.public_key_id,bal_receiver.balance
              FROM blocks_user_commands buc
@@ -251,8 +251,8 @@ let get_user_command_receivers (module Conn : Caqti_async.CONNECTION) =
 let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET fee_payer_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -263,8 +263,8 @@ let update_user_command_fee_payer_balance (module Conn : Caqti_async.CONNECTION)
 let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET source_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -276,8 +276,8 @@ let update_user_command_source_balance (module Conn : Caqti_async.CONNECTION)
 let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
     ~new_balance_id ~block_id ~user_command_id ~block_sequence_no =
   Conn.exec
-    (Caqti_request.exec
-       Caqti_type.(tup2 int (tup3 int int int))
+    (Mina_caqti.exec_req
+       Caqti_type.(t2 int (t3 int int int))
        {sql| UPDATE blocks_user_commands_temp SET receiver_balance = $1
           WHERE block_id = $2
           AND user_command_id = $3
@@ -288,13 +288,13 @@ let update_user_command_receiver_balance (module Conn : Caqti_async.CONNECTION)
 
 let drop_table (module Conn : Caqti_async.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf {sql| DROP TABLE %s
                 |sql} table ) )
 
 let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
   Conn.exec
-    (Caqti_request.exec Caqti_type.unit
+    (Mina_caqti.exec_req Caqti_type.unit
        (sprintf
           {sql| ALTER TABLE %s_temp
                 RENAME TO %s
@@ -303,7 +303,7 @@ let rename_temp_table (module Conn : Caqti_async.CONNECTION) table =
 
 let get_column_count (module Conn : Caqti_async.CONNECTION) table =
   Conn.find
-    (Caqti_request.find Caqti_type.string Caqti_type.int
+    (Mina_caqti.find_req Caqti_type.string Caqti_type.int
        {sql| SELECT COUNT(*) FROM information_schema.columns
              WHERE table_name=$1
        |sql} )
diff --git a/src/app/missing_blocks_auditor/dune b/src/app/missing_blocks_auditor/dune
index 50342c21bfe..bfe7f22fc61 100644
--- a/src/app/missing_blocks_auditor/dune
+++ b/src/app/missing_blocks_auditor/dune
@@ -17,6 +17,7 @@
    async.async_command
    ;; local libraries
    logger
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
index 5bce995ea28..d2b54f36153 100644
--- a/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
+++ b/src/app/missing_blocks_auditor/missing_blocks_auditor.ml
@@ -22,7 +22,13 @@ let add_error, get_exit_code =
 let main ~archive_uri () =
   let logger = Logger.create () in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      archive_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/missing_blocks_auditor/sql.ml b/src/app/missing_blocks_auditor/sql.ml
index 3e2bf01e936..d8a47b926d1 100644
--- a/src/app/missing_blocks_auditor/sql.ml
+++ b/src/app/missing_blocks_auditor/sql.ml
@@ -4,8 +4,8 @@ module Unparented_blocks = struct
   (* parent_hashes represent ends of chains leading to an orphan block *)
 
   let query =
-    Caqti_request.collect Caqti_type.unit
-      Caqti_type.(tup4 int string int string)
+    Mina_caqti.collect_req Caqti_type.unit
+      Caqti_type.(t4 int string int string)
       {sql|
            SELECT id, state_hash, height, parent_hash FROM blocks
            WHERE parent_id IS NULL
@@ -16,7 +16,7 @@ end
 
 module Missing_blocks_gap = struct
   let query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT $1 - MAX(height) - 1 FROM blocks
             WHERE height < $1
       |sql}
@@ -26,7 +26,7 @@ end
 
 module Chain_status = struct
   let query_highest_canonical =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT max(height) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
@@ -35,7 +35,7 @@ module Chain_status = struct
     Conn.find query_highest_canonical ()
 
   let query_count_pending_below =
-    Caqti_request.find Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
       {sql| SELECT count(*) FROM blocks
             WHERE chain_status = 'pending'
             AND height <= ?
@@ -45,8 +45,8 @@ module Chain_status = struct
     Conn.find query_count_pending_below height
 
   let query_canonical_chain =
-    Caqti_request.collect Caqti_type.int64
-      Caqti_type.(tup3 int string string)
+    Mina_caqti.collect_req Caqti_type.int64
+      Caqti_type.(t3 int string string)
       {sql| WITH RECURSIVE chain AS (
 
                (SELECT id, state_hash, parent_id, chain_status
diff --git a/src/app/patch_archive_test/patch_archive_test.ml b/src/app/patch_archive_test/patch_archive_test.ml
index 1fbc9e3104b..017b6574fc2 100644
--- a/src/app/patch_archive_test/patch_archive_test.ml
+++ b/src/app/patch_archive_test/patch_archive_test.ml
@@ -124,7 +124,13 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
   let copy_uri = make_archive_copy_uri archive_uri in
   [%log info] "Connecting to original database" ;
   let%bind () =
-    match Caqti_async.connect_pool ~max_size:128 archive_uri with
+    match
+      Caqti_async.connect_pool
+        ~pool_config:
+          Caqti_pool_config.(
+            merge_left (default_from_env ()) (create ~max_size:128 ()))
+        archive_uri
+    with
     | Error e ->
         [%log fatal]
           ~metadata:[ ("error", `String (Caqti_error.show e)) ]
@@ -159,7 +165,13 @@ let main ~archive_uri ~num_blocks_to_patch ~archive_blocks_path
         ()
   in
   [%log info] "Connecting to copied database" ;
-  match Caqti_async.connect_pool ~max_size:128 copy_uri with
+  match
+    Caqti_async.connect_pool
+      ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:128 ()))
+      copy_uri
+  with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/replayer/dune b/src/app/replayer/dune
index 17fe0e2ac25..e0bfc97a3bf 100644
--- a/src/app/replayer/dune
+++ b/src/app/replayer/dune
@@ -43,6 +43,7 @@
    pickles
    sgn
    unsigned_extended
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/replayer/replayer.ml b/src/app/replayer/replayer.ml
index de910476a61..ae6250def1f 100644
--- a/src/app/replayer/replayer.ml
+++ b/src/app/replayer/replayer.ml
@@ -987,7 +987,11 @@ let main ~input_file ~output_file_opt ~archive_uri ~set_nonces ~repair_nonces
              msg )
   in
   let archive_uri = Uri.of_string archive_uri in
-  match Caqti_async.connect_pool ~max_size:128 archive_uri with
+  let pool_config =
+    Caqti_pool_config.(
+      merge_left (default_from_env ()) (create ~max_size:128 ()))
+  in
+  match Caqti_async.connect_pool ~pool_config archive_uri with
   | Error e ->
       [%log fatal]
         ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/replayer/sql.ml b/src/app/replayer/sql.ml
index a169227d315..024f887c84b 100644
--- a/src/app/replayer/sql.ml
+++ b/src/app/replayer/sql.ml
@@ -20,8 +20,8 @@ module Block_info = struct
 
   (* find all blocks above the start slot, working back from block with given state hash *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int64)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int64)
       typ
       {sql| WITH RECURSIVE chain AS (
 
@@ -78,7 +78,7 @@ let find_command_ids_query s =
 
 module Block = struct
   let state_hash_query =
-    Caqti_request.find Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req Caqti_type.int Caqti_type.string
       {sql| SELECT state_hash FROM blocks
             WHERE id = ?
       |sql}
@@ -87,21 +87,21 @@ module Block = struct
     Conn.find state_hash_query id
 
   let get_height_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int64
       {sql| SELECT height FROM blocks WHERE id = $1 |sql}
 
   let get_height (module Conn : Caqti_async.CONNECTION) ~block_id =
     Conn.find get_height_query block_id
 
   let max_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks |sql}
 
   let get_max_slot (module Conn : Caqti_async.CONNECTION) () =
     Conn.find max_slot_query ()
 
   let max_canonical_slot_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int64
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
       {sql| SELECT MAX(global_slot_since_genesis) FROM blocks
             WHERE chain_status = 'canonical'
       |sql}
@@ -110,7 +110,7 @@ module Block = struct
     Conn.find max_canonical_slot_query ()
 
   let next_slot_query =
-    Caqti_request.find_opt Caqti_type.int64 Caqti_type.int64
+    Mina_caqti.find_req_opt Caqti_type.int64 Caqti_type.int64
       {sql| SELECT global_slot_since_genesis FROM blocks
             WHERE global_slot_since_genesis >= $1
             AND chain_status <> 'orphaned'
@@ -122,7 +122,7 @@ module Block = struct
     Conn.find_opt next_slot_query slot
 
   let parent_block_id_query =
-    Caqti_request.find Caqti_type.int Caqti_type.int
+    Mina_caqti.find_req Caqti_type.int Caqti_type.int
       {sql| SELECT parent_id FROM blocks
             WHERE id = $1
       |sql}
@@ -131,7 +131,7 @@ module Block = struct
     Conn.find parent_block_id_query id
 
   let genesis_block_id_query =
-    Caqti_request.find Caqti_type.unit Caqti_type.int
+    Mina_caqti.find_req Caqti_type.unit Caqti_type.int
       {sql| SELECT id FROM blocks
             WHERE global_slot_since_genesis = 0
             AND chain_status = 'canonical'
@@ -141,7 +141,7 @@ module Block = struct
     Conn.find genesis_block_id_query ()
 
   let state_hashes_by_slot_query =
-    Caqti_request.collect Caqti_type.int64 Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.int64 Caqti_type.string
       {sql| SELECT state_hash FROM blocks WHERE global_slot_since_genesis = $1 |sql}
 
   let get_state_hashes_by_slot (module Conn : Caqti_async.CONNECTION) slot =
@@ -149,7 +149,7 @@ module Block = struct
 
   (* find all blocks, working back from block with given state hash *)
   let chain_query =
-    Caqti_request.collect Caqti_type.string Caqti_type.string
+    Mina_caqti.collect_req Caqti_type.string Caqti_type.string
       {sql| WITH RECURSIVE chain AS (
 
               SELECT id,parent_id FROM blocks b WHERE b.state_hash = ?
@@ -173,7 +173,7 @@ end
 
 module User_command_ids = struct
   let query =
-    Caqti_request.collect Caqti_type.string Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.string Caqti_type.int
       (find_command_ids_query "user")
 
   let run (module Conn : Caqti_async.CONNECTION) ~state_hash =
@@ -238,7 +238,7 @@ module User_command = struct
     Caqti_type.custom ~encode ~decode (to_rep spec)
 
   let query =
-    Caqti_request.collect Caqti_type.int typ
+    Mina_caqti.collect_req Caqti_type.int typ
       {sql| SELECT type,fee_payer_id, source_id,receiver_id,fee,fee_token,token,amount,valid_until,memo,nonce,
                    blocks.id,blocks.height,blocks.global_slot_since_genesis,parent.global_slot_since_genesis,
                    sequence_no,status,created_token,
@@ -266,7 +266,7 @@ end
 
 module Internal_command_ids = struct
   let query =
-    Caqti_request.collect Caqti_type.string Caqti_type.int
+    Mina_caqti.collect_req Caqti_type.string Caqti_type.int
       (find_command_ids_query "internal")
 
   let run (module Conn : Caqti_async.CONNECTION) ~state_hash =
@@ -318,8 +318,8 @@ module Internal_command = struct
      filter internal commands by global slot, because they can be used many times
   *)
   let query =
-    Caqti_request.collect
-      Caqti_type.(tup2 int64 int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 int64 int)
       typ
       {sql| SELECT type,receiver_id,receiver_balance,fee,token,
               b.id,b.height,b.global_slot_since_genesis,parent.global_slot_since_genesis,
@@ -350,7 +350,7 @@ end
 
 module Public_key = struct
   let query =
-    Caqti_request.find_opt Caqti_type.int Caqti_type.string
+    Mina_caqti.find_req_opt Caqti_type.int Caqti_type.string
       {sql| SELECT value FROM public_keys
             WHERE id = ?
       |sql}
@@ -367,11 +367,11 @@ module Epoch_data = struct
     let decode (epoch_ledger_hash, epoch_data_seed) =
       Ok { epoch_ledger_hash; epoch_data_seed }
     in
-    let rep = Caqti_type.(tup2 string string) in
+    let rep = Caqti_type.(t2 string string) in
     Caqti_type.custom ~encode ~decode rep
 
   let query_epoch_data =
-    Caqti_request.find Caqti_type.int epoch_data_typ
+    Mina_caqti.find_req Caqti_type.int epoch_data_typ
       {sql| SELECT slh.value, ed.seed FROM snarked_ledger_hashes AS slh
 
        INNER JOIN
@@ -388,7 +388,7 @@ module Epoch_data = struct
     Conn.find query_epoch_data epoch_ledger_id
 
   let query_staking_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT staking_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
@@ -400,7 +400,7 @@ module Epoch_data = struct
     Conn.find query_staking_epoch_data_id state_hash
 
   let query_next_epoch_data_id =
-    Caqti_request.find Caqti_type.string Caqti_type.int
+    Mina_caqti.find_req Caqti_type.string Caqti_type.int
       {sql| SELECT next_epoch_data_id FROM blocks
 
             WHERE state_hash = ?
@@ -413,7 +413,7 @@ end
 module Parent_block = struct
   (* fork block is parent of block with the given state hash *)
   let query_parent_state_hash =
-    Caqti_request.find Caqti_type.string Caqti_type.string
+    Mina_caqti.find_req Caqti_type.string Caqti_type.string
       {sql| SELECT parent.state_hash FROM blocks AS parent
 
             INNER JOIN
@@ -430,8 +430,8 @@ end
 
 module Balances = struct
   let query_insert_nonce =
-    Caqti_request.exec
-      Caqti_type.(tup2 int int64)
+    Mina_caqti.exec_req
+      Caqti_type.(t2 int int64)
       {sql| UPDATE balances
             SET nonce = $2
             WHERE id = $1
diff --git a/src/app/rosetta/lib/account.ml b/src/app/rosetta/lib/account.ml
index 4758b1e03b0..606e77bc03b 100644
--- a/src/app/rosetta/lib/account.ml
+++ b/src/app/rosetta/lib/account.ml
@@ -36,9 +36,9 @@ module Sql = struct
       Int.pow 2 Genesis_constants.Constraint_constants.compiled.transaction_capacity_log_2
 
     let query_pending =
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
-        Caqti_type.(tup4 int64 int64 int64 (option int64))
+      Mina_caqti.find_req_opt
+        Caqti_type.(t2 string int64)
+        Caqti_type.(t4 int64 int64 int64 (option int64))
         (sprintf
         {sql|
 SELECT DISTINCT
@@ -156,9 +156,9 @@ AS combo GROUP BY combo.pk_id
 |sql} max_txns)
 
     let query_pending_fallback =
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
-        Caqti_type.(tup4 int64 int64 int64 (option int64))
+      Mina_caqti.find_req_opt
+        Caqti_type.(t2 string int64)
+        Caqti_type.(t4 int64 int64 int64 (option int64))
         {sql|
 /* In this query, we are recursively traversing the chain (up to the point of canonicity) to a specific height and then, subject to this height at most, (a) finding the balance of some account and (b) finding the nonce in the most recent user command that this account has sent. Then these two subqueries are combined into one row. */
 
@@ -275,9 +275,9 @@ AS combo GROUP BY combo.pk_id
 |sql}
 
     let query_canonical =
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
-        Caqti_type.(tup4 int64 int64 int64 (option int64))
+      Mina_caqti.find_req_opt
+        Caqti_type.(t2 string int64)
+        Caqti_type.(t4 int64 int64 int64 (option int64))
         (sprintf
         {sql|
 SELECT DISTINCT
@@ -326,9 +326,9 @@ AS combo GROUP BY combo.pk_id
 |sql} max_txns)
 
     let query_canonical_fallback =
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
-        Caqti_type.(tup3 int64 int64 (option int64))
+      Mina_caqti.find_req_opt
+        Caqti_type.(t2 string int64)
+        Caqti_type.(t3 int64 int64 (option int64))
         {sql| /* See comments on the above query to help understand this one.
                * Since this query acts on only canonical blocks, we can skip the
                * recursive traversal part. */
diff --git a/src/app/rosetta/lib/block.ml b/src/app/rosetta/lib/block.ml
index ce1856d3998..fcbbd6ea3ac 100644
--- a/src/app/rosetta/lib/block.ml
+++ b/src/app/rosetta/lib/block.ml
@@ -251,20 +251,20 @@ module Sql = struct
 
       let winner (_, winner) = `Pk winner
 
-      let typ = Caqti_type.(tup2 string string)
+      let typ = Caqti_type.(t2 string string)
     end
 
-    let typ = Caqti_type.(tup3 int Archive_lib.Processor.Block.typ Extras.typ)
+    let typ = Caqti_type.(t3 int Archive_lib.Processor.Block.typ Extras.typ)
 
     let query_count_canonical_at_height =
-      Caqti_request.find Caqti_type.int64 Caqti_type.int64
+      Mina_caqti.find_req Caqti_type.int64 Caqti_type.int64
         {sql| SELECT COUNT(*) FROM blocks
               WHERE height = ?
               AND chain_status = 'canonical'
         |sql}
 
     let query_height_canonical =
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_req_opt Caqti_type.int64 typ
         (* The archive database will only reconcile the canonical columns for
          * blocks older than k + epsilon
          *)
@@ -279,7 +279,7 @@ SELECT c.id, c.state_hash, c.parent_id, c.parent_hash, c.creator_id, c.block_win
 
 
     let query_height_pending =
-      Caqti_request.find_opt Caqti_type.int64 typ
+      Mina_caqti.find_req_opt Caqti_type.int64 typ
         (* According to the clarification of the Rosetta spec here
          * https://community.rosetta-api.org/t/querying-block-by-just-its-index/84/3 ,
          * it is important to select only the block on the canonical chain for a
@@ -312,7 +312,7 @@ WITH RECURSIVE chain AS (
       |}
 
     let query_hash =
-      Caqti_request.find_opt Caqti_type.string typ
+      Mina_caqti.find_req_opt Caqti_type.string typ
         {| SELECT b.id, b.state_hash, b.parent_id, b.parent_hash, b.creator_id, b.block_winner_id, b.snarked_ledger_hash_id, b.staking_epoch_data_id, b.next_epoch_data_id, b.ledger_hash, b.height, b.global_slot, b.global_slot_since_genesis, b.timestamp, b.chain_status, pk.value as creator, bw.value as winner FROM blocks b
         INNER JOIN public_keys pk
         ON pk.id = b.creator_id
@@ -321,8 +321,8 @@ WITH RECURSIVE chain AS (
         WHERE b.state_hash = ? |}
 
     let query_both =
-      Caqti_request.find_opt
-        Caqti_type.(tup2 string int64)
+      Mina_caqti.find_req_opt
+        Caqti_type.(t2 string int64)
         typ
         {| SELECT b.id, b.state_hash, b.parent_id, b.parent_hash, b.creator_id, b.block_winner_id, b.snarked_ledger_hash_id, b.staking_epoch_data_id, b.next_epoch_data_id, b.ledger_hash, b.height, b.global_slot, b.global_slot_since_genesis, b.timestamp, b.chain_status, pk.value as creator, bw.value as winner FROM blocks b
         INNER JOIN public_keys pk
@@ -332,7 +332,7 @@ WITH RECURSIVE chain AS (
         WHERE b.state_hash = ? AND b.height = ? |}
 
     let query_by_id =
-      Caqti_request.find_opt Caqti_type.int typ
+      Mina_caqti.find_req_opt Caqti_type.int typ
         {| SELECT b.id, b.state_hash, b.parent_id, b.parent_hash, b.creator_id, b.block_winner_id, b.snarked_ledger_hash_id, b.staking_epoch_data_id, b.next_epoch_data_id, b.ledger_hash, b.height, b.global_slot, b.global_slot_since_genesis, b.timestamp, b.chain_status, pk.value as creator, bw.value as winner FROM blocks b
         INNER JOIN public_keys pk
         ON pk.id = b.creator_id
@@ -341,7 +341,7 @@ WITH RECURSIVE chain AS (
         WHERE b.id = ? |}
 
     let query_best =
-      Caqti_request.find_opt Caqti_type.unit typ
+      Mina_caqti.find_req_opt Caqti_type.unit typ
         {| SELECT b.id, b.state_hash, b.parent_id, b.parent_hash, b.creator_id, b.block_winner_id, b.snarked_ledger_hash_id, b.staking_epoch_data_id, b.next_epoch_data_id, b.ledger_hash, b.height, b.global_slot, b.global_slot_since_genesis, b.timestamp, b.chain_status, pk.value as creator, bw.value as winner FROM blocks b
            INNER JOIN public_keys pk
            ON pk.id = b.creator_id
@@ -369,7 +369,7 @@ WITH RECURSIVE chain AS (
           Conn.find_opt query_height_canonical h
         else
           let%bind max_height = Conn.find
-              (Caqti_request.find Caqti_type.unit Caqti_type.int64
+              (Mina_caqti.find_req Caqti_type.unit Caqti_type.int64
                  {sql| SELECT MAX(height) FROM blocks |sql}) ()
           in
           let max_queryable_height = Int64.(-) max_height Network.Sql.max_height_delta in
@@ -438,11 +438,11 @@ WITH RECURSIVE chain AS (
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.User_command.Signed_command.typ
+        t3 int Archive_lib.Processor.User_command.Signed_command.typ
           Extras.typ)
 
     let query =
-      Caqti_request.collect Caqti_type.int typ
+      Mina_caqti.collect_req Caqti_type.int typ
         {| SELECT u.id, u.type, u.fee_payer_id, u.source_id, u.receiver_id, u.fee_token, u.token, u.nonce, u.amount, u.fee,
         u.valid_until, u.memo, u.hash,
         pk1.value as fee_payer, pk2.value as source, pk3.value as receiver,
@@ -470,15 +470,15 @@ WITH RECURSIVE chain AS (
       let sequence_no (_,_,seq_no,_) = seq_no
       let secondary_sequence_no (_,_,_,secondary_seq_no) = secondary_seq_no
 
-      let typ = Caqti_type.(tup4 (option int64) string int int)
+      let typ = Caqti_type.(t4 (option int64) string int int)
     end
 
     let typ =
       Caqti_type.(
-        tup3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
+        t3 int Archive_lib.Processor.Internal_command.typ Extras.typ)
 
     let query =
-      Caqti_request.collect Caqti_type.int typ
+      Mina_caqti.collect_req Caqti_type.int typ
         {| SELECT DISTINCT ON (i.hash,i.type,bic.sequence_no,bic.secondary_sequence_no) i.id, i.type, i.receiver_id, i.fee, i.token, i.hash,
             bic.receiver_account_creation_fee_paid, pk.value as receiver,
             bic.sequence_no, bic.secondary_sequence_no
diff --git a/src/app/rosetta/lib/construction.ml b/src/app/rosetta/lib/construction.ml
index 459893ef673..d3d63f4ea1a 100644
--- a/src/app/rosetta/lib/construction.ml
+++ b/src/app/rosetta/lib/construction.ml
@@ -848,7 +848,7 @@ module Submit = struct
         Caqti_type.custom ~encode ~decode (to_rep spec)
 
       let query =
-        Caqti_request.find_opt
+        Mina_caqti.find_req_opt
           typ
           Caqti_type.string
           {sql| SELECT uc.id FROM user_commands uc
diff --git a/src/app/rosetta/lib/dune b/src/app/rosetta/lib/dune
index f6483ffc655..dafe3880287 100644
--- a/src/app/rosetta/lib/dune
+++ b/src/app/rosetta/lib/dune
@@ -45,6 +45,7 @@
    mina_numbers
    zexe_backend.pasta
    logproc_lib
+   mina_caqti
  )
  (preprocessor_deps ../../../config.mlh ../../../graphql-ppx-config.inc ../../../../graphql_schema.json)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/rosetta/lib/network.ml b/src/app/rosetta/lib/network.ml
index b4f80f4fc3a..9ee2eb2f8bf 100644
--- a/src/app/rosetta/lib/network.ml
+++ b/src/app/rosetta/lib/network.ml
@@ -39,8 +39,8 @@ let genesis_block_height = Int64.one
 
 module Sql = struct
   let oldest_block_query =
-    Caqti_request.find Caqti_type.unit
-      Caqti_type.(tup2 int64 string)
+    Mina_caqti.find_req Caqti_type.unit
+      Caqti_type.(t2 int64 string)
       "SELECT height, state_hash FROM blocks ORDER BY timestamp ASC, state_hash ASC LIMIT 1"
 
   let max_height_delta =
@@ -49,9 +49,9 @@ module Sql = struct
     | None -> 0L
 
   let latest_block_query =
-    Caqti_request.find
+    Mina_caqti.find_req
       Caqti_type.unit
-      Caqti_type.(tup3 int64 string int64)
+      Caqti_type.(t3 int64 string int64)
       (sprintf {sql| SELECT height, state_hash, timestamp FROM blocks b
                      WHERE height = (select MAX(height) - %Ld FROM blocks)
                      ORDER BY timestamp ASC, state_hash ASC
diff --git a/src/app/rosetta/lib/pg_data.ml b/src/app/rosetta/lib/pg_data.ml
index 1820c897892..e47be520040 100644
--- a/src/app/rosetta/lib/pg_data.ml
+++ b/src/app/rosetta/lib/pg_data.ml
@@ -2,7 +2,7 @@
 
 
 let query_connection_count =
-      Caqti_request.find
+      Mina_caqti.find_req
         Caqti_type.unit
         Caqti_type.int64
         {sql| SELECT count(*) FROM pg_stat_activity
@@ -13,7 +13,7 @@ let run_connection_count (module Conn : Caqti_async.CONNECTION) =
   Conn.find query_connection_count
 
 let query_lock_count =
-      Caqti_request.find
+      Mina_caqti.find_req
         Caqti_type.unit
         Caqti_type.int64
         {sql| SELECT count(*) FROM pg_locks
diff --git a/src/app/rosetta/lib/rosetta.ml b/src/app/rosetta/lib/rosetta.ml
index c116feeb26e..fe9b25e0fd3 100644
--- a/src/app/rosetta/lib/rosetta.ml
+++ b/src/app/rosetta/lib/rosetta.ml
@@ -176,7 +176,10 @@ let command =
               "MINA_ROSETTA_MAX_DB_POOL_SIZE not set or invalid. Please set \
                this to a number (try 64 or 128)"
         in
-        match Caqti_async.connect_pool ~max_size:max_pool_size archive_uri with
+        match Caqti_async.connect_pool       ~pool_config:
+        Caqti_pool_config.(
+          merge_left (default_from_env ()) (create ~max_size:max_pool_size ()))
+ archive_uri with
         | Error e ->
             [%log error]
               ~metadata:[ ("error", `String (Caqti_error.show e)) ]
diff --git a/src/app/swap_bad_balances/dune b/src/app/swap_bad_balances/dune
index 6255c7b3245..4bddd9ddc16 100644
--- a/src/app/swap_bad_balances/dune
+++ b/src/app/swap_bad_balances/dune
@@ -20,6 +20,7 @@
    ;; local libraries
    currency
    logger
+   mina_caqti
  )
  (preprocessor_deps ../../config.mlh)
  (instrumentation (backend bisect_ppx))
diff --git a/src/app/swap_bad_balances/sql.ml b/src/app/swap_bad_balances/sql.ml
index 82ec136a101..a67d07e2701 100644
--- a/src/app/swap_bad_balances/sql.ml
+++ b/src/app/swap_bad_balances/sql.ml
@@ -5,8 +5,8 @@ open Async
 module Receiver_balances = struct
   (* find receiver balances for combined fee transfer *)
   let query_ids_from_fee_transfer =
-    Caqti_request.collect
-      Caqti_type.(tup2 string int)
+    Mina_caqti.collect_req
+      Caqti_type.(t2 string int)
       Caqti_type.(int)
       {sql| SELECT bic.receiver_balance
             FROM blocks_internal_commands bic
@@ -25,8 +25,8 @@ module Receiver_balances = struct
     (* if duplicates, any is acceptable *)
     match%bind
       Conn.find_opt
-        (Caqti_request.find_opt
-           Caqti_type.(tup2 int int64)
+        (Mina_caqti.find_req_opt
+           Caqti_type.(t2 int int64)
            Caqti_type.int
            {sql| SELECT id
                           FROM balances
@@ -40,8 +40,8 @@ module Receiver_balances = struct
         return id
     | None ->
         Conn.find
-          (Caqti_request.find
-             Caqti_type.(tup2 int int64)
+          (Mina_caqti.find_req
+             Caqti_type.(t2 int int64)
              Caqti_type.int
              "INSERT INTO balances (public_key_id,balance) VALUES ($1,$2) \
               RETURNING id" )
@@ -49,9 +49,9 @@ module Receiver_balances = struct
 
   let load (module Conn : Caqti_async.CONNECTION) id =
     Conn.find
-      (Caqti_request.find
+      (Mina_caqti.find_req
          Caqti_type.(int)
-         Caqti_type.(tup2 int int64)
+         Caqti_type.(t2 int int64)
          {sql| SELECT public_key_id,balance
             FROM balances
             WHERE id = $1
@@ -59,8 +59,8 @@ module Receiver_balances = struct
       id
 
   let query_swap_in_new_balance =
-    Caqti_request.exec
-      Caqti_type.(tup4 string int int int)
+    Mina_caqti.exec_req
+      Caqti_type.(t4 string int int int)
       {sql| UPDATE blocks_internal_commands bic SET receiver_balance = $4
             FROM blocks b
             WHERE b.id = bic.block_id
diff --git a/src/lib/mina_caqti/dune b/src/lib/mina_caqti/dune
new file mode 100644
index 00000000000..246538c3fa0
--- /dev/null
+++ b/src/lib/mina_caqti/dune
@@ -0,0 +1,18 @@
+(library
+ (name mina_caqti)
+ (public_name mina_caqti)
+ (inline_tests (flags -verbose -show-counts))
+ (libraries
+   ;; opam libraries
+   core_kernel
+   async
+   caqti-async
+   caqti
+   async_kernel
+   ;; local libraries
+   mina_base
+   )
+ (preprocess
+  (pps ppx_coda ppx_version ppx_jane ppx_custom_printf h_list.ppx))
+ (instrumentation (backend bisect_ppx))
+ (synopsis "Helpers for the Caqti database bindings"))
diff --git a/src/lib/mina_caqti/mina_caqti.ml b/src/lib/mina_caqti/mina_caqti.ml
new file mode 100644
index 00000000000..d4ed1c436bb
--- /dev/null
+++ b/src/lib/mina_caqti/mina_caqti.ml
@@ -0,0 +1,9 @@
+(* mina_caqti.ml -- Mina helpers for the Caqti database bindings *)
+
+let find_req t u s = Caqti_request.Infix.(t ->! u) s
+
+let find_req_opt t u s = Caqti_request.Infix.(t ->? u) s
+
+let collect_req t u s = Caqti_request.Infix.(t ->* u) s
+
+let exec_req t s = Caqti_request.Infix.(t ->. Caqti_type.unit) s
diff --git a/src/mina_caqti.opam b/src/mina_caqti.opam
new file mode 100644
index 00000000000..3f309a68f5b
--- /dev/null
+++ b/src/mina_caqti.opam
@@ -0,0 +1,6 @@
+opam-version: "1.2"
+version: "0.1"
+build: [
+  ["dune" "build" "--only" "src" "--root" "." "-j" jobs "@install"]
+]
+
