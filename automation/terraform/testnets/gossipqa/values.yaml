# helm install gossipqa-prom prometheus-community/prometheus -f automation/terraform/testnets/gossipqa/values.yaml
# helm uninstall gossipqa-prom

# rbac:
#   # If true, create & use RBAC resources
#   #
#   create: true
#   rules:
#     cluster:
#      - apiGroups:
#          - ""
#        resources:
#          - gossipqa
#          - gossipqa-prometheus
#        verbs:
#          - get
#          - list
#          - watch
#          - patch
#          - update

## Define serviceAccount names for components. Defaults to component's fully qualified name.
##
# serviceAccounts:
#   alertmanager:
#     create: false
#   nodeExporter:
#     create: false
#   pushgateway:
#     create: false
#   server:
#     create: true
#     # name:
#     # annotations: {}

# nodeExporter:
#   ## If false, node-exporter will not be installed
#   ##
#   enabled: false

# alertmanager:
#   ## If false, alertmanager will not be installed
#   ##
#   enabled: false

# server:
#   ## Prometheus server container name
#   ##
#   enabled: true

#   ## Use a ClusterRole (and ClusterRoleBinding)
#   ## - If set to false - we define a RoleBinding in the defined namespaces ONLY
#   ## NB: because we need a Role with nonResourceURL's ("/metrics") - you must get someone with Cluster-admin privileges to define this role for you, before running with this setting enabled.
#   ##     This makes prometheus work - for users who do not have ClusterAdmin privs, but wants prometheus to operate on their own namespaces, instead of clusterwide.
#   ##
#   ## You MUST also set namespaces to the ones you have access to and want monitored by Prometheus.
#   ##
#   # useExistingClusterRoleName: false

#   ## namespaces to monitor (instead of monitoring all - clusterwide). Needed if you want to run without Cluster-admin privileges.
#   namespaces:
#     - gossipqa

serviceAccounts:
  alertmanager:
    create: false
  nodeExporter:
    create: false
  pushgateway:
    create: false
  server:
    create: true

nodeExporter:
  enabled: false

alertmanager:
  enabled: false

pushgateway:
  enabled: false

kubeStateMetrics:
  enabled: false

forceNamespace: gossipqa-metrics

server:
  enabled: true
  retention: "365d"
  persistentVolume:
    existingClaim: "gossipqa-prom-pvc"
    # size: 1000Gi
    # storageClass: ssd-retain
    