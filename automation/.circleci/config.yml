# ---
# version: 2.1
# jobs:
#     terraform:
#         docker:
#           - image: codaprotocol/coda-automation:manual
#             environment:
#                 TESTNET: smoke_test
#         steps:
#             - checkout
#             - run:
#                 name: terraform init
#                 command: cd terraform/testnets/testnet-smoke-test && terraform init
#             - run:
#                 name: terraform refresh
#                 command: cd terraform/testnets/testnet-smoke-test && terraform refresh
#             - run:
#                 name: terraform destroy -auto-approve
#                 command: cd terraform/testnets/testnet-smoke-test && terraform destroy -auto-approve
#             - run:
#                 name: terraform plan
#                 command: cd terraform/testnets/testnet-smoke-test && terraform plan
#             - run:
#                 name: terraform apply -auto-approve
#                 command: cd terraform/testnets/testnet-smoke-test && terraform apply -auto-approve
#             - run:
#                 name: Apply Failed - Destroy
#                 command: cd terraform/testnets/testnet-smoke-test && terraform destroy -auto-approve
#                 when: on_fail
#     ansible:
#         docker:
#           - image: codaprotocol/coda-automation:manual
#             environment:
#                 TESTNET: smoke_test
#         steps:
#             - checkout
#             - run:
#                 name: ssh config
#                 command: |
#                     mkdir -p ~/.ssh
#                     echo -e "$TESTNETPEM" > ~/.ssh/id_rsa
#                     chmod 0600 ~/.ssh/id_rsa
#                     echo -e "Host *.amazonaws.com\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n  User admin" > ~/.ssh/config
#             - run:
#                 name: instances2inventory
#                 command: cd scripts && ./instances2inventory.py smoke-test
#             - run:
#                 name: ansible init
#                 command: cd ansible && ./play coda-init.yaml
#             - run:
#                 name: ansible start
#                 command: cd ansible && ./play coda-start-all.yaml
#             - run:
#                 name: Wait 5 min for network to actually do something
#                 command: sleep 300
#                 no_output_timeout: 30m
#             - run:
#                 name: ansible monit (starts joiners)
#                 command: cd ansible && ./play coda-monit.yaml
#     check-status:
#         docker:
#           - image: codaprotocol/coda-automation:manual
#             environment:
#               TESTNET: smoke_test
#         steps:
#             - checkout
#             - run:
#                 name: ssh config
#                 command: |
#                     echo -e "$TESTNETPEM" > ~/.ssh/id_rsa
#                     chmod 0600 ~/.ssh/id_rsa
#                     echo -e "Host *.amazonaws.com\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n  User admin" > ~/.ssh/config
#             - run:
#                 name: mina client status
#                 command: cd ansible && ./adhoc tag_testnet_smoke_test "hostname; mina client status"
#             - run:
#                 name: New block test
#                 command: cd ansible && ./adhoc tag_testnet_smoke_test "hostname; ./scripts/test-new-blocks.sh"
#                 no_output_timeout: 30m

#             # FIXME: make a txn, make sure it succeeds.

#             - run:
#                 name: Tail Logs
#                 command: cd ansible && ./adhoc tag_testnet_smoke_test "hostname; tail -n 100 test-coda/mina.log"
#                 when: on_fail
#             - run:
#                 name: Tests Failed - destroy
#                 command: cd terraform/testnets/testnet-smoke-test && terraform destroy -auto-approve
#                 when: on_fail
#     destroy:
#         docker:
#           - image: codaprotocol/coda-automation:manual
#             environment:
#               TESTNET: smoke_test
#         steps:
#             - checkout
#             - run:
#                 name: ssh config
#                 command: |
#                     echo -e "$TESTNETPEM" > ~/.ssh/id_rsa
#                     chmod 0600 ~/.ssh/id_rsa
#                     echo -e "Host *.amazonaws.com\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n  User admin" > ~/.ssh/config
#             - run:
#                 name: mina client status
#                 command: cd ansible && ./adhoc tag_testnet_smoke_test "hostname; mina client status"
#             - run:
#                 name: Tail Logs
#                 command: cd ansible && ./adhoc tag_testnet_smoke_test "hostname; tail -n 100 test-coda/mina.log"
#                 when: always
#             - run:
#                 name: terraform init
#                 command: cd terraform/testnets/testnet-smoke-test && terraform init
#                 when: always
#             - run:
#                 name: terraform refresh
#                 command: cd terraform/testnets/testnet-smoke-test && terraform refresh
#                 when: always
#             - run:
#                 name: terraform destroy
#                 command: cd terraform/testnets/testnet-smoke-test && terraform destroy -auto-approve
#                 when: always
    
#     graphql-proxy: 
#         docker: 
#           - image: codaprotocol/coda:toolchain-54430467ba429af285ea937d1c1da7d4b4cbde3e
#         steps: 
#             - checkout
#             - setup_remote_docker
#             - run:
#                 name: Make Sure The Image Builds
#                 command: |
#                     source ./services/graphql-public-proxy/version
#                     ./scripts/release-docker.sh -s graphql-public-proxy -v $VERSION --no-upload
#             - run: 
#                 name: Build and Release Docker Image
#                 command: |
#                     if [[ "$CIRCLE_BRANCH" == "master" ]]; then
#                         source ./services/graphql-public-proxy/version
#                         echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
#                         ./scripts/release-docker.sh -s graphql-public-proxy -v $VERSION
#                     else
#                         echo "Feature branch, not releasing!"
#                     fi
    
#     daemon: 
#         docker: 
#           - image: codaprotocol/coda:toolchain-54430467ba429af285ea937d1c1da7d4b4cbde3e
#         steps: 
#             - checkout
#             - setup_remote_docker
#             - run:
#                 name: Make Sure The Image Builds
#                 command: |
#                     source ./services/daemon/version
#                     ./scripts/release-docker.sh -s daemon -v $VERSION --extra-args "--build-arg base_image_tag=$BASE_IMAGE_TAG" --no-upload 
#             - run: 
#                 name: Build and Release Docker Image
#                 command: |
#                     if [[ "$CIRCLE_BRANCH" == "master" ]]; then
#                         source ./services/daemon/version
#                         echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
#                         ./scripts/release-docker.sh -s daemon -v $VERSION --extra-args "--build-arg base_image_tag=$BASE_IMAGE_TAG"
#                     else
#                         echo "Feature branch, not releasing!"
#                     fi
    
#     prometheus: 
#         docker: 
#           - image: codaprotocol/coda:toolchain-54430467ba429af285ea937d1c1da7d4b4cbde3e
#         steps: 
#             - checkout
#             - setup_remote_docker
#             - run:
#                 name: Make Sure The Image Builds
#                 command: |
#                     source ./services/prometheus/version
#                     ./scripts/release-docker.sh -s prometheus -v $VERSION --extra-args "--build-arg base_image_tag=$BASE_IMAGE_TAG" --no-upload 
#             - run: 
#                 name: Build and Release Docker Image
#                 command: |
#                     if [[ "$CIRCLE_BRANCH" == "master" ]]; then
#                         source ./services/prometheus/version
#                         echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
#                         ./scripts/release-docker.sh -s prometheus -v $VERSION --extra-args "--build-arg base_image_tag=$BASE_IMAGE_TAG"
#                     else
#                         echo "Feature branch, not releasing!"
#                     fi

# workflows:
#     version: 2
#     ci: 
#         jobs: 
#             - daemon
#             - graphql-proxy
#             - prometheus
#     smoke-test-auto:
#         jobs:
#             - terraform
#             - ansible:
#                 requires:
#                     - terraform
#             - check-status:
#                 requires:
#                     - ansible
#         triggers:
#           - schedule:
#               cron: "0 14 * * *" # 14 UTC 7am PT
#               filters:
#                 branches:
#                   only:
#                    - master

#     smoke-test-destroy:
#         jobs:
#             - destroy
#         triggers:
#           - schedule:
#               cron: "0 5 * * *" # 05 UTC 10pm PT
#               filters:
#                 branches:
#                   only: master
