""" Main module for handling incoming GitHub webhook event"""
from .lib import WebHookEvent, config, GithubApi

def handle_request(request, configuration=None):
    """Responds to any HTTP request.
    Args:
        request (flask.Request): HTTP request object.
    Returns:
        The response text or any set of values that can be turned into a
        Response object using
        `make_response <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.
    """
    if configuration is None:
        configuration = config.load('config.json')

    event = WebHookEvent(request)

    event.verify_signature(configuration)

    if not event.is_push_event():
        print("not a push event. skipping...")
        return

    handle_incoming_commit_push_json(event.info(), configuration)


def handle_incoming_commit_push_json(payload_info, configuration):
    """
      Main logic for handling incoming GitHub webhook event
    """
    print("handing incoming push event")
    repository = payload_info.repository
    source_branch = payload_info.incoming_branch

    if configuration.is_main_repository(repository):
        if source_branch in configuration.github.branches:
            handle_incoming_commit_push_in_stable_branches(source_branch,configuration)
        else:
            print("skipping push for non stable branch")
    elif configuration.is_submodule_repository(repository):
        print(f"change in submodules not supported {payload_info.repository}. skipping...")
        #handle_incoming_commit_from_submodule(payload_info, config)
    else:
        print(f"unknown source repository {payload_info.repository}. skipping...")
        return


def handle_incoming_commit_push_in_stable_branches(source_branch,configuration):
    """Hand incoming commit on major branch.
    Args:
        source_branch (String): Name of branch which commit was pushed to.
    """

    target_branch = configuration.github.branches[source_branch]
    if target_branch is None:
        print(f"unsupported target branch {source_branch}")
        return

    github = GithubApi(configuration.github)
    print(f"generating diff between {source_branch} and '{target_branch}'...")
    cmp = github.get_diff_commits(source_branch, target_branch)

    if cmp.status == "identical":
        print(f"'{target_branch}' and '{source_branch}' branches are identical. No action to perform.")
        return
    if cmp.status == "behind":
        print(f"'{target_branch}' is behind '{source_branch}'. creating PR ...")
        pr = github.create_pull_request(
            draft=configuration.pr.draft,
            labels=["sync"],
            title=f"[Sync Mainline Branches Bot] merge {source_branch} to {target_branch}",
            body_prefix=f"This is autogenerated Pull Request for porting {source_branch} to {target_branch}",
            base=target_branch,
            head=source_branch,
            assignees=configuration.pr.assignees
        )
        print(f'Pull request created: {pr.title}')

    if cmp.status == "ahead":
        print(f"'{target_branch}' is ahead of '{source_branch}'. No action to perform.")
        return


