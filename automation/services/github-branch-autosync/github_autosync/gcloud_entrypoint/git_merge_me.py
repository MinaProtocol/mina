""" Main module for handling incoming GitHub webhook event"""
from .lib import WebHookEvent, config, GithubApi


def handle_request(request, configuration=None):
    """Responds to any HTTP request.
    Args:
        request (flask.Request): HTTP request object.
    Returns:
        The response text or any set of values that can be turned into a
        Response object using
        `make_response <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.
    """
    event = WebHookEvent(request)
    if configuration is None:
        configuration = config.load('config.json')

    event.verify_signature(configuration)

    if not event.is_comment_event():
        print("It's not a comment event. skipping...")
        return

    if event.info().comment_body.strip() == "!help-merge-me":
        handle_incoming_comment(event.info(), configuration)
    else:
        print(f"not applicable issue comment")


def handle_incoming_comment(payload_info, configuration):
    """
      Main logic for handling incoming GitHub webhook event
    """
    pr_id = payload_info.issue_number
    pr_name = payload_info.issue_title
    print(f"handing incoming comment event on {pr_name}")

    github_api = GithubApi(configuration.github)

    pull = github_api.repository().get_pull_by_id(pr_id)
    if pull.is_merged():
        print("PR already merged. exiting")
        return

    branches = list(configuration.github.all_branches())
    incoming_branch = pull.head.ref
    target_branch = pull.base.ref

    if target_branch in branches:
        branches.remove(target_branch)

    porting_prs = []

    for stable_branch in branches:
        if github_api.has_merge_conflict(pull, stable_branch):
            print(f"branches {incoming_branch} and {stable_branch} have a merge conflict! creating PR to address "
                  f"those changes...")

            new_branch = f"merge/port_{incoming_branch}_to{stable_branch}"
            new_pr = github_api.create_pull_request(
                draft=configuration.pr.draft,
                assignees=list(map(lambda x: x.login, pull.assignees)),
                labels=["merge"],
                title=f"[Merge Conflict Fix] port {incoming_branch} to {stable_branch}",
                body_prefix=f"This is autogenerated Pull Request for porting {incoming_branch} to {stable_branch}",
                base=stable_branch,
                head=incoming_branch
                )

            print(f"new PR: '{new_pr.title}' created. Please resolve it before merge...")
            porting_prs.append((new_pr.html_url, new_branch, stable_branch))

    if any(porting_prs):
        pull.create_issue_comment(github_api.comment_conflict(porting_prs,f"Hello, @{pull.user.login} {len(porting_prs)} new PRs created to help "
                                                                          f"you port this change to {target_branch}"))