FROM gcr.io/o1labs-192920/mina-rosetta-build-deps@sha256:eb4d3ad2c15127e00c68b7b2c07dd8f887ed20c499d1302e963cbf02740b9eaa

# if updated, also change in Dockerfile
ARG OCAML_VERSION=4.11.2
ARG DOCKER_VERSION=19.03.4
ARG TERRAFORM_VERSION=0.12.29

# location of repo used for pins and external package commits
ARG MINA_DIR=mina

# location of external packages
ARG EXTERNAL_PKG_DIR=$MINA_DIR/src/external

# don't keep sources, to force reinstall of pinned packages from Mina sources
# and to keep Docker image reasonable size
ARG OPAMKEEPBUILDDIR=false
ARG OPAMREUSEBUILDDIR=false

ENV DEBIAN_FRONTEND=noninteractive

# buster-only packages
    # python3-sexpdata \
    # python-sexpdata \
    # libjemalloc2 \
    # libprocps8 \
    # libffi7 \
    # libgmp10 \
    # libgomp1 \

# Workaround terrible postgresql package requirements with man
RUN sudo mkdir -p /usr/share/man/man7 /usr/share/man/man1

# OS package dependencies
RUN sudo apt-get update -y \
  && sudo apt-get install -y \
    apt-transport-https \
    apt-utils \
    awscli \
    cmake \
    jq \
    libboost-dev \
    libboost-program-options-dev \
    libbz2-dev \
    libffi-dev \
    libgmp-dev \
    libgmp3-dev \
    libjemalloc-dev \
    libpq-dev \
    libprocps-dev \
    libsodium-dev \
    libssl-dev \
    lsb-release \
    m4 \
    man \
    pandoc \
    patchelf \
    postgresql \
    postgresql-contrib \
    perl \
    pkg-config \
    python \
    python-flake8 \
    python-jinja2 \
    python-pip \
    python3-flake8 \
    python3-jinja2 \
    python3-pip \
    rubygems \
    zlib1g-dev

# -- python dependencies (largely installed above from apt)
RUN sudo pip install readchar sexpdata \
    && sudo pip3 install readchar sexpdata

# --- deb-s3 tool (deprecated! replace somehow!)
RUN sudo gem install deb-s3

# --- Docker Daemon
RUN curl -L -o /tmp/docker-${DOCKER_VERSION}.tgz https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz \
    && tar -xz -C /tmp -f /tmp/docker-${DOCKER_VERSION}.tgz \
    && sudo mv /tmp/docker/* /usr/bin

# --- Terraform tools
RUN curl -sL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o terraform.zip \
    && unzip terraform.zip \
    && sudo mv terraform /usr/bin \
    && sudo ln -s /usr/bin/terraform /usr/local/bin/terraform

# --- Google Cloud tools
RUN export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" \
    && echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
    && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - \
    && sudo apt-get update -y \
    && sudo apt-get install -y google-cloud-sdk kubectl

# --- Helm tools
RUN curl https://baltocdn.com/helm/signing.asc | sudo apt-key add - \
    && echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list \
    && sudo apt-get update -y \
    && sudo apt-get install -y helm

# --- Rust Compiler + tools (already included in mina-rosetta:build-deps)
# RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rust_install.sh
# RUN chmod +x /tmp/rust_install.sh
# RUN /tmp/rust_install.sh -y
# RUN export PATH="$PATH:$HOME/.cargo/bin"
# RUN echo 'export PATH="$PATH:$HOME/.cargo/bin"' >> /home/opam/.bashrc
# RUN bash -c "source $HOME/.cargo/env && rustup toolchain install 1.52.1 && rustup default 1.52.1"

# Get yarn + nodejs
RUN curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list \
    && sudo apt update \
    && sudo apt install -y nodejs yarn

# --- Rocksdb (already included in mina-rosetta:build-deps)
# Source copy of rocksdb
# RUN sudo git clone https://github.com/facebook/rocksdb -b v5.17.2 /rocksdb
# This builds and installs just the static lib for us
# RUN cd /rocksdb && sudo make static_lib PORTABLE=1 -j$(nproc) && sudo cp librocksdb.a /usr/local/lib/librocksdb_coda.a && sudo rm -rf /rocksdb && sudo strip -S /usr/local/lib/librocksdb_coda.a

# --- OPAM dependencies and configuration (already included in mina-rosetta:build-deps)
# RUN git -C /home/opam/opam-repository pull
# RUN opam update -y && opam upgrade -y
# RUN mkdir --mode=700 /home/opam/.gnupg
# RUN echo "disable-ipv6" >> /home/opam/.gnupg/dirmngr.conf

# we used to delete the repo here
# we now leave it intact, in case updating OPAM in CI requires pinned package sources

# --- Install go (already included in mina-rosetta:build-deps)
# RUN sudo apt-get install --yes wget
# RUN cd /usr/lib && sudo wget https://dl.google.com/go/go1.15.8.linux-amd64.tar.gz && sudo tar -xvf go1.15.8.linux-amd64.tar.gz && sudo rm go1.15.8.linux-amd64.tar.gz
# RUN echo 'export PATH="$PATH:/usr/lib/go/bin"' >> /home/opam/.bashrc

# -- Change timezone to UTC (mina-rosetta:build-deps never changed this in the first place)
# The Ocaml images are set to London time for reason. UTC makes reading the logs
# easier.
# RUN sudo ln -sf /usr/share/zoneinfo/UTC /etc/localtime

# Unlimit stack for future shells that might use spacetime
RUN echo ulimit -s unlimited >> ~/.bashrc
