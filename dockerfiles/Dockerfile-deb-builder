#################################################################################################
# The "build-deps" stage
# - Installs all compilers/interpreters, tools, and OS packages on debian buster-slim
#################################################################################################
ARG CODENAME=stretch
FROM debian:${CODENAME}-slim AS build-deps

# Ocaml Version
ARG OCAML_VERSION=4.07
ARG OCAML_REVISION=.1
ARG OCAML_VARIANT=+logoom
ARG OCAML_PACKAGE=ocaml-variants
ARG OPAM_VERSION=2.0.7

# Golang version number used to detemine tarball name
ARG GO_VERSION=1.13.10

# Rust Version passed into rustup-init, can also be "stable", "nightly" or similar
ARG RUST_VERSION=1.52.1

# Rocksdb commit tag/branch to clone
ARG ROCKSDB_VERSION=v5.17.2

# OS package dependencies
# First add support for https and pkg-config for apt, then install everything else
# TODO: make sure this is the minimum compile-time deps
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update \
  && apt-get install --yes \
    build-essential \
    libboost-dev \
    libboost-program-options-dev \
    libffi-dev \
    libgmp-dev \
    libgmp3-dev \
    libjemalloc-dev \
    libpq-dev \
    libprocps-dev \
    libsodium-dev \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libcap-dev \
    pkg-config \
    cmake \
    m4 \
    git \
    curl \
    sudo \
    rsync \
    unzip \
    file

# Create opam user (for later) and give sudo to make opam happy
RUN adduser --uid 1000 --disabled-password --gecos '' opam \
  && passwd -l opam \
  && chown -R opam:opam /home/opam \
  && echo 'opam ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/opam \
  && chmod 440 /etc/sudoers.d/opam \
  && chown root:root /etc/sudoers.d/opam \
  && chmod 777 /tmp

# Opam install of a given OPAM_VERSION from github release
RUN curl -sL \
  "https://github.com/ocaml/opam/releases/download/${OPAM_VERSION}/opam-${OPAM_VERSION}-x86_64-linux" \
  -o /usr/bin/opam \
  && chmod +x /usr/bin/opam

# Golang install of a given GO_VERSION (add -v for spam output of each file from the go dist)
# TODO: rosetta requires binary file downloads of this sort to be hashed + validated
RUN curl -s "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz" | tar -xz -C /usr/lib/

# Rust install via rustup-init to a given RUST_VERSION
# TODO: rosetta requires binary file downloads of this sort to be hashed + validated

USER opam
RUN curl --proto '=https' --tlsv1.2 -sSf -o /tmp/rustup-init \
  https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init \
  && chmod +x /tmp/rustup-init \
  && /tmp/rustup-init -y --default-toolchain "${RUST_VERSION}" --profile minimal \
  && rm /tmp/rustup-init
# For more about rustup-init see: https://github.com/rust-lang/rustup/blob/master/README.md
# As opposed to introducing another shell script here (that mostly just determines the platform)
# we just download the binary for the only platform we care about in this docker environment

USER root
# This builds and installs just the rocksdb static lib for us, and cleans up after itself
RUN git clone https://github.com/facebook/rocksdb \
  --depth 1 --shallow-submodules \
  -b "${ROCKSDB_VERSION}" /rocksdb \
  && make -C /rocksdb static_lib PORTABLE=1 -j$(nproc) \
  && cp /rocksdb/librocksdb.a /usr/local/lib/librocksdb_coda.a \
  && rm -rf /rocksdb \
  && strip -S /usr/local/lib/librocksdb_coda.a

###########################################################################################
# Initialize opam in a minimal fashion
###########################################################################################

# Set up environment for running as opam user
WORKDIR /home/opam
USER opam
ENV HOME /home/opam
# ENV OPAMYES 1

# Create the following user directory configs as the Opam user:
## Add go + rust to the path, unlimit the opam user,
## unlimit stack for future shells that might use spacetime,
## disable ipv6
## disable sandboxing to allow unprivledged builds
RUN mkdir --mode=700 ~/.gnupg \
  && echo 'export PATH="$PATH:/usr/lib/go/bin:$HOME/.cargo/bin"' >> ~/.bashrc \
  && echo 'ulimit -s unlimited' >> ~/.bashrc \
  && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf

# Ocaml install of a given OCAML_VERSION via opam switch
# additionally initializes opam with sandboxing disabled, as we did not install bubblewrap above.
RUN git clone \
  git://github.com/ocaml/opam-repository \
  --depth 1 \
  /home/opam/opam-repository \
  && opam init --disable-sandboxing -k git -a ~/opam-repository --bare \
  && opam repository add --yes --all --set-default o1-labs https://github.com/o1-labs/opam-repository.git \
  && opam switch create "${OCAML_VERSION}" "${OCAML_PACKAGE}.${OCAML_VERSION}${OCAML_REVISION}${OCAML_VARIANT}" \
  && opam switch "${OCAML_VERSION}"

#################################################################################################
# The "opam-deps" Stage
# - Continues from the build-deps image
# - Installs all opam dependencies and pins from mina's github
# - Includes the entire mina codebase and submodules in "${MINA_DIR}" (must be writable by opam user)
# - Largely mirrors/replaces ./scripts/setup-opam.sh
#################################################################################################
FROM build-deps AS opam-deps

# location of repo used for pins and external package commits
ARG MINA_DIR=mina
# branch to checkout on first clone (this will be the only availible branch in the container)
# can also be a tagged release
# TODO: change this to two distinct variables, one for opam/dependency clone
#       and a distinct one for the mina codebase in the next stage
ARG OPAM_BRANCH=compatible

# location of external packages
ARG EXTERNAL_PKG_DIR=$MINA_DIR/src/external

# don't keep sources, to force reinstall of pinned packages from Mina sources
# and to keep Docker image reasonable size
ENV OPAMKEEPBUILDDIR false
ENV OPAMREUSEBUILDDIR false

# git will clone into an empty dir, but this also helps us set the workdir in advance
RUN git clone \
  -b "${OPAM_BRANCH}" \
  --depth 1 \
  --shallow-submodules \
  --recurse-submodules \
  https://github.com/MinaProtocol/mina ${HOME}/${MINA_DIR}

WORKDIR $HOME/$MINA_DIR

ENV OPAMYES 1
# TODO: handle this opam work without cloning the full repository (directly pull src/opam.export)
# TODO: handle uri's build failure in a more flexible manner
# Installs uri.2.2.1 and its dependencies so that build succeeds, then installs the rest of the deps
RUN opam install \
  $(scripts/select-opam-deps.sh \
  uri \
  base \
  stdio \
  ppx_sexp_conv \
  ppxlib \
  ocaml-compiler-libs \
  ocaml-migrate-parsetree \
  dune \
  ocamlfind \
  base-bytes \
  ppx_derivers \
  re \
  result \
  stringext) \
  && opam switch import src/opam.export

# TODO: Get pins from a script that can be easily updated if more pins are needed
# Would be really nice to pull this script, the git submodules, and src/opam.export exclusively in this stage
RUN eval $(opam config env) \
  && opam pin add src/external/ocaml-extlib \
  && opam pin add src/external/ocaml-sodium \
  && opam pin add src/external/rpc_parallel \
  && opam pin add src/external/async_kernel \
  && opam pin add src/external/coda_base58 \
  && opam pin add src/external/graphql_ppx \
  && opam clean --logs -cs


#################################################################################################
# The "builder" Stage
# - builds mina and any other binaries required to run a node
# - should not include any data related to joining a specific network, only the node software itself
#################################################################################################
FROM opam-deps AS builder

# Use --build-arg "DUNE_PROFILE=dev" to build a dev image or for CI
ARG DUNE_PROFILE=devnet

# branch to checkout on first clone (this will be the only availible branch in the container)
# can also be a tagged release
ARG MINA_BRANCH=compatible

ARG MINA_COMMIT

# repo to checkout the branch from
ARG MINA_REPO=https://github.com/MinaProtocol/mina

# location of repo used for pins and external package commits
ARG MINA_DIR=mina

ENV MINA_COMMIT_SHA1=${MINA_COMMIT}

ENV PATH "$PATH:/usr/lib/go/bin:$HOME/.cargo/bin"

# git will clone into an empty dir, but this also helps us set the workdir in advance
RUN cd $HOME \
  && rm -rf ${HOME}/${MINA_DIR} \
  && git clone \
  -b ${MINA_BRANCH} \
  --shallow-submodules \
  --recurse-submodules \
  ${MINA_REPO:-https://github.com/MinaProtocol/mina} ${HOME}/${MINA_DIR} \
  && cd ${HOME}/${MINA_DIR} \
  && git reset --hard ${MINA_COMMIT}

WORKDIR $HOME/${MINA_DIR}

# Build libp2p_helper and clear go module caches
# Could maybe also delete go during this step / build it as part of the deps stage?
RUN cd src/app/libp2p_helper/src \
   && go mod download \
   && cd generate_methodidx \
   && go build -o ${HOME}/app/generate_methodidx \
   && cd ../libp2p_helper \
   && go build -o ${HOME}/app/libp2p_helper \
   && go clean --cache --modcache --testcache -r

# HACK: build without special cpu features to allow more people to run mina
RUN ./scripts/zexe-standardize.sh

# --- Build all major tagets required for packaging
RUN echo "--- Build all major tagets required for packaging" \
   && echo "Building from Commit SHA: ${MINA_COMMIT_SHA1}" \
   && eval $(opam config env) \
   && dune build --profile=${DUNE_PROFILE} \
    src/app/logproc/logproc.exe \
    src/app/runtime_genesis_ledger/runtime_genesis_ledger.exe \
    src/app/generate_keypair/generate_keypair.exe \
    src/app/validate_keypair/validate_keypair.exe \
    src/app/cli/src/mina.exe \
    src/app/cli/src/mina_testnet_signatures.exe \
    src/app/cli/src/mina_mainnet_signatures.exe \
    src/app/archive/archive.exe \
    src/app/archive/archive_testnet_signatures.exe \
    src/app/archive/archive_mainnet_signatures.exe \
    src/app/rosetta/rosetta.exe \
    src/app/rosetta/rosetta_mainnet_signatures.exe \
    src/app/rosetta/rosetta_testnet_signatures.exe \
    src/app/rosetta/test-agent/agent.exe \
    src/app/rosetta/ocaml-signer/signer.exe

# --- MAKE DEB
RUN eval $(opam config env) \
   && echo "Building from Commit SHA: ${MINA_COMMIT_SHA1}" \
   && ./scripts/rebuild-deb.sh

# Rosetta-demo artifacts / build dir removal:
# Make rosetta-crucial components and the generate_keypair tool
#  && dune build --profile=${DUNE_PROFILE} \
#  && _build/default/src/app/runtime_genesis_ledger/runtime_genesis_ledger.exe \
#    --config-file src/app/rosetta/demo-config.json \
#    --genesis-dir ${HOME}/demo-genesis \
#  && mv _build/default/src/app $HOME/app \
#  && rm -rf _build
