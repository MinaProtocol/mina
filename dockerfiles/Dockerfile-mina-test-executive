ARG image=debian:bullseye-slim
FROM ${image}
# Run with `docker build --build-arg deb_version=<version>`
ARG deb_version
ARG deb_release=unstable
ARG deb_codename=bullseye
ARG MINA_BRANCH
ARG MINA_REPO=https://github.com/MinaProtocol/mina

ENV DEBIAN_FRONTEND noninteractive

# Dependencies
RUN apt-get update --quiet --yes \
  && apt-get upgrade --quiet --yes \
  && apt-get install --quiet --yes --no-install-recommends \
    apt-transport-https \
    ca-certificates \
    curl \
    dnsutils \
    dumb-init \
    gettext \
    gnupg2 \
    jq \
    libgmp10 \
    libgomp1 \
    libssl1.1 \
    libpq-dev \
    procps \
    python3 \
    tzdata \
    'libjemalloc.$' \
    git \
    wget \
    sudo \
    unzip \
  && rm -rf /var/lib/apt/lists/*


# --- Terraform tools
RUN wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    && gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint \
    && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $deb_codename main" | sudo tee /etc/apt/sources.list.d/hashicorp.list \
    && apt-get update --quiet --yes \
    && apt-get install --quiet --yes terraform \
    && rm -rf /var/lib/apt/lists/*

# Install google-cloud-sdk for GCLOUD_UPLOAD feature
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
  && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - \
  && apt-get update --quiet --yes \
  && apt-get install --quiet --yes --no-install-recommends google-cloud-sdk kubectl google-cloud-sdk-gke-gcloud-auth-plugin \
  && rm -rf /var/lib/apt/lists/*

ENV USE_GKE_GCLOUD_AUTH_PLUGIN=True

# --- Helm tools
RUN curl https://baltocdn.com/helm/signing.asc | sudo apt-key add - \
    && echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list \
    && sudo apt-get update -y \
    && sudo apt-get install -y helm

# Get yarn + nodejs
RUN curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list \
    && sudo apt-get update \
    && sudo apt-get install -y nodejs yarn

# Mina mina test executive package
RUN echo "Installing mina-test-executive onto image with version $deb_version from repo $deb_release $deb_codename " \
  && echo "deb [trusted=yes] http://packages.o1test.net $deb_codename $deb_release" > /etc/apt/sources.list.d/o1.list \
  && apt-get update --yes \
  && apt-get install --yes --allow-downgrades "mina-test-executive=$deb_version"

# Move to a non-root UID in the future (specifically 50000, as it is memorable and safely within the bounds of most systems)
# for now stick to root for compatibility
ARG UID=0

## Reset workdir, USER, and ${UID} for root-owned version
WORKDIR /root
USER 0

RUN git clone $MINA_REPO --branch $MINA_BRANCH --depth 1 \
  && cd ./mina

WORKDIR /root/mina

# these env vars need to be overriden when the image is `docker run`.  listed here for documentation sake if nothing else
# test configuration vars
ENV TEST_NAME=""
ENV MINA_IMAGE=""
ENV ARCHIVE_IMAGE=""
ENV DEBUG_BOOL=false
# testnet infra related vars
ENV GOOGLE_APPLICATION_CREDENTIALS=""
ENV GCLOUD_API_KEY=""
ENV AWS_ACCESS_KEY_ID=""
ENV AWS_SECRET_ACCESS_KEY=""
ENV AWS_DEFAULT_REGION=us-west-2

# this var needs to be present but it won't change and doesn't need to be overriden
ENV KUBE_CONFIG_PATH=/root/.kube/config

COPY --chown=${UID} scripts/run_test_executive.sh /run_test_executive.sh
RUN chmod +x /run_test_executive.sh

ENTRYPOINT ["/bin/bash", "-c","/run_test_executive.sh"]
