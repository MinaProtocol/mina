# The container to pull artifacts from, expected to be from stage 3-builder
# but it can also be supplied as a build arg to pull from a specific pre-built image for speed
ARG MINA_BUILDER_STAGE=builder
FROM ${MINA_BUILDER_STAGE} as prebuilt-stage
ARG image=debian:bullseye-slim
# Mina archive docker image, built and packaged via the staged dockerfiles directly into a clean production container
FROM ${image} AS archive
ARG deb_version=1.3.1.2
# The container to pull artifacts from, expected to be from stage 3-builder
# but it can also be supplied as a build arg to pull from a specific pre-built image for speed
ARG MINA_BUILDER_STAGE=builder

# Dependencies
RUN DEBIAN_FRONTEND=noninteractive apt-get --quiet --yes update && \
  DEBIAN_FRONTEND=noninteractive apt-get --quiet --yes upgrade && \
  DEBIAN_FRONTEND=noninteractive apt-get --quiet --yes --no-install-recommends install \
    apt-utils \
    apt-transport-https \
    ca-certificates \
    curl \
    dnsutils \
    dumb-init \
    gettext \
    gnupg2 \
    libgmp10 \
    libgomp1 \
    libssl1.1 \
    libpq-dev \
    jq \
    man \
    postgresql \
    postgresql-contrib \
    procps \
    tzdata \
    'libjemalloc.$' \
    'libffi.$' \
    'libprocps.$'

# Mina archive package, copied from the builder container
COPY --from=prebuilt-stage /tmp/artifacts/mina-archive_${deb_version}.deb /root/mina-archive-package.deb
# And then installed
RUN echo "Building image with version $deb_version from compiled debian package for network $network" \
  && dpkg -i /root/mina-archive-package.deb \
  && rm -rf /root/mina-archive-package.deb

WORKDIR /root/
USER 0

COPY scripts/archive-entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

RUN mkdir /healthcheck && curl https://raw.githubusercontent.com/MinaProtocol/mina/develop/dockerfiles/scripts/healthcheck-utilities.sh -o /healthcheck/utilities.sh

ENTRYPOINT ["/usr/bin/dumb-init", "/entrypoint.sh"]
