#################################################################################################
# The "toolchain" Stage
# - installs optional tools that are required in our CI/CD but are not required to build mina
#################################################################################################
FROM opam-deps AS toolchain

ARG DOCKER_VERSION=19.03.4
ARG TERRAFORM_VERSION=0.14.11

# location of repo used for pins and external package commits
ARG MINA_DIR=mina

# location of external packages
ARG EXTERNAL_PKG_DIR=$MINA_DIR/src/external

# don't keep sources, to force reinstall of pinned packages from Mina sources
# and to keep Docker image reasonable size
ENV OPAMKEEPBUILDDIR=false
ENV OPAMREUSEBUILDDIR=false

ENV DEBIAN_FRONTEND=noninteractive

# OS package dependencies
RUN sudo apt-get update -y \
  && sudo apt-get install -y \
    apt-transport-https \
    apt-utils \
    awscli \
    cmake \
    jq \
    libboost-dev \
    libboost-program-options-dev \
    libbz2-dev \
    libffi-dev \
    libgmp-dev \
    libgmp3-dev \
    libgmp10 \
    libgomp1 \
    libjemalloc-dev \
    libpq-dev \
    libprocps-dev \
    libsodium-dev \
    libssl-dev \
    lsb-release \
    m4 \
    pandoc \
    patchelf \
    postgresql \
    postgresql-contrib \
    perl \
    pkg-config \
    python \
    python-flake8 \
    python-jinja2 \
    python-pip \
    python3-flake8 \
    python3-jinja2 \
    python3-pip \
    rubygems \
    zlib1g-dev

# -- python dependencies (largely installed above from apt)
RUN test "$deb_codename" = "buster" \
      && sudo apt-get install -y \
        python3-sexpdata \
        python-sexpdata \
      || sudo pip install readchar sexpdata \
      && sudo pip3 install readchar sexpdata

# --- deb-s3 tool
RUN curl -sLO https://github.com/deb-s3/deb-s3/releases/download/0.11.3/deb-s3-0.11.3.gem \
    && sudo gem install deb-s3-0.11.3.gem \
    && rm -f deb-s3-0.11.3.gem

# --- Docker Daemon
RUN curl -L -o /tmp/docker-${DOCKER_VERSION}.tgz https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz \
    && tar -xz -C /tmp -f /tmp/docker-${DOCKER_VERSION}.tgz \
    && sudo mv /tmp/docker/* /usr/bin

# --- Terraform tools
RUN curl -sL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o terraform.zip \
    && unzip terraform.zip \
    && sudo mv terraform /usr/bin \
    && sudo ln -s /usr/bin/terraform /usr/local/bin/terraform

# --- Google Cloud tools
RUN export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" \
    && echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
    && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - \
    && sudo apt-get update -y \
    && sudo apt-get install -y google-cloud-sdk kubectl

# --- Helm tools
RUN curl https://baltocdn.com/helm/signing.asc | sudo apt-key add - \
    && echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list \
    && sudo apt-get update -y \
    && sudo apt-get install -y helm

# Get yarn + nodejs
RUN curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list \
    && sudo apt update \
    && sudo apt install -y nodejs yarn
