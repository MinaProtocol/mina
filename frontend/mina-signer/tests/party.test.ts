import Client from "../src/MinaSigner";
import type { Party, Signed } from "../src/TSTypes";

/**
 * This is an example of a Parties transaction. This can be generated by
 * creating a transaction in SnarkyJS and printing it out as JSON.
 *
 * TODO: When there is an example of how to do this in the SnarkyJS repo,
 * use that example instead.
 */
let otherParties = {
  otherParties: [
    {
      body: {
        publicKey: "B62qieh9a3U8Z4s8c3DHhCyDECqyZLyRtGA5GBDMqqi6Lf1gaHX4hLt",
        tokenId: "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf",
        update: {
          appState: ["10", null, null, null, null, null, null, null],
          delegate: null,
          verificationKey: {
            data: "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",
            hash: "18753095584909191988538875989540962807093667505395285390425215897303813357929",
          },
          permissions: {
            editState: "Proof",
            send: "Signature",
            receive: "Proof",
            setDelegate: "Signature",
            setPermissions: "Signature",
            setVerificationKey: "Signature",
            setZkappUri: "Signature",
            editSequenceState: "Proof",
            setTokenSymbol: "Signature",
            incrementNonce: "Signature",
            setVotingFor: "Signature",
          },
          zkappUri: null,
          tokenSymbol: null,
          timing: null,
          votingFor: null,
        },
        balanceChange: { magnitude: "0", sgn: "Positive" },
        incrementNonce: false,
        events: [],
        sequenceEvents: [],
        callData: "0",
        callDepth: 0,
        preconditions: {
          network: {
            snarkedLedgerHash: null,
            timestamp: null,
            blockchainLength: { lower: "0", upper: "4294967295" },
            minWindowDensity: { lower: "0", upper: "4294967295" },
            totalCurrency: { lower: "0", upper: "18446744073709551615" },
            globalSlotSinceHardFork: { lower: "0", upper: "4294967295" },
            globalSlotSinceGenesis: { lower: "0", upper: "4294967295" },
            stakingEpochData: {
              ledger: {
                hash: null,
                totalCurrency: { lower: "0", upper: "18446744073709551615" },
              },
              seed: null,
              startCheckpoint: null,
              lockCheckpoint: null,
              epochLength: { lower: "0", upper: "4294967295" },
            },
            nextEpochData: {
              ledger: {
                hash: null,
                totalCurrency: { lower: "0", upper: "18446744073709551615" },
              },
              seed: null,
              startCheckpoint: null,
              lockCheckpoint: null,
              epochLength: { lower: "0", upper: "4294967295" },
            },
          },
          account: {
            balance: { lower: "0", upper: "18446744073709551615" },
            nonce: { lower: "0", upper: "4294967295" },
            receiptChainHash: null,
            publicKey: null,
            delegate: null,
            state: [null, null, null, null, null, null, null, null],
            sequenceState: null,
            provedState: null,
          },
        },

        useFullCommitment: true,
        caller: "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf",
      },
      authorization: {
        proof: null,
        signature:
          "7mXUeGjU88qsWxLuQg73SZFymiY69bntH4m8uwbtd5KDqpRWedb4T4YJKDkbjq6TtdYox5UhuJ2TPZbaogvkpuyo2H7kFB73",
      },
    },
  ],
  memo: "E4YM2vTHhWEg66xpj52JErHUBU4pZ1yageL4TVDDpTTSsv8mK6YaH",
};
describe("Party", () => {
  let client: Client;

  beforeAll(async () => {
    client = new Client({ network: "mainnet" });
  });

  it("generates a signed party", () => {
    const keypair = client.genKeys();
    const parties = client.signParty(
      {
        parties: otherParties,
        feePayer: {
          feePayer: keypair.publicKey,
          fee: "1",
          nonce: "0",
          memo: "test memo",
        },
      },
      keypair.privateKey
    );
    expect(parties.data).toBeDefined();
    expect(parties.signature).toBeDefined();
  });

  it("generates a signed party by using signTransaction", () => {
    const keypair = client.genKeys();
    const parties = client.signTransaction(
      {
        parties: otherParties,
        feePayer: {
          feePayer: keypair.publicKey,
          fee: "1",
          nonce: "0",
          memo: "test memo",
        },
      },
      keypair.privateKey
    ) as Signed<Party>;
    expect(parties.data).toBeDefined();
    expect(parties.signature).toBeDefined();
  });
});
